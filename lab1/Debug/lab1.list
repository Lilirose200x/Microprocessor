
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002668  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fec  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003810  08003810  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003810  08003810  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003810  08003810  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000070  08003888  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08003888  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_line   00006e0d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00005eae  00000000  00000000  00026ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014a5  00000000  00000000  0002cd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fbe2e  00000000  00000000  0002e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000528  00000000  00000000  0012a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029ba4  00000000  00000000  0012ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00154714  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c8  00000000  00000000  001547dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000007de  00000000  00000000  00155fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800280c 	.word	0x0800280c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	0800280c 	.word	0x0800280c

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpun>:
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x10>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d10a      	bne.n	8000ace <__aeabi_dcmpun+0x26>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__aeabi_dcmpun+0x20>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_dcmpun+0x26>
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0001 	mov.w	r0, #1
 8000ad2:	4770      	bx	lr

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <asmMul>:
.global asmMul
.section .text.rodata


asmMul:
	VSUB.F32 S2, S2, S2 	//Clear Register
 8000b74:	ee31 1a41 	vsub.f32	s2, s2, s2
	MOV R4, #0				//R4 Counter = 0
 8000b78:	f04f 0400 	mov.w	r4, #0

08000b7c <loop>:

loop:
	ADD R4, R4, #1			// R4 +=1
 8000b7c:	f104 0401 	add.w	r4, r4, #1
	VLDR.F32 S0, [R0]		// S0 = array1[i]
 8000b80:	ed90 0a00 	vldr	s0, [r0]
	VLDR.F32 S1, [R1]		// S1 = array2[i]
 8000b84:	edd1 0a00 	vldr	s1, [r1]
	ADD R0, R0, #4			// i+=1 for array1
 8000b88:	f100 0004 	add.w	r0, r0, #4
	ADD R1, R1, #4			// i+=1 for array2
 8000b8c:	f101 0104 	add.w	r1, r1, #4
	VMUL.F32 S1, S0, S1 	// S1 = array1[i] x array2[i]
 8000b90:	ee60 0a20 	vmul.f32	s1, s0, s1
	VSTR.F32 S1, [R3]		// Store result for ith element
 8000b94:	edc3 0a00 	vstr	s1, [r3]
	ADD R3,R3,#4			// i+=1 for result
 8000b98:	f103 0304 	add.w	r3, r3, #4
	CMP R4, R2				// loop finishes when R4 > R2 (R2=size)
 8000b9c:	4294      	cmp	r4, r2
	BLT loop
 8000b9e:	dbed      	blt.n	8000b7c <loop>

	BX LR					//return
 8000ba0:	4770      	bx	lr

08000ba2 <asmStdDev>:
.syntax unified
.global asmStdDev
.section .text.rodata

asmStdDev:
	PUSH {R4}								// saving context according to calling convention
 8000ba2:	b410      	push	{r4}
	MOV R3, R0								// R3 = base address
 8000ba4:	4603      	mov	r3, r0
	MOV R4, R1								// R4 = size
 8000ba6:	460c      	mov	r4, r1
	MOV R5 , R4
 8000ba8:	4625      	mov	r5, r4
	VSUB.F32 S0, S0, S0					    // Clear registers for stable result
 8000baa:	ee30 0a40 	vsub.f32	s0, s0, s0
	VSUB.F32 S1, S1, S1
 8000bae:	ee70 0ae0 	vsub.f32	s1, s1, s1
	VSUB.F32 S2, S2, S2
 8000bb2:	ee31 1a41 	vsub.f32	s2, s2, s2
	VSUB.F32 S3, S3, S3
 8000bb6:	ee71 1ae1 	vsub.f32	s3, s3, s3

08000bba <sum>:

sum:
	SUBS R4, R4, #1						    //	size = size-1
 8000bba:	3c01      	subs	r4, #1
	BLT mean							    //	loop finishes when R4 < 0
 8000bbc:	db06      	blt.n	8000bcc <mean>
	VLDR.F32 S0, [R3]					    //	move matrix value to S0
 8000bbe:	ed93 0a00 	vldr	s0, [r3]
	VADD.F32 S1, S1, S0				 	    //	Sum
 8000bc2:	ee70 0a80 	vadd.f32	s1, s1, s0
	ADD R3, R3, #4						    //	next index
 8000bc6:	f103 0304 	add.w	r3, r3, #4
	B sum
 8000bca:	e7f6      	b.n	8000bba <sum>

08000bcc <mean>:

mean:
	VMOV.F32 S0, R1							// S0 = size
 8000bcc:	ee00 1a10 	vmov	s0, r1
	VCVT.F32.U32 S0, S0 					// S0 type float
 8000bd0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
	VDIV.F32 S1, S1, S0						// S1 = sum/size
 8000bd4:	eec0 0a80 	vdiv.f32	s1, s1, s0

08000bd8 <variance_numerator>:

variance_numerator:
	SUBS R1, R1, #1							//	size = size-1
 8000bd8:	3901      	subs	r1, #1
	BLT variance							//	loop finishes when R1 < 0
 8000bda:	db08      	blt.n	8000bee <variance>
	VLDR.F32 S2, [R0]						//	S2 = current element
 8000bdc:	ed90 1a00 	vldr	s2, [r0]
	VSUB.F32 S2, S2, S1						//  S2 = S2-mean
 8000be0:	ee31 1a60 	vsub.f32	s2, s2, s1
	VMLA.F32 S3, S2, S2						//	S3 += (S2-mean)^2
 8000be4:	ee41 1a01 	vmla.f32	s3, s2, s2
	ADD R0, R0, #4							// next index
 8000be8:	f100 0004 	add.w	r0, r0, #4
	B variance_numerator
 8000bec:	e7f4      	b.n	8000bd8 <variance_numerator>

08000bee <variance>:

variance:
	SUBS R5,R5,#1							// size = size -1
 8000bee:	3d01      	subs	r5, #1
	VMOV.F32 S0, R5							// S0 = size
 8000bf0:	ee00 5a10 	vmov	s0, r5
	VCVT.F32.U32 S0, S0 					// S0 type float
 8000bf4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
	VDIV.F32 S3, S3, S0						// S3 = variance
 8000bf8:	eec1 1a80 	vdiv.f32	s3, s3, s0

08000bfc <done>:

done:
	VSQRT.F32 S3, S3
 8000bfc:	eef1 1ae1 	vsqrt.f32	s3, s3
	VSTR.F32 S3, [R2]               		// store std dev value
 8000c00:	edc2 1a00 	vstr	s3, [r2]
	POP {R4}								// restore context
 8000c04:	bc10      	pop	{r4}
	BX LR                      				 // return
 8000c06:	4770      	bx	lr

08000c08 <cMul>:
 */
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

void cMul(float *array1, float *array2, uint32_t size,float *c_mul){
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
	for(int i=0; i<size ; i++) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e016      	b.n	8000c4a <cMul+0x42>
		c_mul[i] = array1[i]*array2[i];
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	ed93 7a00 	vldr	s14, [r3]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	4413      	add	r3, r2
 8000c30:	edd3 7a00 	vldr	s15, [r3]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c40:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<size ; i++) {
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d8e4      	bhi.n	8000c1c <cMul+0x14>
	}
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <cStdDev>:
#include <stdio.h>
#include <math.h>
#include "main.h"

void cStdDev(float *array, uint32_t size, float *c_std_dev){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
	float sum = 0;
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0 ; i<size ; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	e00e      	b.n	8000c96 <cStdDev+0x36>
		sum += array[i];
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i=0 ; i<size ; i++) {
 8000c90:	6a3b      	ldr	r3, [r7, #32]
 8000c92:	3301      	adds	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d8ec      	bhi.n	8000c78 <cStdDev+0x18>
	}

	float mean = sum/size;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ca8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb0:	edc7 7a05 	vstr	s15, [r7, #20]

	float variance = 0;
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
	for(int i=0 ; i<size; i++){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	e026      	b.n	8000d0e <cStdDev+0xae>
		variance+= (array[i]-mean)*(array[i]-mean)/(size-1);
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	ed93 7a00 	vldr	s14, [r3]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	edd3 6a00 	vldr	s13, [r3]
 8000ce0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ce4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ce8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	ee07 3a90 	vmov	s15, r3
 8000cf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cfc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d04:	edc7 7a07 	vstr	s15, [r7, #28]
	for(int i=0 ; i<size; i++){
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d8d4      	bhi.n	8000cc0 <cStdDev+0x60>
	}

	(*c_std_dev) = sqrt(variance);
 8000d16:	69f8      	ldr	r0, [r7, #28]
 8000d18:	f7ff fbd4 	bl	80004c4 <__aeabi_f2d>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	ec43 2b10 	vmov	d0, r2, r3
 8000d24:	f001 fc72 	bl	800260c <sqrt>
 8000d28:	ec53 2b10 	vmov	r2, r3, d0
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff fed0 	bl	8000ad4 <__aeabi_d2f>
 8000d34:	4602      	mov	r2, r0
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	601a      	str	r2, [r3, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	f5ad 4d9c 	sub.w	sp, sp, #19968	; 0x4e00
 8000d4a:	b098      	sub	sp, #96	; 0x60
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f000 fa7a 	bl	8001246 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f973 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f000 f9c3 	bl	80010e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // define our variables and array

  float c_std_dev = 0;
 8000d5a:	f04f 0300 	mov.w	r3, #0
 8000d5e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000d62:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000d66:	6013      	str	r3, [r2, #0]
  float asm_std_dev = 0 ;
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000d70:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000d74:	6013      	str	r3, [r2, #0]
  float arm_std_dev = 0 ;
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000d7e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000d82:	6013      	str	r3, [r2, #0]


  float array1[1000] = {47.68, 26.67, 64.09, 31.60, 25.83, 87.41, 67.60, 59.67, 43.07, 97.64, 71.48, 87.47, 20.74, 34.73, 19.57, 33.93, 15.06, 25.16, 36.89, 83.33, 3.50, 33.62, 40.05, 24.90, 35.29, 21.04, 39.92, 54.97, 34.18, 41.72, 67.35, 67.68, 98.41, 19.76, 52.58, 4.89, 79.51, 55.49, 84.28, 2.99, 12.81, 97.55, 24.99, 29.49, 23.48, 93.33, 81.25, 84.78, 93.46, 72.15, 13.79, 30.22, 70.75, 32.81, 67.36, 15.36, 25.08, 47.37, 47.70, 94.24, 30.44, 86.61, 7.47, 46.06, 73.97, 69.03, 75.98, 50.23, 58.21, 76.42, 15.18, 63.36, 82.14, 72.56, 60.64, 33.72, 4.37, 72.86, 55.78, 14.17, 9.64, 50.81, 2.67, 28.42, 35.68, 53.96, 75.15, 44.47, 57.25, 85.13, 80.87, 93.26, 77.22, 24.22, 81.69, 39.69, 79.69, 97.55, 90.13, 20.72, 61.22, 17.63, 40.56, 7.63, 45.31, 64.60, 32.89, 99.17, 68.49, 84.84, 54.03, 33.07, 68.14, 96.35, 38.63, 87.22, 27.35, 95.21, 91.27, 77.18, 12.24, 73.53, 3.88, 42.45, 1.16, 32.81, 67.44, 89.77, 17.87, 25.24, 30.13, 67.06, 4.87, 40.62, 31.72, 6.23, 18.95, 99.02, 30.57, 22.90, 44.83, 70.36, 99.26, 34.43, 97.37, 17.92, 60.66, 83.19, 25.38, 78.02, 7.13, 32.98, 78.94, 78.89, 50.85, 91.80, 22.50, 44.70, 39.35, 51.54, 83.55, 95.43, 93.26, 54.91, 29.67, 87.91, 32.33, 66.09, 93.72, 20.07, 11.40, 10.54, 20.59, 69.29, 84.31, 45.22, 52.47, 46.29, 56.82, 92.96, 18.83, 12.14, 92.64, 32.93, 72.31, 89.08, 23.84, 59.78, 33.81, 19.63, 2.08, 85.04, 56.26, 50.64, 97.82, 55.37, 54.47, 68.55, 82.26, 6.11, 33.91, 70.47, 40.01, 18.34, 96.85, 19.27, 89.14, 11.87, 51.20, 3.45, 15.64, 82.28, 78.51, 22.50, 53.62, 32.11, 15.21, 7.42, 52.73, 48.56, 5.90, 64.40, 48.35, 63.35, 53.98, 81.87, 50.55, 2.45, 66.14, 67.10, 34.36, 27.86, 61.01, 60.27, 72.12, 1.11, 54.17, 78.66, 86.55, 4.42, 67.81, 31.26, 12.51, 82.37, 25.53, 66.48, 33.39, 19.61, 68.14, 43.21, 69.44, 56.92, 98.21, 49.36, 3.99, 25.29, 31.48, 0.28, 53.98, 61.48, 73.44, 67.80, 61.94, 19.14, 71.26, 10.42, 58.31, 24.40, 11.55, 83.62, 29.02, 98.34, 75.56, 95.94, 18.00, 62.82, 62.61, 97.71, 67.34, 79.27, 76.87, 14.35, 56.43, 27.62, 4.06, 65.68, 53.32, 80.15, 31.53, 82.54, 22.94, 78.57,90.21, 33.69, 96.96, 66.15, 70.34, 71.97, 0.37, 51.87, 29.09, 31.10, 50.47, 10.93, 20.08, 83.79, 76.87, 25.83, 53.42, 69.67, 78.61, 75.15, 95.33, 36.52, 84.42, 15.53, 58.01, 95.63, 16.10, 37.41, 80.76, 93.80, 88.29, 63.42, 12.71, 60.12, 48.81, 86.49, 16.02, 1.79, 3.21, 51.96, 51.13, 37.01, 57.88, 52.02, 9.68, 56.47, 75.56, 19.59, 23.69, 48.95, 59.77, 32.46, 26.82, 16.74, 66.86, 53.63, 46.40, 20.60, 14.96, 56.83, 51.51, 65.68, 18.60, 81.05, 82.23, 87.48, 68.81, 72.10, 56.99, 96.86, 64.91, 73.01, 93.36, 27.56, 34.92, 91.31, 63.34, 1.16, 45.91, 75.16, 5.55, 36.70, 15.89, 1.11, 45.31, 53.97, 82.02, 57.28, 5.87, 99.81, 18.82, 51.64, 22.30, 0.07, 16.87, 24.14, 93.89, 48.96, 50.46, 64.51, 83.33, 76.72, 65.50, 98.85, 18.02, 59.99, 48.35, 27.93, 62.05, 84.35, 99.17, 67.20, 89.99, 14.77, 39.17, 3.15, 51.50, 18.67, 61.44, 69.89, 81.37, 81.29, 22.56, 21.50, 80.19, 41.63, 2.03, 55.73, 9.10, 58.43, 39.66, 54.79, 26.73, 30.26, 74.33, 36.27, 26.69, 94.18, 40.28, 48.46, 68.99, 64.21, 82.24, 39.28, 44.70, 63.63, 37.72, 7.32, 80.26, 22.02, 89.69, 49.62, 58.06, 8.89, 4.17, 38.12, 66.97, 59.28, 36.70, 54.29, 50.20, 6.05, 31.73, 74.03, 53.34, 26.90, 49.44, 29.27, 59.47, 2.80, 40.87, 58.82, 62.45, 83.46, 23.10, 94.51, 2.87, 94.97, 89.19, 81.83, 72.12, 24.83, 92.43, 63.39, 8.63, 9.23, 86.52, 64.28, 47.12, 64.75, 49.23, 19.48, 17.17, 6.60, 52.85, 27.81, 90.18, 65.70, 25.90, 39.21, 66.50, 32.69, 96.51, 25.61, 94.14, 14.52, 42.05, 84.97, 81.04, 76.92, 88.16, 31.25, 69.92, 1.45, 3.52, 33.20, 23.22, 38.33, 90.40, 44.67, 17.08, 78.66, 55.17, 62.20, 32.82, 37.08, 18.85, 88.06, 41.12, 37.62, 36.56, 87.84, 39.53, 66.11, 69.99, 3.37, 94.75, 93.88, 30.43, 41.83, 32.45, 24.85, 54.68, 55.31, 45.35, 27.89, 38.17, 79.37, 39.42, 53.45, 46.66, 41.76, 6.82, 63.52, 39.29, 17.86, 72.22, 26.14, 95.60, 61.03, 72.79, 99.45, 15.40, 86.39, 9.37, 13.01, 85.93, 25.23, 46.80, 94.93, 71.37, 66.11, 41.27, 43.85, 54.85, 22.36, 49.00, 82.21, 1.49, 14.20, 72.82, 44.99, 83.66, 2.15, 73.93, 99.53, 66.76, 25.92, 39.00, 83.00, 52.82, 83.50, 4.20, 25.36, 76.72, 98.56, 66.12, 98.53, 10.16, 67.71, 40.41, 83.90, 44.38, 17.14, 26.27, 55.17, 88.94, 8.97, 37.45, 38.82, 48.14, 61.66, 65.14, 42.12, 13.85, 56.29, 3.65, 4.28, 26.63, 71.45, 42.65, 47.98, 35.39, 78.03, 35.34, 18.79, 10.49, 58.41, 33.64, 10.02, 11.30, 21.49, 83.18, 3.83, 62.34, 98.00, 73.65, 89.30, 16.00, 30.22, 3.18, 34.56, 52.55, 73.97, 89.17, 0.80, 82.41, 82.23, 24.22, 95.51, 72.57, 88.05, 32.17, 20.18, 42.53, 61.90, 67.08, 48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73, 2.63, 31.29, 78.17, 38.70, 49.40, 92.02, 22.14, 44.02, 30.70, 43.67, 55.57, 20.56, 97.24, 49.39, 58.70, 1.41, 57.91, 38.84, 53.06, 9.98, 77.89, 9.35, 8.56, 75.73, 76.28, 20.59, 94.17, 32.44, 16.10, 26.58, 38.21, 17.99, 83.39, 7.99, 1.50, 2.79, 84.98, 44.90, 31.27, 89.46, 53.60, 59.02, 95.59, 71.88, 8.49, 57.56, 88.04, 0.00, 5.10, 62.35, 46.18, 27.15, 21.62, 72.80, 15.94, 20.62, 78.20, 86.16, 40.20, 15.71, 77.00, 30.56, 38.81, 20.16, 60.79, 78.11, 16.15, 32.64, 57.88, 79.78, 89.45, 21.43, 7.46, 15.41, 19.68, 5.04, 94.49, 81.36, 91.67, 60.42, 62.31, 43.85, 36.16, 31.81, 67.10, 32.29, 20.32, 67.07, 68.78, 79.61, 82.46, 81.14, 66.30, 74.57, 42.43, 38.55, 66.48, 11.00, 91.56, 13.53, 15.57, 32.92, 55.19, 65.52, 24.66, 53.55, 63.31, 16.95, 39.90, 48.23, 40.94, 45.27, 18.46, 83.33, 98.17, 58.14, 60.38, 13.38, 26.11, 99.34, 8.11, 27.15, 87.72, 71.41, 95.35, 85.89, 40.14, 36.50, 40.07, 73.23, 68.35, 11.44, 21.26, 3.42, 64.88, 7.58, 62.31, 19.49, 29.98, 88.76, 92.67, 33.70, 93.18, 31.64, 87.72, 9.61, 68.86, 1.23, 33.44, 28.32, 42.21, 2.98, 51.07, 64.79, 81.88, 27.01, 54.18, 22.13, 93.92, 32.24, 15.86, 82.80, 46.93, 28.66, 4.42, 38.16, 38.45, 50.10, 34.57, 71.30, 90.52, 61.61, 10.34, 54.43, 5.07, 74.61, 41.74, 16.03, 16.81, 85.88, 40.07, 62.27, 30.42, 35.83, 89.09, 51.15, 58.37, 49.92, 71.36, 66.56, 9.55, 75.93, 54.06, 1.28, 79.28, 17.80, 44.04, 47.61, 36.71, 25.85, 14.87, 48.41, 81.56, 82.84, 68.39, 68.00, 96.92, 50.42, 17.40, 96.55, 48.90, 67.62, 93.49, 60.48, 5.31, 55.31, 0.38, 11.73, 7.94, 22.22, 45.72, 49.58, 50.33, 60.42, 86.17, 38.93, 43.17, 93.18, 22.82, 73.07, 71.53, 92.16, 96.95, 76.88, 98.30, 7.69, 19.28, 90.90, 41.14, 7.92, 15.05, 33.62, 21.38, 93.58, 12.28, 59.13, 26.26, 14.48, 50.97, 81.73, 60.97, 0.74, 33.95, 9.78, 97.38, 70.55, 45.36, 58.44, 81.14, 39.60, 87.28, 87.82, 91.56, 25.32, 11.60, 82.52, 89.00, 50.59, 72.76, 64.44, 81.57, 14.86, 26.22, 53.19, 46.71, 46.46, 83.53, 23.63, 57.80, 20.24, 47.81, 65.13, 74.32, 62.42, 60.35, 59.35, 47.24, 85.79, 52.00, 44.34, 60.21, 69.87, 27.18, 69.10, 89.49, 29.91, 59.84, 38.09, 40.29, 22.26, 6.18, 49.89, 35.80, 34.73, 29.54, 26.10, 75.06, 96.37, 33.65, 56.73, 81.31, 31.15, 73.96, 25.48, 99.81, 20.67, 15.00, 24.18, 78.33, 5.03, 5.88, 27.09, 54.40, 58.54, 34.14, 94.98, 14.18, 60.95, 46.25, 72.81, 85.04, 43.42, 57.28, 78.05, 1.55, 42.48, 39.09, 63.32, 25.75, 44.54, 37.87};
 8000d84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000d88:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000d8c:	f6a3 73c4 	subw	r3, r3, #4036	; 0xfc4
 8000d90:	4aa7      	ldr	r2, [pc, #668]	; (8001030 <main+0x2ec>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	4611      	mov	r1, r2
 8000d96:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f001 fc20 	bl	80025e0 <memcpy>
  float array2[1000] = {47.68, 26.67, 64.09, 31.60, 25.83, 87.41, 67.60, 59.67, 43.07, 97.64, 71.48, 87.47, 20.74, 34.73, 19.57, 33.93, 15.06, 25.16, 36.89, 83.33, 3.50, 33.62, 40.05, 24.90, 35.29, 21.04, 39.92, 54.97, 34.18, 41.72, 67.35, 67.68, 98.41, 19.76, 52.58, 4.89, 79.51, 55.49, 84.28, 2.99, 12.81, 97.55, 24.99, 29.49, 23.48, 93.33, 81.25, 84.78, 93.46, 72.15, 13.79, 30.22, 70.75, 32.81, 67.36, 15.36, 25.08, 47.37, 47.70, 94.24, 30.44, 86.61, 7.47, 46.06, 73.97, 69.03, 75.98, 50.23, 58.21, 76.42, 15.18, 63.36, 82.14, 72.56, 60.64, 33.72, 4.37, 72.86, 55.78, 14.17, 9.64, 50.81, 2.67, 28.42, 35.68, 53.96, 75.15, 44.47, 57.25, 85.13, 80.87, 93.26, 77.22, 24.22, 81.69, 39.69, 79.69, 97.55, 90.13, 20.72, 61.22, 17.63, 40.56, 7.63, 45.31, 64.60, 32.89, 99.17, 68.49, 84.84, 54.03, 33.07, 68.14, 96.35, 38.63, 87.22, 27.35, 95.21, 91.27, 77.18, 12.24, 73.53, 3.88, 42.45, 1.16, 32.81, 67.44, 89.77, 17.87, 25.24, 30.13, 67.06, 4.87, 40.62, 31.72, 6.23, 18.95, 99.02, 30.57, 22.90, 44.83, 70.36, 99.26, 34.43, 97.37, 17.92, 60.66, 83.19, 25.38, 78.02, 7.13, 32.98, 78.94, 78.89, 50.85, 91.80, 22.50, 44.70, 39.35, 51.54, 83.55, 95.43, 93.26, 54.91, 29.67, 87.91, 32.33, 66.09, 93.72, 20.07, 11.40, 10.54, 20.59, 69.29, 84.31, 45.22, 52.47, 46.29, 56.82, 92.96, 18.83, 12.14, 92.64, 32.93, 72.31, 89.08, 23.84, 59.78, 33.81, 19.63, 2.08, 85.04, 56.26, 50.64, 97.82, 55.37, 54.47, 68.55, 82.26, 6.11, 33.91, 70.47, 40.01, 18.34, 96.85, 19.27, 89.14, 11.87, 51.20, 3.45, 15.64, 82.28, 78.51, 22.50, 53.62, 32.11, 15.21, 7.42, 52.73, 48.56, 5.90, 64.40, 48.35, 63.35, 53.98, 81.87, 50.55, 2.45, 66.14, 67.10, 34.36, 27.86, 61.01, 60.27, 72.12, 1.11, 54.17, 78.66, 86.55, 4.42, 67.81, 31.26, 12.51, 82.37, 25.53, 66.48, 33.39, 19.61, 68.14, 43.21, 69.44, 56.92, 98.21, 49.36, 3.99, 25.29, 31.48, 0.28, 53.98, 61.48, 73.44, 67.80, 61.94, 19.14, 71.26, 10.42, 58.31, 24.40, 11.55, 83.62, 29.02, 98.34, 75.56, 95.94, 18.00, 62.82, 62.61, 97.71, 67.34, 79.27, 76.87, 14.35, 56.43, 27.62, 4.06, 65.68, 53.32, 80.15, 31.53, 82.54, 22.94, 78.57,90.21, 33.69, 96.96, 66.15, 70.34, 71.97, 0.37, 51.87, 29.09, 31.10, 50.47, 10.93, 20.08, 83.79, 76.87, 25.83, 53.42, 69.67, 78.61, 75.15, 95.33, 36.52, 84.42, 15.53, 58.01, 95.63, 16.10, 37.41, 80.76, 93.80, 88.29, 63.42, 12.71, 60.12, 48.81, 86.49, 16.02, 1.79, 3.21, 51.96, 51.13, 37.01, 57.88, 52.02, 9.68, 56.47, 75.56, 19.59, 23.69, 48.95, 59.77, 32.46, 26.82, 16.74, 66.86, 53.63, 46.40, 20.60, 14.96, 56.83, 51.51, 65.68, 18.60, 81.05, 82.23, 87.48, 68.81, 72.10, 56.99, 96.86, 64.91, 73.01, 93.36, 27.56, 34.92, 91.31, 63.34, 1.16, 45.91, 75.16, 5.55, 36.70, 15.89, 1.11, 45.31, 53.97, 82.02, 57.28, 5.87, 99.81, 18.82, 51.64, 22.30, 0.07, 16.87, 24.14, 93.89, 48.96, 50.46, 64.51, 83.33, 76.72, 65.50, 98.85, 18.02, 59.99, 48.35, 27.93, 62.05, 84.35, 99.17, 67.20, 89.99, 14.77, 39.17, 3.15, 51.50, 18.67, 61.44, 69.89, 81.37, 81.29, 22.56, 21.50, 80.19, 41.63, 2.03, 55.73, 9.10, 58.43, 39.66, 54.79, 26.73, 30.26, 74.33, 36.27, 26.69, 94.18, 40.28, 48.46, 68.99, 64.21, 82.24, 39.28, 44.70, 63.63, 37.72, 7.32, 80.26, 22.02, 89.69, 49.62, 58.06, 8.89, 4.17, 38.12, 66.97, 59.28, 36.70, 54.29, 50.20, 6.05, 31.73, 74.03, 53.34, 26.90, 49.44, 29.27, 59.47, 2.80, 40.87, 58.82, 62.45, 83.46, 23.10, 94.51, 2.87, 94.97, 89.19, 81.83, 72.12, 24.83, 92.43, 63.39, 8.63, 9.23, 86.52, 64.28, 47.12, 64.75, 49.23, 19.48, 17.17, 6.60, 52.85, 27.81, 90.18, 65.70, 25.90, 39.21, 66.50, 32.69, 96.51, 25.61, 94.14, 14.52, 42.05, 84.97, 81.04, 76.92, 88.16, 31.25, 69.92, 1.45, 3.52, 33.20, 23.22, 38.33, 90.40, 44.67, 17.08, 78.66, 55.17, 62.20, 32.82, 37.08, 18.85, 88.06, 41.12, 37.62, 36.56, 87.84, 39.53, 66.11, 69.99, 3.37, 94.75, 93.88, 30.43, 41.83, 32.45, 24.85, 54.68, 55.31, 45.35, 27.89, 38.17, 79.37, 39.42, 53.45, 46.66, 41.76, 6.82, 63.52, 39.29, 17.86, 72.22, 26.14, 95.60, 61.03, 72.79, 99.45, 15.40, 86.39, 9.37, 13.01, 85.93, 25.23, 46.80, 94.93, 71.37, 66.11, 41.27, 43.85, 54.85, 22.36, 49.00, 82.21, 1.49, 14.20, 72.82, 44.99, 83.66, 2.15, 73.93, 99.53, 66.76, 25.92, 39.00, 83.00, 52.82, 83.50, 4.20, 25.36, 76.72, 98.56, 66.12, 98.53, 10.16, 67.71, 40.41, 83.90, 44.38, 17.14, 26.27, 55.17, 88.94, 8.97, 37.45, 38.82, 48.14, 61.66, 65.14, 42.12, 13.85, 56.29, 3.65, 4.28, 26.63, 71.45, 42.65, 47.98, 35.39, 78.03, 35.34, 18.79, 10.49, 58.41, 33.64, 10.02, 11.30, 21.49, 83.18, 3.83, 62.34, 98.00, 73.65, 89.30, 16.00, 30.22, 3.18, 34.56, 52.55, 73.97, 89.17, 0.80, 82.41, 82.23, 24.22, 95.51, 72.57, 88.05, 32.17, 20.18, 42.53, 61.90, 67.08, 48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73, 2.63, 31.29, 78.17, 38.70, 49.40, 92.02, 22.14, 44.02, 30.70, 43.67, 55.57, 20.56, 97.24, 49.39, 58.70, 1.41, 57.91, 38.84, 53.06, 9.98, 77.89, 9.35, 8.56, 75.73, 76.28, 20.59, 94.17, 32.44, 16.10, 26.58, 38.21, 17.99, 83.39, 7.99, 1.50, 2.79, 84.98, 44.90, 31.27, 89.46, 53.60, 59.02, 95.59, 71.88, 8.49, 57.56, 88.04, 0.00, 5.10, 62.35, 46.18, 27.15, 21.62, 72.80, 15.94, 20.62, 78.20, 86.16, 40.20, 15.71, 77.00, 30.56, 38.81, 20.16, 60.79, 78.11, 16.15, 32.64, 57.88, 79.78, 89.45, 21.43, 7.46, 15.41, 19.68, 5.04, 94.49, 81.36, 91.67, 60.42, 62.31, 43.85, 36.16, 31.81, 67.10, 32.29, 20.32, 67.07, 68.78, 79.61, 82.46, 81.14, 66.30, 74.57, 42.43, 38.55, 66.48, 11.00, 91.56, 13.53, 15.57, 32.92, 55.19, 65.52, 24.66, 53.55, 63.31, 16.95, 39.90, 48.23, 40.94, 45.27, 18.46, 83.33, 98.17, 58.14, 60.38, 13.38, 26.11, 99.34, 8.11, 27.15, 87.72, 71.41, 95.35, 85.89, 40.14, 36.50, 40.07, 73.23, 68.35, 11.44, 21.26, 3.42, 64.88, 7.58, 62.31, 19.49, 29.98, 88.76, 92.67, 33.70, 93.18, 31.64, 87.72, 9.61, 68.86, 1.23, 33.44, 28.32, 42.21, 2.98, 51.07, 64.79, 81.88, 27.01, 54.18, 22.13, 93.92, 32.24, 15.86, 82.80, 46.93, 28.66, 4.42, 38.16, 38.45, 50.10, 34.57, 71.30, 90.52, 61.61, 10.34, 54.43, 5.07, 74.61, 41.74, 16.03, 16.81, 85.88, 40.07, 62.27, 30.42, 35.83, 89.09, 51.15, 58.37, 49.92, 71.36, 66.56, 9.55, 75.93, 54.06, 1.28, 79.28, 17.80, 44.04, 47.61, 36.71, 25.85, 14.87, 48.41, 81.56, 82.84, 68.39, 68.00, 96.92, 50.42, 17.40, 96.55, 48.90, 67.62, 93.49, 60.48, 5.31, 55.31, 0.38, 11.73, 7.94, 22.22, 45.72, 49.58, 50.33, 60.42, 86.17, 38.93, 43.17, 93.18, 22.82, 73.07, 71.53, 92.16, 96.95, 76.88, 98.30, 7.69, 19.28, 90.90, 41.14, 7.92, 15.05, 33.62, 21.38, 93.58, 12.28, 59.13, 26.26, 14.48, 50.97, 81.73, 60.97, 0.74, 33.95, 9.78, 97.38, 70.55, 45.36, 58.44, 81.14, 39.60, 87.28, 87.82, 91.56, 25.32, 11.60, 82.52, 89.00, 50.59, 72.76, 64.44, 81.57, 14.86, 26.22, 53.19, 46.71, 46.46, 83.53, 23.63, 57.80, 20.24, 47.81, 65.13, 74.32, 62.42, 60.35, 59.35, 47.24, 85.79, 52.00, 44.34, 60.21, 69.87, 27.18, 69.10, 89.49, 29.91, 59.84, 38.09, 40.29, 22.26, 6.18, 49.89, 35.80, 34.73, 29.54, 26.10, 75.06, 96.37, 33.65, 56.73, 81.31, 31.15, 73.96, 25.48, 99.81, 20.67, 15.00, 24.18, 78.33, 5.03, 5.88, 27.09, 54.40, 58.54, 34.14, 94.98, 14.18, 60.95, 46.25, 72.81, 85.04, 43.42, 57.28, 78.05, 1.55, 42.48, 39.09, 63.32, 25.75, 44.54, 37.87};
 8000da0:	f507 5379 	add.w	r3, r7, #15936	; 0x3e40
 8000da4:	f103 0320 	add.w	r3, r3, #32
 8000da8:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 8000dac:	4aa0      	ldr	r2, [pc, #640]	; (8001030 <main+0x2ec>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	4611      	mov	r1, r2
 8000db2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000db6:	461a      	mov	r2, r3
 8000db8:	f001 fc12 	bl	80025e0 <memcpy>

  float arrayA[3]={1,2,3};
 8000dbc:	f507 5379 	add.w	r3, r7, #15936	; 0x3e40
 8000dc0:	f103 0320 	add.w	r3, r3, #32
 8000dc4:	f5a3 6377 	sub.w	r3, r3, #3952	; 0xf70
 8000dc8:	4a9a      	ldr	r2, [pc, #616]	; (8001034 <main+0x2f0>)
 8000dca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float arrayB[3]={1,2,3};
 8000dd0:	f507 5379 	add.w	r3, r7, #15936	; 0x3e40
 8000dd4:	f103 0320 	add.w	r3, r3, #32
 8000dd8:	f6a3 737c 	subw	r3, r3, #3964	; 0xf7c
 8000ddc:	4a95      	ldr	r2, [pc, #596]	; (8001034 <main+0x2f0>)
 8000dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  float c_mul[1000] = {};
 8000de4:	f507 5339 	add.w	r3, r7, #11840	; 0x2e40
 8000de8:	f103 0320 	add.w	r3, r3, #32
 8000dec:	f6a3 731c 	subw	r3, r3, #3868	; 0xf1c
 8000df0:	4618      	mov	r0, r3
 8000df2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000df6:	461a      	mov	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f001 fbff 	bl	80025fc <memset>
  float asm_mul[1000] = {};
 8000dfe:	f507 53f3 	add.w	r3, r7, #7776	; 0x1e60
 8000e02:	f6a3 63bc 	subw	r3, r3, #3772	; 0xebc
 8000e06:	4618      	mov	r0, r3
 8000e08:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2100      	movs	r1, #0
 8000e10:	f001 fbf4 	bl	80025fc <memset>
  float arm_mul[1000] = {};
 8000e14:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8000e18:	f6a3 635c 	subw	r3, r3, #3676	; 0xe5c
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000e22:	461a      	mov	r2, r3
 8000e24:	2100      	movs	r1, #0
 8000e26:	f001 fbe9 	bl	80025fc <memset>
 while (1)
 {
   /* USER CODE END WHILE */

   /* USER CODE BEGIN 3 */
	 ITM_Port32(31) = 1;
 8000e2a:	4b83      	ldr	r3, [pc, #524]	; (8001038 <main+0x2f4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
	 for (uint32_t i=0; i<1000; i++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e36:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e017      	b.n	8000e6e <main+0x12a>
		//cMax(&array, 10, &c_max, &c_maxIndex);
		cStdDev(&array1,1000, &c_std_dev);
 8000e3e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e42:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000e46:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8000e4a:	f103 031c 	add.w	r3, r3, #28
 8000e4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff04 	bl	8000c60 <cStdDev>
	 for (uint32_t i=0; i<1000; i++)
 8000e58:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000e5c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e68:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000e72:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e7c:	d3df      	bcc.n	8000e3e <main+0xfa>

	 ITM_Port32(31) = 2;
 8000e7e:	4b6e      	ldr	r3, [pc, #440]	; (8001038 <main+0x2f4>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	601a      	str	r2, [r3, #0]
	 for (uint32_t i=0; i<1000; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e8a:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e017      	b.n	8000ec2 <main+0x17e>
		// asmMax(&array, 10, &asm_max, &asm_maxIndex);
		asmStdDev(&array1,1000 , &asm_std_dev);
 8000e92:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000e96:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000e9a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8000e9e:	f103 031c 	add.w	r3, r3, #28
 8000ea2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe7b 	bl	8000ba2 <asmStdDev>
	 for (uint32_t i=0; i<1000; i++)
 8000eac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000eb0:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000ebc:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000ec6:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ed0:	d3df      	bcc.n	8000e92 <main+0x14e>

	 ITM_Port32(31) = 3;
 8000ed2:	4b59      	ldr	r3, [pc, #356]	; (8001038 <main+0x2f4>)
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	601a      	str	r2, [r3, #0]
	 for (uint32_t i=0; i<1000; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000ede:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e017      	b.n	8000f16 <main+0x1d2>
		 //arm_max_f32(&array, 10, &arm_max, &arm_maxIndex);
		arm_std_f32(&array1,1000 , &arm_std_dev);
 8000ee6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000eea:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000eee:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8000ef2:	f103 031c 	add.w	r3, r3, #28
 8000ef6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fa62 	bl	80023c4 <arm_std_f32>
	 for (uint32_t i=0; i<1000; i++)
 8000f00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000f04:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000f10:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000f1a:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f24:	d3df      	bcc.n	8000ee6 <main+0x1a2>

	 ITM_Port32(31) = 4;
 8000f26:	4b44      	ldr	r3, [pc, #272]	; (8001038 <main+0x2f4>)
 8000f28:	2204      	movs	r2, #4
 8000f2a:	601a      	str	r2, [r3, #0]
	 for (uint32_t i=0; i<1000; i++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000f32:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e018      	b.n	8000f6c <main+0x228>
	   cMul(&array1,&array2,1000 ,&c_mul);
 8000f3a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8000f3e:	3b1c      	subs	r3, #28
 8000f40:	f507 513c 	add.w	r1, r7, #12032	; 0x2f00
 8000f44:	3904      	subs	r1, #4
 8000f46:	f507 507a 	add.w	r0, r7, #16000	; 0x3e80
 8000f4a:	f100 001c 	add.w	r0, r0, #28
 8000f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f52:	f7ff fe59 	bl	8000c08 <cMul>
	 for (uint32_t i=0; i<1000; i++)
 8000f56:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000f5a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000f66:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000f70:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f7a:	d3de      	bcc.n	8000f3a <main+0x1f6>

	 ITM_Port32(31) = 5;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <main+0x2f4>)
 8000f7e:	2205      	movs	r2, #5
 8000f80:	601a      	str	r2, [r3, #0]
	 for (uint32_t i=0; i<1000; i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000f88:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e018      	b.n	8000fc2 <main+0x27e>
		asmMul(&array1,&array2,1000 ,&asm_mul);
 8000f90:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 8000f94:	3b3c      	subs	r3, #60	; 0x3c
 8000f96:	f507 513c 	add.w	r1, r7, #12032	; 0x2f00
 8000f9a:	3904      	subs	r1, #4
 8000f9c:	f507 507a 	add.w	r0, r7, #16000	; 0x3e80
 8000fa0:	f100 001c 	add.w	r0, r0, #28
 8000fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa8:	f7ff fde4 	bl	8000b74 <asmMul>
	 for (uint32_t i=0; i<1000; i++)
 8000fac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000fb0:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000fbc:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8000fc6:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fd0:	d3de      	bcc.n	8000f90 <main+0x24c>

	 ITM_Port32(31) = 6;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <main+0x2f4>)
 8000fd4:	2206      	movs	r2, #6
 8000fd6:	601a      	str	r2, [r3, #0]
	 for (uint32_t i=0; i<1000; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8000fde:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e018      	b.n	8001018 <main+0x2d4>
		arm_mult_f32(&array1,&array2,&arm_mul,1000);
 8000fe6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000fea:	3a5c      	subs	r2, #92	; 0x5c
 8000fec:	f507 513c 	add.w	r1, r7, #12032	; 0x2f00
 8000ff0:	3904      	subs	r1, #4
 8000ff2:	f507 507a 	add.w	r0, r7, #16000	; 0x3e80
 8000ff6:	f100 001c 	add.w	r0, r0, #28
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	f001 fa6b 	bl	80024d8 <arm_mult_f32>
	 for (uint32_t i=0; i<1000; i++)
 8001002:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001006:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8001012:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 800101c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001026:	d3de      	bcc.n	8000fe6 <main+0x2a2>

	 ITM_Port32(31) = 7;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <main+0x2f4>)
 800102a:	2207      	movs	r2, #7
 800102c:	601a      	str	r2, [r3, #0]
	 ITM_Port32(31) = 1;
 800102e:	e6fc      	b.n	8000e2a <main+0xe6>
 8001030:	08002824 	.word	0x08002824
 8001034:	080037c4 	.word	0x080037c4
 8001038:	e000007c 	.word	0xe000007c

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b096      	sub	sp, #88	; 0x58
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2244      	movs	r2, #68	; 0x44
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fad6 	bl	80025fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800105e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001062:	f000 fa6b 	bl	800153c <HAL_PWREx_ControlVoltageScaling>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800106c:	f000 f85c 	bl	8001128 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001070:	2310      	movs	r3, #16
 8001072:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800107c:	2360      	movs	r3, #96	; 0x60
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001084:	2301      	movs	r3, #1
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800108c:	2328      	movs	r3, #40	; 0x28
 800108e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 faef 	bl	8001684 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80010ac:	f000 f83c 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2303      	movs	r3, #3
 80010b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	2103      	movs	r1, #3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fef5 	bl	8001eb8 <HAL_RCC_ClockConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010d4:	f000 f828 	bl	8001128 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3758      	adds	r7, #88	; 0x58
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_GPIO_Init+0x44>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <MX_GPIO_Init+0x44>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_GPIO_Init+0x44>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_GPIO_Init+0x44>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <MX_GPIO_Init+0x44>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_GPIO_Init+0x44>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	e7fe      	b.n	8001130 <Error_Handler+0x8>
	...

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_MspInit+0x44>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_MspInit+0x44>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6613      	str	r3, [r2, #96]	; 0x60
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_MspInit+0x44>)
 8001148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_MspInit+0x44>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <HAL_MspInit+0x44>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	6593      	str	r3, [r2, #88]	; 0x58
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_MspInit+0x44>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f892 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f8:	f7ff ffea 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <LoopForever+0x6>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	; (8001234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <LoopForever+0xe>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	; (8001240 <LoopForever+0x16>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f001 f9b9 	bl	8002598 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001226:	f7ff fd8d 	bl	8000d44 <main>

0800122a <LoopForever>:

LoopForever:
    b LoopForever
 800122a:	e7fe      	b.n	800122a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800122c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001238:	08003818 	.word	0x08003818
  ldr r2, =_sbss
 800123c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001240:	20000090 	.word	0x20000090

08001244 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_IRQHandler>

08001246 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f91f 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f80e 	bl	8001278 <HAL_InitTick>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e001      	b.n	800126c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001268:	f7ff ff64 	bl	8001134 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800126c:	79fb      	ldrb	r3, [r7, #7]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_InitTick+0x6c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d023      	beq.n	80012d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_InitTick+0x70>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_InitTick+0x6c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f91d 	bl	80014e2 <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10f      	bne.n	80012ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d809      	bhi.n	80012c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f000 f8f5 	bl	80014aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_InitTick+0x74>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e007      	b.n	80012d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e004      	b.n	80012d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	73fb      	strb	r3, [r7, #15]
 80012d2:	e001      	b.n	80012d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	2000008c 	.word	0x2000008c

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2000008c 	.word	0x2000008c

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff47 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff5c 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffb0 	bl	8001450 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150c:	d102      	bne.n	8001514 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	e00b      	b.n	800152c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001522:	d102      	bne.n	800152a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	e000      	b.n	800152c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800152a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40007000 	.word	0x40007000

0800153c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d141      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800154a:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001556:	d131      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155e:	4a46      	ldr	r2, [pc, #280]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001568:	4b43      	ldr	r3, [pc, #268]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001570:	4a41      	ldr	r2, [pc, #260]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001578:	4b40      	ldr	r3, [pc, #256]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2232      	movs	r2, #50	; 0x32
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	4a3f      	ldr	r2, [pc, #252]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158e:	e002      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3b01      	subs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001596:	4b38      	ldr	r3, [pc, #224]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a2:	d102      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f2      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	d158      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e057      	b.n	800166c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015bc:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015c2:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015cc:	e04d      	b.n	800166a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d4:	d141      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e2:	d131      	bne.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001602:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2232      	movs	r2, #50	; 0x32
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161a:	e002      	b.n	8001622 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3b01      	subs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162e:	d102      	bne.n	8001636 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f2      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d112      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e011      	b.n	800166c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001658:	e007      	b.n	800166a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001668:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40007000 	.word	0x40007000
 800167c:	20000000 	.word	0x20000000
 8001680:	431bde83 	.word	0x431bde83

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f000 bc08 	b.w	8001ea8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001698:	4b96      	ldr	r3, [pc, #600]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a2:	4b94      	ldr	r3, [pc, #592]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80e4 	beq.w	8001882 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4c>
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2b0c      	cmp	r3, #12
 80016c4:	f040 808b 	bne.w	80017de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	f040 8087 	bne.w	80017de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d0:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x64>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e3df      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_RCC_OscConfig+0x7e>
 80016f8:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001700:	e005      	b.n	800170e <HAL_RCC_OscConfig+0x8a>
 8001702:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170e:	4293      	cmp	r3, r2
 8001710:	d223      	bcs.n	800175a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fd94 	bl	8002244 <RCC_SetFlashLatencyFromMSIRange>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e3c0      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a72      	ldr	r2, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	496d      	ldr	r1, [pc, #436]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001744:	4b6b      	ldr	r3, [pc, #428]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	4968      	ldr	r1, [pc, #416]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
 8001758:	e025      	b.n	80017a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800175a:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a65      	ldr	r2, [pc, #404]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4960      	ldr	r1, [pc, #384]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001778:	4b5e      	ldr	r3, [pc, #376]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	495b      	ldr	r1, [pc, #364]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fd54 	bl	8002244 <RCC_SetFlashLatencyFromMSIRange>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e380      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a6:	f000 fcc1 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	4950      	ldr	r1, [pc, #320]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80017c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c6:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fd54 	bl	8001278 <HAL_InitTick>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d052      	beq.n	8001880 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	e364      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d032      	beq.n	800184c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e6:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fd91 	bl	8001318 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017fa:	f7ff fd8d 	bl	8001318 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e34d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a35      	ldr	r2, [pc, #212]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4930      	ldr	r1, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	492b      	ldr	r1, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
 800184a:	e01a      	b.n	8001882 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001858:	f7ff fd5e 	bl	8001318 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001860:	f7ff fd5a 	bl	8001318 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e31a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x1dc>
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001880:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d073      	beq.n	8001976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_OscConfig+0x21c>
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d10e      	bne.n	80018b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d10b      	bne.n	80018b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d063      	beq.n	8001974 <HAL_RCC_OscConfig+0x2f0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d15f      	bne.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e2f7      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c0:	d106      	bne.n	80018d0 <HAL_RCC_OscConfig+0x24c>
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e025      	b.n	800191c <HAL_RCC_OscConfig+0x298>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d8:	d114      	bne.n	8001904 <HAL_RCC_OscConfig+0x280>
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a02      	ldr	r2, [pc, #8]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e013      	b.n	800191c <HAL_RCC_OscConfig+0x298>
 80018f4:	40021000 	.word	0x40021000
 80018f8:	080037d0 	.word	0x080037d0
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004
 8001904:	4ba0      	ldr	r3, [pc, #640]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a9f      	ldr	r2, [pc, #636]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b9d      	ldr	r3, [pc, #628]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a9c      	ldr	r2, [pc, #624]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fcf8 	bl	8001318 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fcf4 	bl	8001318 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e2b4      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193e:	4b92      	ldr	r3, [pc, #584]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x2a8>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff fce4 	bl	8001318 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fce0 	bl	8001318 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e2a0      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001966:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x2d0>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d060      	beq.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d005      	beq.n	8001994 <HAL_RCC_OscConfig+0x310>
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d116      	bne.n	80019c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001994:	4b7c      	ldr	r3, [pc, #496]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_OscConfig+0x328>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e27d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	4973      	ldr	r1, [pc, #460]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c0:	e040      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d023      	beq.n	8001a12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ca:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6e      	ldr	r2, [pc, #440]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff fc9f 	bl	8001318 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff fc9b 	bl	8001318 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e25b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f0:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b62      	ldr	r3, [pc, #392]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	495f      	ldr	r1, [pc, #380]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	e018      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5c      	ldr	r2, [pc, #368]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fc7b 	bl	8001318 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff fc77 	bl	8001318 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e237      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03c      	beq.n	8001aca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff fc56 	bl	8001318 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff fc52 	bl	8001318 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e212      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ef      	beq.n	8001a70 <HAL_RCC_OscConfig+0x3ec>
 8001a90:	e01b      	b.n	8001aca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a98:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fc39 	bl	8001318 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fc35 	bl	8001318 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1f5      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ef      	bne.n	8001aaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80a6 	beq.w	8001c24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10d      	bne.n	8001b04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	; 0x58
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x508>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d118      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_RCC_OscConfig+0x508>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_RCC_OscConfig+0x508>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fbfc 	bl	8001318 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b24:	f7ff fbf8 	bl	8001318 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1b8      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_RCC_OscConfig+0x508>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4d8>
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5a:	e029      	b.n	8001bb0 <HAL_RCC_OscConfig+0x52c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d115      	bne.n	8001b90 <HAL_RCC_OscConfig+0x50c>
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b84:	e014      	b.n	8001bb0 <HAL_RCC_OscConfig+0x52c>
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	4b9d      	ldr	r3, [pc, #628]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b96:	4a9c      	ldr	r2, [pc, #624]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba0:	4b99      	ldr	r3, [pc, #612]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	4a98      	ldr	r2, [pc, #608]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d016      	beq.n	8001be6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fbae 	bl	8001318 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fbaa 	bl	8001318 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e168      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ed      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x53c>
 8001be4:	e015      	b.n	8001c12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff fb97 	bl	8001318 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fb93 	bl	8001318 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e151      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ed      	bne.n	8001bee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c12:	7ffb      	ldrb	r3, [r7, #31]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d105      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d03c      	beq.n	8001caa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c38:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c3e:	4a72      	ldr	r2, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff fb66 	bl	8001318 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c50:	f7ff fb62 	bl	8001318 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e122      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c62:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ef      	beq.n	8001c50 <HAL_RCC_OscConfig+0x5cc>
 8001c70:	e01b      	b.n	8001caa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c78:	4a63      	ldr	r2, [pc, #396]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb49 	bl	8001318 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8a:	f7ff fb45 	bl	8001318 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e105      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ef      	bne.n	8001c8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80f9 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	f040 80cf 	bne.w	8001e5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cbe:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0203 	and.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d12c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d123      	bne.n	8001d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d11b      	bne.n	8001d2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d113      	bne.n	8001d2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d109      	bne.n	8001d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	3b01      	subs	r3, #1
 8001d26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d071      	beq.n	8001e10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d068      	beq.n	8001e04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d3e:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0ac      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a2d      	ldr	r2, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d5a:	f7ff fadd 	bl	8001318 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff fad9 	bl	8001318 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e099      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_RCC_OscConfig+0x788>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d90:	3a01      	subs	r2, #1
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d9a:	0212      	lsls	r2, r2, #8
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001da2:	0852      	lsrs	r2, r2, #1
 8001da4:	3a01      	subs	r2, #1
 8001da6:	0552      	lsls	r2, r2, #21
 8001da8:	4311      	orrs	r1, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dae:	0852      	lsrs	r2, r2, #1
 8001db0:	3a01      	subs	r2, #1
 8001db2:	0652      	lsls	r2, r2, #25
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dba:	06d2      	lsls	r2, r2, #27
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	4912      	ldr	r1, [pc, #72]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ddc:	f7ff fa9c 	bl	8001318 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff fa98 	bl	8001318 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e058      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e02:	e050      	b.n	8001ea6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e04f      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d144      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e34:	f7ff fa70 	bl	8001318 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff fa6c 	bl	8001318 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e02c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x7b8>
 8001e5a:	e024      	b.n	8001ea6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d01f      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fa53 	bl	8001318 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff fa4f 	bl	8001318 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e00f      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4905      	ldr	r1, [pc, #20]	; (8001eb0 <HAL_RCC_OscConfig+0x82c>)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_OscConfig+0x830>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e001      	b.n	8001ea6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	feeefffc 	.word	0xfeeefffc

08001eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e11d      	b.n	800210c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b90      	ldr	r3, [pc, #576]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d910      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 020f 	bic.w	r2, r3, #15
 8001ee6:	498b      	ldr	r1, [pc, #556]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e105      	b.n	800210c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d010      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	4b81      	ldr	r3, [pc, #516]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d908      	bls.n	8001f2e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	497b      	ldr	r1, [pc, #492]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d079      	beq.n	800202e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d11e      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	4b75      	ldr	r3, [pc, #468]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0dc      	b.n	800210c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f52:	f000 f9d1 	bl	80022f8 <RCC_GetSysClockFreqFromPLLSource>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a70      	ldr	r2, [pc, #448]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d946      	bls.n	8001fec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d140      	bne.n	8001fec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f6a:	4b6b      	ldr	r3, [pc, #428]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f72:	4a69      	ldr	r2, [pc, #420]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e035      	b.n	8001fec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0b9      	b.n	800210c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0ad      	b.n	800210c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb0:	4b59      	ldr	r3, [pc, #356]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0a5      	b.n	800210c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001fc0:	f000 f8b4 	bl	800212c <HAL_RCC_GetSysClockFreq>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a55      	ldr	r2, [pc, #340]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d90f      	bls.n	8001fec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fd8:	4b4f      	ldr	r3, [pc, #316]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fe0:	4a4d      	ldr	r2, [pc, #308]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fec:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 0203 	bic.w	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4947      	ldr	r1, [pc, #284]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffe:	f7ff f98b 	bl	8001318 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002004:	e00a      	b.n	800201c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7ff f987 	bl	8001318 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e077      	b.n	800210c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 020c 	and.w	r2, r3, #12
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	429a      	cmp	r2, r3
 800202c:	d1eb      	bne.n	8002006 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d105      	bne.n	8002040 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a37      	ldr	r2, [pc, #220]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 800203a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d010      	beq.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002058:	429a      	cmp	r2, r3
 800205a:	d208      	bcs.n	800206e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	492b      	ldr	r1, [pc, #172]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d210      	bcs.n	800209e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 020f 	bic.w	r2, r3, #15
 8002084:	4923      	ldr	r1, [pc, #140]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e036      	b.n	800210c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4918      	ldr	r1, [pc, #96]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4910      	ldr	r1, [pc, #64]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020dc:	f000 f826 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <HAL_RCC_ClockConfig+0x268>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_RCC_ClockConfig+0x26c>)
 80020fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f8b9 	bl	8001278 <HAL_InitTick>
 8002106:	4603      	mov	r3, r0
 8002108:	73fb      	strb	r3, [r7, #15]

  return status;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40022000 	.word	0x40022000
 8002118:	40021000 	.word	0x40021000
 800211c:	04c4b400 	.word	0x04c4b400
 8002120:	080037d0 	.word	0x080037d0
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x34>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d121      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d11e      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e005      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002188:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <HAL_RCC_GetSysClockFreq+0x10c>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_RCC_GetSysClockFreq+0x110>)
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e004      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_RCC_GetSysClockFreq+0x114>)
 80021b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d134      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d003      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0xac>
 80021d0:	e005      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCC_GetSysClockFreq+0x110>)
 80021d4:	617b      	str	r3, [r7, #20]
      break;
 80021d6:	e005      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_GetSysClockFreq+0x114>)
 80021da:	617b      	str	r3, [r7, #20]
      break;
 80021dc:	e002      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	617b      	str	r3, [r7, #20]
      break;
 80021e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3301      	adds	r3, #1
 80021f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	fb03 f202 	mul.w	r2, r3, r2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	0e5b      	lsrs	r3, r3, #25
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	3301      	adds	r3, #1
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002224:	69bb      	ldr	r3, [r7, #24]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	080037e0 	.word	0x080037e0
 800223c:	00f42400 	.word	0x00f42400
 8002240:	007a1200 	.word	0x007a1200

08002244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800225c:	f7ff f94e 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002260:	6178      	str	r0, [r7, #20]
 8002262:	e014      	b.n	800228e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6593      	str	r3, [r2, #88]	; 0x58
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800227c:	f7ff f93e 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002280:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002294:	d10b      	bne.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d913      	bls.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2ba0      	cmp	r3, #160	; 0xa0
 80022a0:	d902      	bls.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a2:	2302      	movs	r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e00d      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a8:	2301      	movs	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e00a      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b7f      	cmp	r3, #127	; 0x7f
 80022b2:	d902      	bls.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80022b4:	2302      	movs	r3, #2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	e004      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b70      	cmp	r3, #112	; 0x70
 80022be:	d101      	bne.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 020f 	bic.w	r2, r3, #15
 80022cc:	4909      	ldr	r1, [pc, #36]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40022000 	.word	0x40022000

080022f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d00b      	beq.n	8002326 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d825      	bhi.n	8002360 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d008      	beq.n	800232c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d11f      	bne.n	8002360 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002322:	613b      	str	r3, [r7, #16]
    break;
 8002324:	e01f      	b.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002328:	613b      	str	r3, [r7, #16]
    break;
 800232a:	e01c      	b.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002338:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e005      	b.n	8002354 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002354:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	613b      	str	r3, [r7, #16]
    break;
 800235e:	e002      	b.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
    break;
 8002364:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	3301      	adds	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	fb03 f202 	mul.w	r2, r3, r2
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0e5b      	lsrs	r3, r3, #25
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023a6:	683b      	ldr	r3, [r7, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40021000 	.word	0x40021000
 80023b8:	00f42400 	.word	0x00f42400
 80023bc:	007a1200 	.word	0x007a1200
 80023c0:	080037e0 	.word	0x080037e0

080023c4 <arm_std_f32>:
 80023c4:	2901      	cmp	r1, #1
 80023c6:	d97d      	bls.n	80024c4 <arm_std_f32+0x100>
 80023c8:	b530      	push	{r4, r5, lr}
 80023ca:	ed2d 8b02 	vpush	{d8}
 80023ce:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80024d4 <arm_std_f32+0x110>
 80023d2:	088d      	lsrs	r5, r1, #2
 80023d4:	b083      	sub	sp, #12
 80023d6:	eef0 4a47 	vmov.f32	s9, s14
 80023da:	d028      	beq.n	800242e <arm_std_f32+0x6a>
 80023dc:	f100 0310 	add.w	r3, r0, #16
 80023e0:	462c      	mov	r4, r5
 80023e2:	ed53 7a04 	vldr	s15, [r3, #-16]
 80023e6:	ed13 5a03 	vldr	s10, [r3, #-12]
 80023ea:	ed53 5a02 	vldr	s11, [r3, #-8]
 80023ee:	ed13 6a01 	vldr	s12, [r3, #-4]
 80023f2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80023f6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80023fa:	ee36 7a87 	vadd.f32	s14, s13, s14
 80023fe:	ee65 6a05 	vmul.f32	s13, s10, s10
 8002402:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002406:	ee76 6a87 	vadd.f32	s13, s13, s14
 800240a:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800240e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002412:	ee77 6a26 	vadd.f32	s13, s14, s13
 8002416:	ee26 7a06 	vmul.f32	s14, s12, s12
 800241a:	3c01      	subs	r4, #1
 800241c:	ee77 4a86 	vadd.f32	s9, s15, s12
 8002420:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002424:	f103 0310 	add.w	r3, r3, #16
 8002428:	d1db      	bne.n	80023e2 <arm_std_f32+0x1e>
 800242a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800242e:	f011 0303 	ands.w	r3, r1, #3
 8002432:	d01b      	beq.n	800246c <arm_std_f32+0xa8>
 8002434:	edd0 7a00 	vldr	s15, [r0]
 8002438:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800243c:	3b01      	subs	r3, #1
 800243e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002442:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002446:	d011      	beq.n	800246c <arm_std_f32+0xa8>
 8002448:	edd0 7a01 	vldr	s15, [r0, #4]
 800244c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002450:	2b01      	cmp	r3, #1
 8002452:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002456:	ee37 7a26 	vadd.f32	s14, s14, s13
 800245a:	d007      	beq.n	800246c <arm_std_f32+0xa8>
 800245c:	edd0 7a02 	vldr	s15, [r0, #8]
 8002460:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002464:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002468:	ee37 7a26 	vadd.f32	s14, s14, s13
 800246c:	ee07 1a90 	vmov	s15, r1
 8002470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002474:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002478:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800247c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8002480:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8002484:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8002488:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800248c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002490:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002494:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	db0c      	blt.n	80024b8 <arm_std_f32+0xf4>
 800249e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80024a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80024aa:	d40e      	bmi.n	80024ca <arm_std_f32+0x106>
 80024ac:	ed82 8a00 	vstr	s16, [r2]
 80024b0:	b003      	add	sp, #12
 80024b2:	ecbd 8b02 	vpop	{d8}
 80024b6:	bd30      	pop	{r4, r5, pc}
 80024b8:	2300      	movs	r3, #0
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	b003      	add	sp, #12
 80024be:	ecbd 8b02 	vpop	{d8}
 80024c2:	bd30      	pop	{r4, r5, pc}
 80024c4:	2300      	movs	r3, #0
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4770      	bx	lr
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	f000 f8ca 	bl	8002664 <sqrtf>
 80024d0:	9a01      	ldr	r2, [sp, #4]
 80024d2:	e7eb      	b.n	80024ac <arm_std_f32+0xe8>
 80024d4:	00000000 	.word	0x00000000

080024d8 <arm_mult_f32>:
 80024d8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80024dc:	b4f0      	push	{r4, r5, r6, r7}
 80024de:	d033      	beq.n	8002548 <arm_mult_f32+0x70>
 80024e0:	f100 0610 	add.w	r6, r0, #16
 80024e4:	f101 0510 	add.w	r5, r1, #16
 80024e8:	f102 0410 	add.w	r4, r2, #16
 80024ec:	4667      	mov	r7, ip
 80024ee:	ed15 7a04 	vldr	s14, [r5, #-16]
 80024f2:	ed56 7a04 	vldr	s15, [r6, #-16]
 80024f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fa:	3f01      	subs	r7, #1
 80024fc:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002500:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002504:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250c:	f106 0610 	add.w	r6, r6, #16
 8002510:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002514:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002518:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800251c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002520:	f105 0510 	add.w	r5, r5, #16
 8002524:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002528:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800252c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002534:	f104 0410 	add.w	r4, r4, #16
 8002538:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800253c:	d1d7      	bne.n	80024ee <arm_mult_f32+0x16>
 800253e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8002542:	4420      	add	r0, r4
 8002544:	4421      	add	r1, r4
 8002546:	4422      	add	r2, r4
 8002548:	f013 0303 	ands.w	r3, r3, #3
 800254c:	d01b      	beq.n	8002586 <arm_mult_f32+0xae>
 800254e:	edd1 7a00 	vldr	s15, [r1]
 8002552:	ed90 7a00 	vldr	s14, [r0]
 8002556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255a:	3b01      	subs	r3, #1
 800255c:	edc2 7a00 	vstr	s15, [r2]
 8002560:	d011      	beq.n	8002586 <arm_mult_f32+0xae>
 8002562:	edd0 7a01 	vldr	s15, [r0, #4]
 8002566:	ed91 7a01 	vldr	s14, [r1, #4]
 800256a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256e:	2b01      	cmp	r3, #1
 8002570:	edc2 7a01 	vstr	s15, [r2, #4]
 8002574:	d007      	beq.n	8002586 <arm_mult_f32+0xae>
 8002576:	edd0 7a02 	vldr	s15, [r0, #8]
 800257a:	ed91 7a02 	vldr	s14, [r1, #8]
 800257e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002582:	edc2 7a02 	vstr	s15, [r2, #8]
 8002586:	bcf0      	pop	{r4, r5, r6, r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <__errno>:
 800258c:	4b01      	ldr	r3, [pc, #4]	; (8002594 <__errno+0x8>)
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000000c 	.word	0x2000000c

08002598 <__libc_init_array>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	4d0d      	ldr	r5, [pc, #52]	; (80025d0 <__libc_init_array+0x38>)
 800259c:	4c0d      	ldr	r4, [pc, #52]	; (80025d4 <__libc_init_array+0x3c>)
 800259e:	1b64      	subs	r4, r4, r5
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	2600      	movs	r6, #0
 80025a4:	42a6      	cmp	r6, r4
 80025a6:	d109      	bne.n	80025bc <__libc_init_array+0x24>
 80025a8:	4d0b      	ldr	r5, [pc, #44]	; (80025d8 <__libc_init_array+0x40>)
 80025aa:	4c0c      	ldr	r4, [pc, #48]	; (80025dc <__libc_init_array+0x44>)
 80025ac:	f000 f92e 	bl	800280c <_init>
 80025b0:	1b64      	subs	r4, r4, r5
 80025b2:	10a4      	asrs	r4, r4, #2
 80025b4:	2600      	movs	r6, #0
 80025b6:	42a6      	cmp	r6, r4
 80025b8:	d105      	bne.n	80025c6 <__libc_init_array+0x2e>
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c0:	4798      	blx	r3
 80025c2:	3601      	adds	r6, #1
 80025c4:	e7ee      	b.n	80025a4 <__libc_init_array+0xc>
 80025c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ca:	4798      	blx	r3
 80025cc:	3601      	adds	r6, #1
 80025ce:	e7f2      	b.n	80025b6 <__libc_init_array+0x1e>
 80025d0:	08003810 	.word	0x08003810
 80025d4:	08003810 	.word	0x08003810
 80025d8:	08003810 	.word	0x08003810
 80025dc:	08003814 	.word	0x08003814

080025e0 <memcpy>:
 80025e0:	440a      	add	r2, r1
 80025e2:	4291      	cmp	r1, r2
 80025e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80025e8:	d100      	bne.n	80025ec <memcpy+0xc>
 80025ea:	4770      	bx	lr
 80025ec:	b510      	push	{r4, lr}
 80025ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025f6:	4291      	cmp	r1, r2
 80025f8:	d1f9      	bne.n	80025ee <memcpy+0xe>
 80025fa:	bd10      	pop	{r4, pc}

080025fc <memset>:
 80025fc:	4402      	add	r2, r0
 80025fe:	4603      	mov	r3, r0
 8002600:	4293      	cmp	r3, r2
 8002602:	d100      	bne.n	8002606 <memset+0xa>
 8002604:	4770      	bx	lr
 8002606:	f803 1b01 	strb.w	r1, [r3], #1
 800260a:	e7f9      	b.n	8002600 <memset+0x4>

0800260c <sqrt>:
 800260c:	b538      	push	{r3, r4, r5, lr}
 800260e:	ed2d 8b02 	vpush	{d8}
 8002612:	ec55 4b10 	vmov	r4, r5, d0
 8002616:	f000 f843 	bl	80026a0 <__ieee754_sqrt>
 800261a:	4622      	mov	r2, r4
 800261c:	462b      	mov	r3, r5
 800261e:	4620      	mov	r0, r4
 8002620:	4629      	mov	r1, r5
 8002622:	eeb0 8a40 	vmov.f32	s16, s0
 8002626:	eef0 8a60 	vmov.f32	s17, s1
 800262a:	f7fe fa3d 	bl	8000aa8 <__aeabi_dcmpun>
 800262e:	b990      	cbnz	r0, 8002656 <sqrt+0x4a>
 8002630:	2200      	movs	r2, #0
 8002632:	2300      	movs	r3, #0
 8002634:	4620      	mov	r0, r4
 8002636:	4629      	mov	r1, r5
 8002638:	f7fe fa0e 	bl	8000a58 <__aeabi_dcmplt>
 800263c:	b158      	cbz	r0, 8002656 <sqrt+0x4a>
 800263e:	f7ff ffa5 	bl	800258c <__errno>
 8002642:	2321      	movs	r3, #33	; 0x21
 8002644:	6003      	str	r3, [r0, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	2300      	movs	r3, #0
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f7fe f8bb 	bl	80007c8 <__aeabi_ddiv>
 8002652:	ec41 0b18 	vmov	d8, r0, r1
 8002656:	eeb0 0a48 	vmov.f32	s0, s16
 800265a:	eef0 0a68 	vmov.f32	s1, s17
 800265e:	ecbd 8b02 	vpop	{d8}
 8002662:	bd38      	pop	{r3, r4, r5, pc}

08002664 <sqrtf>:
 8002664:	b508      	push	{r3, lr}
 8002666:	ed2d 8b02 	vpush	{d8}
 800266a:	eeb0 8a40 	vmov.f32	s16, s0
 800266e:	f000 f8c9 	bl	8002804 <__ieee754_sqrtf>
 8002672:	eeb4 8a48 	vcmp.f32	s16, s16
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	d60c      	bvs.n	8002696 <sqrtf+0x32>
 800267c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800269c <sqrtf+0x38>
 8002680:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	d505      	bpl.n	8002696 <sqrtf+0x32>
 800268a:	f7ff ff7f 	bl	800258c <__errno>
 800268e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8002692:	2321      	movs	r3, #33	; 0x21
 8002694:	6003      	str	r3, [r0, #0]
 8002696:	ecbd 8b02 	vpop	{d8}
 800269a:	bd08      	pop	{r3, pc}
 800269c:	00000000 	.word	0x00000000

080026a0 <__ieee754_sqrt>:
 80026a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a4:	ec55 4b10 	vmov	r4, r5, d0
 80026a8:	4e55      	ldr	r6, [pc, #340]	; (8002800 <__ieee754_sqrt+0x160>)
 80026aa:	43ae      	bics	r6, r5
 80026ac:	ee10 0a10 	vmov	r0, s0
 80026b0:	ee10 3a10 	vmov	r3, s0
 80026b4:	462a      	mov	r2, r5
 80026b6:	4629      	mov	r1, r5
 80026b8:	d110      	bne.n	80026dc <__ieee754_sqrt+0x3c>
 80026ba:	ee10 2a10 	vmov	r2, s0
 80026be:	462b      	mov	r3, r5
 80026c0:	f7fd ff58 	bl	8000574 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4620      	mov	r0, r4
 80026ca:	4629      	mov	r1, r5
 80026cc:	f7fd fd9c 	bl	8000208 <__adddf3>
 80026d0:	4604      	mov	r4, r0
 80026d2:	460d      	mov	r5, r1
 80026d4:	ec45 4b10 	vmov	d0, r4, r5
 80026d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026dc:	2d00      	cmp	r5, #0
 80026de:	dc10      	bgt.n	8002702 <__ieee754_sqrt+0x62>
 80026e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80026e4:	4330      	orrs	r0, r6
 80026e6:	d0f5      	beq.n	80026d4 <__ieee754_sqrt+0x34>
 80026e8:	b15d      	cbz	r5, 8002702 <__ieee754_sqrt+0x62>
 80026ea:	ee10 2a10 	vmov	r2, s0
 80026ee:	462b      	mov	r3, r5
 80026f0:	ee10 0a10 	vmov	r0, s0
 80026f4:	f7fd fd86 	bl	8000204 <__aeabi_dsub>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	f7fe f864 	bl	80007c8 <__aeabi_ddiv>
 8002700:	e7e6      	b.n	80026d0 <__ieee754_sqrt+0x30>
 8002702:	1512      	asrs	r2, r2, #20
 8002704:	d074      	beq.n	80027f0 <__ieee754_sqrt+0x150>
 8002706:	07d4      	lsls	r4, r2, #31
 8002708:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800270c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8002710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002714:	bf5e      	ittt	pl
 8002716:	0fda      	lsrpl	r2, r3, #31
 8002718:	005b      	lslpl	r3, r3, #1
 800271a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800271e:	2400      	movs	r4, #0
 8002720:	0fda      	lsrs	r2, r3, #31
 8002722:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002726:	107f      	asrs	r7, r7, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2516      	movs	r5, #22
 800272c:	4620      	mov	r0, r4
 800272e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002732:	1886      	adds	r6, r0, r2
 8002734:	428e      	cmp	r6, r1
 8002736:	bfde      	ittt	le
 8002738:	1b89      	suble	r1, r1, r6
 800273a:	18b0      	addle	r0, r6, r2
 800273c:	18a4      	addle	r4, r4, r2
 800273e:	0049      	lsls	r1, r1, #1
 8002740:	3d01      	subs	r5, #1
 8002742:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8002746:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800274a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800274e:	d1f0      	bne.n	8002732 <__ieee754_sqrt+0x92>
 8002750:	462a      	mov	r2, r5
 8002752:	f04f 0e20 	mov.w	lr, #32
 8002756:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800275a:	4281      	cmp	r1, r0
 800275c:	eb06 0c05 	add.w	ip, r6, r5
 8002760:	dc02      	bgt.n	8002768 <__ieee754_sqrt+0xc8>
 8002762:	d113      	bne.n	800278c <__ieee754_sqrt+0xec>
 8002764:	459c      	cmp	ip, r3
 8002766:	d811      	bhi.n	800278c <__ieee754_sqrt+0xec>
 8002768:	f1bc 0f00 	cmp.w	ip, #0
 800276c:	eb0c 0506 	add.w	r5, ip, r6
 8002770:	da43      	bge.n	80027fa <__ieee754_sqrt+0x15a>
 8002772:	2d00      	cmp	r5, #0
 8002774:	db41      	blt.n	80027fa <__ieee754_sqrt+0x15a>
 8002776:	f100 0801 	add.w	r8, r0, #1
 800277a:	1a09      	subs	r1, r1, r0
 800277c:	459c      	cmp	ip, r3
 800277e:	bf88      	it	hi
 8002780:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8002784:	eba3 030c 	sub.w	r3, r3, ip
 8002788:	4432      	add	r2, r6
 800278a:	4640      	mov	r0, r8
 800278c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8002790:	f1be 0e01 	subs.w	lr, lr, #1
 8002794:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8002798:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800279c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80027a0:	d1db      	bne.n	800275a <__ieee754_sqrt+0xba>
 80027a2:	430b      	orrs	r3, r1
 80027a4:	d006      	beq.n	80027b4 <__ieee754_sqrt+0x114>
 80027a6:	1c50      	adds	r0, r2, #1
 80027a8:	bf13      	iteet	ne
 80027aa:	3201      	addne	r2, #1
 80027ac:	3401      	addeq	r4, #1
 80027ae:	4672      	moveq	r2, lr
 80027b0:	f022 0201 	bicne.w	r2, r2, #1
 80027b4:	1063      	asrs	r3, r4, #1
 80027b6:	0852      	lsrs	r2, r2, #1
 80027b8:	07e1      	lsls	r1, r4, #31
 80027ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80027be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80027c2:	bf48      	it	mi
 80027c4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80027c8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80027cc:	4614      	mov	r4, r2
 80027ce:	e781      	b.n	80026d4 <__ieee754_sqrt+0x34>
 80027d0:	0ad9      	lsrs	r1, r3, #11
 80027d2:	3815      	subs	r0, #21
 80027d4:	055b      	lsls	r3, r3, #21
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d0fa      	beq.n	80027d0 <__ieee754_sqrt+0x130>
 80027da:	02cd      	lsls	r5, r1, #11
 80027dc:	d50a      	bpl.n	80027f4 <__ieee754_sqrt+0x154>
 80027de:	f1c2 0420 	rsb	r4, r2, #32
 80027e2:	fa23 f404 	lsr.w	r4, r3, r4
 80027e6:	1e55      	subs	r5, r2, #1
 80027e8:	4093      	lsls	r3, r2
 80027ea:	4321      	orrs	r1, r4
 80027ec:	1b42      	subs	r2, r0, r5
 80027ee:	e78a      	b.n	8002706 <__ieee754_sqrt+0x66>
 80027f0:	4610      	mov	r0, r2
 80027f2:	e7f0      	b.n	80027d6 <__ieee754_sqrt+0x136>
 80027f4:	0049      	lsls	r1, r1, #1
 80027f6:	3201      	adds	r2, #1
 80027f8:	e7ef      	b.n	80027da <__ieee754_sqrt+0x13a>
 80027fa:	4680      	mov	r8, r0
 80027fc:	e7bd      	b.n	800277a <__ieee754_sqrt+0xda>
 80027fe:	bf00      	nop
 8002800:	7ff00000 	.word	0x7ff00000

08002804 <__ieee754_sqrtf>:
 8002804:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002808:	4770      	bx	lr
	...

0800280c <_init>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr

08002818 <_fini>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr
