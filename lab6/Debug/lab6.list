
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006240  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c44  08006c44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c44  08006c44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000120ac  2000000c  08006c58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200120b8  08006c58  000220b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156c5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b14  00000000  00000000  00035701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00038218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000392e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6f3  00000000  00000000  0003a268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012acd  00000000  00000000  0006595b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d033  00000000  00000000  00078428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0018545b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004670  00000000  00000000  00185520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00189b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080063e8 	.word	0x080063e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080063e8 	.word	0x080063e8

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2uiz>:
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	d211      	bcs.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d4:	d211      	bcs.n	80007fa <__aeabi_d2uiz+0x2e>
 80007d6:	d50d      	bpl.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e0:	d40e      	bmi.n	8000800 <__aeabi_d2uiz+0x34>
 80007e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ee:	fa23 f002 	lsr.w	r0, r3, r2
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007fe:	d102      	bne.n	8000806 <__aeabi_d2uiz+0x3a>
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000804:	4770      	bx	lr
 8000806:	f04f 0000 	mov.w	r0, #0
 800080a:	4770      	bx	lr
 800080c:	0000      	movs	r0, r0
	...

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f001 fa16 	bl	8001c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 fa37 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 fb89 	bl	8000f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000822:	f000 fb5d 	bl	8000ee0 <MX_DMA_Init>
  MX_OCTOSPI1_Init();
 8000826:	f000 fab7 	bl	8000d98 <MX_OCTOSPI1_Init>
  MX_DAC1_Init();
 800082a:	f000 fa81 	bl	8000d30 <MX_DAC1_Init>
  MX_TIM2_Init();
 800082e:	f000 fb09 	bl	8000e44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	BSP_QSPI_Init();
 8000832:	f000 fc01 	bl	8001038 <BSP_QSPI_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000836:	48bc      	ldr	r0, [pc, #752]	; (8000b28 <main+0x318>)
 8000838:	f005 f900 	bl	8005a3c <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim2);
//	HAL_TIM_Base_Start_IT(&htim2);

	//Erase 4 blocks prior to write in
	for(int i = 0; i < 4; i++){
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
 8000840:	e00f      	b.n	8000862 <main+0x52>
		if(BSP_QSPI_Erase_Block(addr + i * 0x010000) != QSPI_OK){
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	041a      	lsls	r2, r3, #16
 8000846:	4bb9      	ldr	r3, [pc, #740]	; (8000b2c <main+0x31c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fd49 	bl	80012e4 <BSP_QSPI_Erase_Block>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <main+0x4c>
			Error_Handler();
 8000858:	f000 fbe2 	bl	8001020 <Error_Handler>
	for(int i = 0; i < 4; i++){
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	3301      	adds	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	2b03      	cmp	r3, #3
 8000866:	ddec      	ble.n	8000842 <main+0x32>
		  }
	  }

	// Select tone
	for (int tone = 0; tone < 5; tone++) {
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	e1c6      	b.n	8000bfc <main+0x3ec>
		if (tone == 0) {
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d150      	bne.n	8000916 <main+0x106>
			for (int i = 0; i < BUF_SIZE; i++) {
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e038      	b.n	80008ec <main+0xdc>
				sineWave[i] = (uint8_t)(0.33*(1 + arm_sin_f32(2*PI*i/A5))*256);
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000884:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8000b44 <main+0x334>
 8000888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088c:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8000b30 <main+0x320>
 8000890:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000894:	eeb0 0a47 	vmov.f32	s0, s14
 8000898:	f005 fd34 	bl	8006304 <arm_sin_f32>
 800089c:	eef0 7a40 	vmov.f32	s15, s0
 80008a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008a8:	ee17 0a90 	vmov	r0, s15
 80008ac:	f7ff ff36 	bl	800071c <__aeabi_f2d>
 80008b0:	a39b      	add	r3, pc, #620	; (adr r3, 8000b20 <main+0x310>)
 80008b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b6:	f7ff fca3 	bl	8000200 <__aeabi_dmul>
 80008ba:	4602      	mov	r2, r0
 80008bc:	460b      	mov	r3, r1
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	4b9b      	ldr	r3, [pc, #620]	; (8000b34 <main+0x324>)
 80008c8:	f7ff fc9a 	bl	8000200 <__aeabi_dmul>
 80008cc:	4602      	mov	r2, r0
 80008ce:	460b      	mov	r3, r1
 80008d0:	4610      	mov	r0, r2
 80008d2:	4619      	mov	r1, r3
 80008d4:	f7ff ff7a 	bl	80007cc <__aeabi_d2uiz>
 80008d8:	4603      	mov	r3, r0
 80008da:	b2d9      	uxtb	r1, r3
 80008dc:	4a96      	ldr	r2, [pc, #600]	; (8000b38 <main+0x328>)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	4413      	add	r3, r2
 80008e2:	460a      	mov	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < BUF_SIZE; i++) {
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f648 728d 	movw	r2, #36749	; 0x8f8d
 80008f2:	4293      	cmp	r3, r2
 80008f4:	ddc1      	ble.n	800087a <main+0x6a>
			}
			if (BSP_QSPI_Write(sineWave, (uint32_t) (tone*BUF_SIZE), (uint32_t) BUF_SIZE) != QSPI_OK) {
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	f648 728e 	movw	r2, #36750	; 0x8f8e
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000904:	4619      	mov	r1, r3
 8000906:	488c      	ldr	r0, [pc, #560]	; (8000b38 <main+0x328>)
 8000908:	f000 fc66 	bl	80011d8 <BSP_QSPI_Write>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <main+0x106>
				Error_Handler();
 8000912:	f000 fb85 	bl	8001020 <Error_Handler>
			}
		}

		if (tone == 1) {
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d150      	bne.n	80009be <main+0x1ae>
			for (int i = 0; i < BUF_SIZE; i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	e038      	b.n	8000994 <main+0x184>
				sineWave[i] = (uint8_t)(0.33*(1 + arm_sin_f32(2*PI*i/C6))*256);
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8000b44 <main+0x334>
 8000930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000934:	eddf 6a81 	vldr	s13, [pc, #516]	; 8000b3c <main+0x32c>
 8000938:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800093c:	eeb0 0a47 	vmov.f32	s0, s14
 8000940:	f005 fce0 	bl	8006304 <arm_sin_f32>
 8000944:	eef0 7a40 	vmov.f32	s15, s0
 8000948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800094c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000950:	ee17 0a90 	vmov	r0, s15
 8000954:	f7ff fee2 	bl	800071c <__aeabi_f2d>
 8000958:	a371      	add	r3, pc, #452	; (adr r3, 8000b20 <main+0x310>)
 800095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800095e:	f7ff fc4f 	bl	8000200 <__aeabi_dmul>
 8000962:	4602      	mov	r2, r0
 8000964:	460b      	mov	r3, r1
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	4b71      	ldr	r3, [pc, #452]	; (8000b34 <main+0x324>)
 8000970:	f7ff fc46 	bl	8000200 <__aeabi_dmul>
 8000974:	4602      	mov	r2, r0
 8000976:	460b      	mov	r3, r1
 8000978:	4610      	mov	r0, r2
 800097a:	4619      	mov	r1, r3
 800097c:	f7ff ff26 	bl	80007cc <__aeabi_d2uiz>
 8000980:	4603      	mov	r3, r0
 8000982:	b2d9      	uxtb	r1, r3
 8000984:	4a6c      	ldr	r2, [pc, #432]	; (8000b38 <main+0x328>)
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	4413      	add	r3, r2
 800098a:	460a      	mov	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < BUF_SIZE; i++) {
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	3301      	adds	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	f648 728d 	movw	r2, #36749	; 0x8f8d
 800099a:	4293      	cmp	r3, r2
 800099c:	ddc1      	ble.n	8000922 <main+0x112>
			}
			if (BSP_QSPI_Write(sineWave, (uint32_t) (tone*BUF_SIZE), (uint32_t) BUF_SIZE) != QSPI_OK) {
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	f648 728e 	movw	r2, #36750	; 0x8f8e
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	f648 728e 	movw	r2, #36750	; 0x8f8e
 80009ac:	4619      	mov	r1, r3
 80009ae:	4862      	ldr	r0, [pc, #392]	; (8000b38 <main+0x328>)
 80009b0:	f000 fc12 	bl	80011d8 <BSP_QSPI_Write>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <main+0x1ae>
				Error_Handler();
 80009ba:	f000 fb31 	bl	8001020 <Error_Handler>
			}
		}

		if (tone == 2) {
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d150      	bne.n	8000a66 <main+0x256>
			for (int i = 0; i < BUF_SIZE; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e038      	b.n	8000a3c <main+0x22c>
				sineWave[i] = (uint8_t)(0.33*(1 + arm_sin_f32(2*PI*i/Eb6))*256);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	ee07 3a90 	vmov	s15, r3
 80009d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d4:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000b44 <main+0x334>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009dc:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000b40 <main+0x330>
 80009e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80009e4:	eeb0 0a47 	vmov.f32	s0, s14
 80009e8:	f005 fc8c 	bl	8006304 <arm_sin_f32>
 80009ec:	eef0 7a40 	vmov.f32	s15, s0
 80009f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009f8:	ee17 0a90 	vmov	r0, s15
 80009fc:	f7ff fe8e 	bl	800071c <__aeabi_f2d>
 8000a00:	a347      	add	r3, pc, #284	; (adr r3, 8000b20 <main+0x310>)
 8000a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a06:	f7ff fbfb 	bl	8000200 <__aeabi_dmul>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <main+0x324>)
 8000a18:	f7ff fbf2 	bl	8000200 <__aeabi_dmul>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	460b      	mov	r3, r1
 8000a20:	4610      	mov	r0, r2
 8000a22:	4619      	mov	r1, r3
 8000a24:	f7ff fed2 	bl	80007cc <__aeabi_d2uiz>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b2d9      	uxtb	r1, r3
 8000a2c:	4a42      	ldr	r2, [pc, #264]	; (8000b38 <main+0x328>)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4413      	add	r3, r2
 8000a32:	460a      	mov	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < BUF_SIZE; i++) {
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f648 728d 	movw	r2, #36749	; 0x8f8d
 8000a42:	4293      	cmp	r3, r2
 8000a44:	ddc1      	ble.n	80009ca <main+0x1ba>
			}
			if (BSP_QSPI_Write(sineWave, (uint32_t) (tone*BUF_SIZE), (uint32_t) BUF_SIZE) != QSPI_OK) {
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000a4c:	fb02 f303 	mul.w	r3, r2, r3
 8000a50:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000a54:	4619      	mov	r1, r3
 8000a56:	4838      	ldr	r0, [pc, #224]	; (8000b38 <main+0x328>)
 8000a58:	f000 fbbe 	bl	80011d8 <BSP_QSPI_Write>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <main+0x256>
				Error_Handler();
 8000a62:	f000 fadd 	bl	8001020 <Error_Handler>
			}
		}

		if (tone == 3) {
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d150      	bne.n	8000b0e <main+0x2fe>
			for (int i = 0; i < BUF_SIZE; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	e038      	b.n	8000ae4 <main+0x2d4>
				sineWave[i] = (uint8_t)(0.33*(1 + arm_sin_f32(2*PI*i/Gb6))*256);
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	ee07 3a90 	vmov	s15, r3
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000b44 <main+0x334>
 8000a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a84:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8000a88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8000a90:	f005 fc38 	bl	8006304 <arm_sin_f32>
 8000a94:	eef0 7a40 	vmov.f32	s15, s0
 8000a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aa0:	ee17 0a90 	vmov	r0, s15
 8000aa4:	f7ff fe3a 	bl	800071c <__aeabi_f2d>
 8000aa8:	a31d      	add	r3, pc, #116	; (adr r3, 8000b20 <main+0x310>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	f7ff fba7 	bl	8000200 <__aeabi_dmul>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <main+0x324>)
 8000ac0:	f7ff fb9e 	bl	8000200 <__aeabi_dmul>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	4610      	mov	r0, r2
 8000aca:	4619      	mov	r1, r3
 8000acc:	f7ff fe7e 	bl	80007cc <__aeabi_d2uiz>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b2d9      	uxtb	r1, r3
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <main+0x328>)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	460a      	mov	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < BUF_SIZE; i++) {
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f648 728d 	movw	r2, #36749	; 0x8f8d
 8000aea:	4293      	cmp	r3, r2
 8000aec:	ddc1      	ble.n	8000a72 <main+0x262>
			}
			if (BSP_QSPI_Write(sineWave, (uint32_t) (tone*BUF_SIZE), (uint32_t) BUF_SIZE) != QSPI_OK) {
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000af4:	fb02 f303 	mul.w	r3, r2, r3
 8000af8:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000afc:	4619      	mov	r1, r3
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <main+0x328>)
 8000b00:	f000 fb6a 	bl	80011d8 <BSP_QSPI_Write>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <main+0x2fe>
				Error_Handler();
 8000b0a:	f000 fa89 	bl	8001020 <Error_Handler>
			}
		}

		if (tone == 4) {
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d167      	bne.n	8000be4 <main+0x3d4>
			for (int i = 0; i < BUF_SIZE; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	e04f      	b.n	8000bba <main+0x3aa>
 8000b1a:	bf00      	nop
 8000b1c:	f3af 8000 	nop.w
 8000b20:	51eb851f 	.word	0x51eb851f
 8000b24:	3fd51eb8 	.word	0x3fd51eb8
 8000b28:	200000ec 	.word	0x200000ec
 8000b2c:	2000013c 	.word	0x2000013c
 8000b30:	42480000 	.word	0x42480000
 8000b34:	40700000 	.word	0x40700000
 8000b38:	20000140 	.word	0x20000140
 8000b3c:	42280000 	.word	0x42280000
 8000b40:	420c0000 	.word	0x420c0000
 8000b44:	40c90fdb 	.word	0x40c90fdb
				sineWave[i] = (uint8_t)(0.33*(1 + arm_sin_f32(2*PI*i/A6))*256);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	ee07 3a90 	vmov	s15, r3
 8000b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b52:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8000b44 <main+0x334>
 8000b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b5a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000b5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b62:	eeb0 0a47 	vmov.f32	s0, s14
 8000b66:	f005 fbcd 	bl	8006304 <arm_sin_f32>
 8000b6a:	eef0 7a40 	vmov.f32	s15, s0
 8000b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b76:	ee17 0a90 	vmov	r0, s15
 8000b7a:	f7ff fdcf 	bl	800071c <__aeabi_f2d>
 8000b7e:	a341      	add	r3, pc, #260	; (adr r3, 8000c84 <main+0x474>)
 8000b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b84:	f7ff fb3c 	bl	8000200 <__aeabi_dmul>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <main+0x458>)
 8000b96:	f7ff fb33 	bl	8000200 <__aeabi_dmul>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff fe13 	bl	80007cc <__aeabi_d2uiz>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b2d9      	uxtb	r1, r3
 8000baa:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <main+0x45c>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < BUF_SIZE; i++) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f648 728d 	movw	r2, #36749	; 0x8f8d
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	ddc1      	ble.n	8000b48 <main+0x338>
			}
			if (BSP_QSPI_Write(sineWave, (uint32_t) (tone*BUF_SIZE), (uint32_t) BUF_SIZE) != QSPI_OK) {
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <main+0x45c>)
 8000bd6:	f000 faff 	bl	80011d8 <BSP_QSPI_Write>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <main+0x3d4>
				Error_Handler();
 8000be0:	f000 fa1e 	bl	8001020 <Error_Handler>
			}
		}

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, (uint32_t) BUF_SIZE, DAC_ALIGN_8B_R);
 8000be4:	2308      	movs	r3, #8
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	f648 738e 	movw	r3, #36750	; 0x8f8e
 8000bec:	4a20      	ldr	r2, [pc, #128]	; (8000c70 <main+0x460>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4820      	ldr	r0, [pc, #128]	; (8000c74 <main+0x464>)
 8000bf2:	f001 f9f5 	bl	8001fe0 <HAL_DAC_Start_DMA>
	for (int tone = 0; tone < 5; tone++) {
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	f77f ae35 	ble.w	800086e <main+0x5e>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Check flag
		if (flag == 1) {
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <main+0x468>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d1fb      	bne.n	8000c04 <main+0x3f4>
			flag = 0;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <main+0x468>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
	//		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			addr = counter * BUF_SIZE;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <main+0x46c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <main+0x470>)
 8000c20:	6013      	str	r3, [r2, #0]
			counter++;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <main+0x46c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <main+0x46c>)
 8000c2a:	6013      	str	r3, [r2, #0]
			if (counter > 4) {
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <main+0x46c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	dd02      	ble.n	8000c3a <main+0x42a>
				counter = 0;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <main+0x46c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
			}
			if (BSP_QSPI_Read(play, addr, (uint32_t) BUF_SIZE) != QSPI_OK) {
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <main+0x470>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f648 728e 	movw	r2, #36750	; 0x8f8e
 8000c42:	4619      	mov	r1, r3
 8000c44:	480a      	ldr	r0, [pc, #40]	; (8000c70 <main+0x460>)
 8000c46:	f000 fa75 	bl	8001134 <BSP_QSPI_Read>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <main+0x444>
				Error_Handler();
 8000c50:	f000 f9e6 	bl	8001020 <Error_Handler>
			}
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, play, (uint32_t) BUF_SIZE, DAC_ALIGN_8B_R);
 8000c54:	2308      	movs	r3, #8
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	f648 738e 	movw	r3, #36750	; 0x8f8e
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <main+0x460>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <main+0x464>)
 8000c62:	f001 f9bd 	bl	8001fe0 <HAL_DAC_Start_DMA>
		if (flag == 1) {
 8000c66:	e7cd      	b.n	8000c04 <main+0x3f4>
 8000c68:	40700000 	.word	0x40700000
 8000c6c:	20000140 	.word	0x20000140
 8000c70:	200090d0 	.word	0x200090d0
 8000c74:	20000028 	.word	0x20000028
 8000c78:	20000138 	.word	0x20000138
 8000c7c:	20012060 	.word	0x20012060
 8000c80:	2000013c 	.word	0x2000013c
 8000c84:	51eb851f 	.word	0x51eb851f
 8000c88:	3fd51eb8 	.word	0x3fd51eb8

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b096      	sub	sp, #88	; 0x58
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2244      	movs	r2, #68	; 0x44
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f005 fb9c 	bl	80063d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cb2:	f003 fa03 	bl	80040bc <HAL_PWREx_ControlVoltageScaling>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cbc:	f000 f9b0 	bl	8001020 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ccc:	2360      	movs	r3, #96	; 0x60
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cdc:	2328      	movs	r3, #40	; 0x28
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fa87 	bl	8004204 <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000cfc:	f000 f990 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	230f      	movs	r3, #15
 8000d02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2303      	movs	r3, #3
 8000d06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	2103      	movs	r1, #3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 fe8d 	bl	8004a38 <HAL_RCC_ClockConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d24:	f000 f97c 	bl	8001020 <Error_Handler>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3758      	adds	r7, #88	; 0x58
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2228      	movs	r2, #40	; 0x28
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 fb4b 	bl	80063d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_DAC1_Init+0x60>)
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <MX_DAC1_Init+0x64>)
 8000d46:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_DAC1_Init+0x60>)
 8000d4a:	f001 f926 	bl	8001f9a <HAL_DAC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d54:	f000 f964 	bl	8001020 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d5c:	230a      	movs	r3, #10
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d64:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_DAC1_Init+0x60>)
 8000d7a:	f001 fa11 	bl	80021a0 <HAL_DAC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f94c 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	; 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000028 	.word	0x20000028
 8000d94:	40007400 	.word	0x40007400

08000d98 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dae:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <MX_OCTOSPI1_Init+0xa8>)
 8000db0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000db2:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dc4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dc8:	2220      	movs	r2, #32
 8000dca:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000df8:	2208      	movs	r2, #8
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000dfe:	f002 f8c1 	bl	8002f84 <HAL_OSPI_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000e08:	f000 f90a 	bl	8001020 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000e14:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000e18:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_OCTOSPI1_Init+0xa4>)
 8000e24:	f002 fbac 	bl	8003580 <HAL_OSPIM_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000e2e:	f000 f8f7 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000009c 	.word	0x2000009c
 8000e40:	a0001000 	.word	0xa0001000

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_TIM2_Init+0x98>)
 8000e64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_TIM2_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_TIM2_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_TIM2_Init+0x98>)
 8000e78:	f240 7216 	movw	r2, #1814	; 0x716
 8000e7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_TIM2_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_TIM2_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e8a:	4814      	ldr	r0, [pc, #80]	; (8000edc <MX_TIM2_Init+0x98>)
 8000e8c:	f004 fd7e 	bl	800598c <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e96:	f000 f8c3 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_TIM2_Init+0x98>)
 8000ea8:	f004 ff57 	bl	8005d5a <HAL_TIM_ConfigClockSource>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eb2:	f000 f8b5 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eb6:	2320      	movs	r3, #32
 8000eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_TIM2_Init+0x98>)
 8000ec4:	f005 f978 	bl	80061b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ece:	f000 f8a7 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200000ec 	.word	0x200000ec

08000ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_DMA_Init+0x50>)
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <MX_DMA_Init+0x50>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_DMA_Init+0x50>)
 8000ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_DMA_Init+0x50>)
 8000f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <MX_DMA_Init+0x50>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6493      	str	r3, [r2, #72]	; 0x48
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_DMA_Init+0x50>)
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	200b      	movs	r0, #11
 8000f1c:	f001 f807 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f20:	200b      	movs	r0, #11
 8000f22:	f001 f820 	bl	8001f66 <HAL_NVIC_EnableIRQ>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4b28      	ldr	r3, [pc, #160]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a27      	ldr	r2, [pc, #156]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_GPIO_Init+0xb8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(r_LED_GPIO_Port, r_LED_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2108      	movs	r1, #8
 8000f96:	4816      	ldr	r0, [pc, #88]	; (8000ff0 <MX_GPIO_Init+0xbc>)
 8000f98:	f001 ffc2 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(g_LED_GPIO_Port, g_LED_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <MX_GPIO_Init+0xc0>)
 8000fa4:	f001 ffbc 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : r_LED_Pin */
  GPIO_InitStruct.Pin = r_LED_Pin;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(r_LED_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <MX_GPIO_Init+0xbc>)
 8000fc0:	f001 fd2a 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : g_LED_Pin */
  GPIO_InitStruct.Pin = g_LED_Pin;
 8000fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(g_LED_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_GPIO_Init+0xc0>)
 8000fde:	f001 fd1b 	bl	8002a18 <HAL_GPIO_Init>

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48001000 	.word	0x48001000
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <HAL_DAC_ConvCpltCallbackCh1>:
/* USER CODE BEGIN 4 */
//void HAL_DAC_ConvHalfCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
//	HAL_GPIO_TogglePin(g_LED_GPIO_Port, g_LED_Pin);
//}

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac1) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(g_LED_GPIO_Port, g_LED_Pin);
 8001000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
 8001006:	f001 ffa3 	bl	8002f50 <HAL_GPIO_TogglePin>
	flag=1;
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_DAC_ConvCpltCallbackCh1+0x24>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]

}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	48000400 	.word	0x48000400
 800101c:	20000138 	.word	0x20000138

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(r_LED_GPIO_Port, r_LED_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2108      	movs	r1, #8
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <Error_Handler+0x14>)
 800102a:	f001 ff79 	bl	8002f20 <HAL_GPIO_WritePin>
	__BKPT();
 800102e:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	48001000 	.word	0x48001000

08001038 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <BSP_QSPI_Init+0xf4>)
 8001040:	4a3b      	ldr	r2, [pc, #236]	; (8001130 <BSP_QSPI_Init+0xf8>)
 8001042:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8001044:	4839      	ldr	r0, [pc, #228]	; (800112c <BSP_QSPI_Init+0xf4>)
 8001046:	f002 f847 	bl	80030d8 <HAL_OSPI_DeInit>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e067      	b.n	8001124 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001054:	f000 f990 	bl	8001378 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8001058:	4b34      	ldr	r3, [pc, #208]	; (800112c <BSP_QSPI_Init+0xf4>)
 800105a:	2204      	movs	r2, #4
 800105c:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <BSP_QSPI_Init+0xf4>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <BSP_QSPI_Init+0xf4>)
 8001066:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001070:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8001084:	2320      	movs	r3, #32
 8001086:	e003      	b.n	8001090 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8001090:	461a      	mov	r2, r3
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <BSP_QSPI_Init+0xf4>)
 8001094:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <BSP_QSPI_Init+0xf4>)
 8001098:	2201      	movs	r2, #1
 800109a:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <BSP_QSPI_Init+0xf4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010ca:	f001 ff5b 	bl	8002f84 <HAL_OSPI_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e025      	b.n	8001124 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 80010d8:	4814      	ldr	r0, [pc, #80]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010da:	f000 f98d 	bl	80013f8 <QSPI_ResetMemory>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 80010e4:	2304      	movs	r3, #4
 80010e6:	e01d      	b.n	8001124 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80010e8:	2101      	movs	r1, #1
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010ec:	f000 fa72 	bl	80015d4 <QSPI_QuadMode>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e014      	b.n	8001124 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80010fa:	2101      	movs	r1, #1
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <BSP_QSPI_Init+0xf4>)
 80010fe:	f000 fb15 	bl	800172c <QSPI_HighPerfMode>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e00b      	b.n	8001124 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <BSP_QSPI_Init+0xf4>)
 800110e:	2202      	movs	r2, #2
 8001110:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <BSP_QSPI_Init+0xf4>)
 8001114:	f001 ff36 	bl	8002f84 <HAL_OSPI_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20012064 	.word	0x20012064
 8001130:	a0001000 	.word	0xa0001000

08001134 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b098      	sub	sp, #96	; 0x60
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8001148:	23eb      	movs	r3, #235	; 0xeb
 800114a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 800114c:	2301      	movs	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 800115c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800116c:	23aa      	movs	r3, #170	; 0xaa
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8001170:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8001176:	2300      	movs	r3, #0
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800117e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800118c:	2304      	movs	r3, #4
 800118e:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001194:	2300      	movs	r3, #0
 8001196:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a0:	4619      	mov	r1, r3
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <BSP_QSPI_Read+0xa0>)
 80011a4:	f001 ffbf 	bl	8003126 <HAL_OSPI_Command>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00b      	b.n	80011ca <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <BSP_QSPI_Read+0xa0>)
 80011ba:	f002 f8a8 	bl	800330e <HAL_OSPI_Receive>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3760      	adds	r7, #96	; 0x60
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20012064 	.word	0x20012064

080011d8 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09c      	sub	sp, #112	; 0x70
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011ec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80011ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d901      	bls.n	80011fa <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800120e:	2338      	movs	r3, #56	; 0x38
 8001210:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800121e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8001224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8001232:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001244:	2300      	movs	r3, #0
 8001246:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 800124c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800124e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8001250:	4823      	ldr	r0, [pc, #140]	; (80012e0 <BSP_QSPI_Write+0x108>)
 8001252:	f000 f918 	bl	8001486 <QSPI_WriteEnable>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e03b      	b.n	80012d8 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	f241 3288 	movw	r2, #5000	; 0x1388
 8001268:	4619      	mov	r1, r3
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <BSP_QSPI_Write+0x108>)
 800126c:	f001 ff5b 	bl	8003126 <HAL_OSPI_Command>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e02e      	b.n	80012d8 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <BSP_QSPI_Write+0x108>)
 8001282:	f001 ffd1 	bl	8003228 <HAL_OSPI_Transmit>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e023      	b.n	80012d8 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001290:	f241 3188 	movw	r1, #5000	; 0x1388
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <BSP_QSPI_Write+0x108>)
 8001296:	f000 f952 	bl	800153e <QSPI_AutoPollingMemReady>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e019      	b.n	80012d8 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80012a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80012a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012a8:	4413      	add	r3, r2
 80012aa:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012b0:	4413      	add	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80012b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80012bc:	429a      	cmp	r2, r3
 80012be:	d203      	bcs.n	80012c8 <BSP_QSPI_Write+0xf0>
 80012c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80012c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	e001      	b.n	80012cc <BSP_QSPI_Write+0xf4>
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 80012ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80012d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3b8      	bcc.n	8001248 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3770      	adds	r7, #112	; 0x70
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20012064 	.word	0x20012064

080012e4 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b096      	sub	sp, #88	; 0x58
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 80012f4:	23d8      	movs	r3, #216	; 0xd8
 80012f6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800130e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001328:	2300      	movs	r3, #0
 800132a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <BSP_QSPI_Erase_Block+0x90>)
 800132e:	f000 f8aa 	bl	8001486 <QSPI_WriteEnable>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e017      	b.n	800136c <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	f241 3288 	movw	r2, #5000	; 0x1388
 8001344:	4619      	mov	r1, r3
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <BSP_QSPI_Erase_Block+0x90>)
 8001348:	f001 feed 	bl	8003126 <HAL_OSPI_Command>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00a      	b.n	800136c <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001356:	f640 51ac 	movw	r1, #3500	; 0xdac
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <BSP_QSPI_Erase_Block+0x90>)
 800135c:	f000 f8ef 	bl	800153e <QSPI_AutoPollingMemReady>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3758      	adds	r7, #88	; 0x58
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20012064 	.word	0x20012064

08001378 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6513      	str	r3, [r2, #80]	; 0x50
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 800138c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 80013a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <BSP_QSPI_MspInit+0x78>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80013c6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80013ca:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013d8:	230a      	movs	r3, #10
 80013da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	4804      	ldr	r0, [pc, #16]	; (80013f4 <BSP_QSPI_MspInit+0x7c>)
 80013e4:	f001 fb18 	bl	8002a18 <HAL_GPIO_Init>
}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48001000 	.word	0x48001000

080013f8 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b096      	sub	sp, #88	; 0x58
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8001408:	2366      	movs	r3, #102	; 0x66
 800140a:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800140c:	2301      	movs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800142c:	2300      	movs	r3, #0
 800142e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f001 fe73 	bl	8003126 <HAL_OSPI_Command>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e019      	b.n	800147e <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800144a:	2399      	movs	r3, #153	; 0x99
 800144c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f001 fe64 	bl	8003126 <HAL_OSPI_Command>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e00a      	b.n	800147e <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001468:	f241 3188 	movw	r1, #5000	; 0x1388
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f866 	bl	800153e <QSPI_AutoPollingMemReady>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3758      	adds	r7, #88	; 0x58
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b09c      	sub	sp, #112	; 0x70
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8001496:	2306      	movs	r3, #6
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800149a:	2301      	movs	r3, #1
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80014ba:	2300      	movs	r3, #0
 80014bc:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f001 fe2c 	bl	8003126 <HAL_OSPI_Command>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e02e      	b.n	8001536 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 80014d8:	2302      	movs	r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 80014dc:	2302      	movs	r3, #2
 80014de:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80014e4:	2310      	movs	r3, #16
 80014e6:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80014e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ec:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 80014ee:	2305      	movs	r3, #5
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 80014f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f6:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	f241 3288 	movw	r2, #5000	; 0x1388
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f001 fe0b 	bl	8003126 <HAL_OSPI_Command>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00d      	b.n	8001536 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f001 ff95 	bl	8003454 <HAL_OSPI_AutoPolling>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3770      	adds	r7, #112	; 0x70
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b09c      	sub	sp, #112	; 0x70
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8001550:	2305      	movs	r3, #5
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001554:	2301      	movs	r3, #1
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001560:	2300      	movs	r3, #0
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800156c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800156e:	2301      	movs	r3, #1
 8001570:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800157e:	2300      	movs	r3, #0
 8001580:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8001586:	2301      	movs	r3, #1
 8001588:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800158e:	2310      	movs	r3, #16
 8001590:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8001592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001596:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4619      	mov	r1, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f001 fdbf 	bl	8003126 <HAL_OSPI_Command>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00c      	b.n	80015cc <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f001 ff4a 	bl	8003454 <HAL_OSPI_AutoPolling>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3770      	adds	r7, #112	; 0x70
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b098      	sub	sp, #96	; 0x60
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80015e8:	2305      	movs	r3, #5
 80015ea:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001604:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800160e:	2301      	movs	r3, #1
 8001610:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001616:	2300      	movs	r3, #0
 8001618:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f001 fd7e 	bl	8003126 <HAL_OSPI_Command>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e077      	b.n	8001724 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001634:	f107 030f 	add.w	r3, r7, #15
 8001638:	f241 3288 	movw	r2, #5000	; 0x1388
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f001 fe65 	bl	800330e <HAL_OSPI_Receive>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06a      	b.n	8001724 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff19 	bl	8001486 <QSPI_WriteEnable>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e062      	b.n	8001724 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d105      	bne.n	8001670 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800166a:	b2db      	uxtb	r3, r3
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e004      	b.n	800167a <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001676:	b2db      	uxtb	r3, r3
 8001678:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f001 fd4c 	bl	8003126 <HAL_OSPI_Command>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e045      	b.n	8001724 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001698:	f107 030f 	add.w	r3, r7, #15
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f001 fdc0 	bl	8003228 <HAL_OSPI_Transmit>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e038      	b.n	8001724 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80016b2:	f241 3188 	movw	r1, #5000	; 0x1388
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff41 	bl	800153e <QSPI_AutoPollingMemReady>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e02e      	b.n	8001724 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80016c6:	2305      	movs	r3, #5
 80016c8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f001 fd26 	bl	8003126 <HAL_OSPI_Command>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e01f      	b.n	8001724 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016e4:	f107 030f 	add.w	r3, r7, #15
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f001 fe0d 	bl	800330e <HAL_OSPI_Receive>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e012      	b.n	8001724 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <QSPI_QuadMode+0x13a>
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d007      	beq.n	800171e <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3760      	adds	r7, #96	; 0x60
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b098      	sub	sp, #96	; 0x60
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8001740:	2305      	movs	r3, #5
 8001742:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001744:	2301      	movs	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001754:	2300      	movs	r3, #0
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800175c:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8001766:	2301      	movs	r3, #1
 8001768:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800176e:	2300      	movs	r3, #0
 8001770:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f001 fcd2 	bl	8003126 <HAL_OSPI_Command>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e09a      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4619      	mov	r1, r3
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f001 fdb9 	bl	800330e <HAL_OSPI_Receive>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e08d      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80017a6:	2315      	movs	r3, #21
 80017a8:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f001 fcb4 	bl	8003126 <HAL_OSPI_Command>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e07c      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	3301      	adds	r3, #1
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f001 fd9a 	bl	800330e <HAL_OSPI_Receive>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e06e      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fe4e 	bl	8001486 <QSPI_WriteEnable>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e066      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d105      	bne.n	8001806 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80017fa:	7bbb      	ldrb	r3, [r7, #14]
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	b2db      	uxtb	r3, r3
 8001802:	73bb      	strb	r3, [r7, #14]
 8001804:	e004      	b.n	8001810 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	f023 0302 	bic.w	r3, r3, #2
 800180c:	b2db      	uxtb	r3, r3
 800180e:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8001814:	2303      	movs	r3, #3
 8001816:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f001 fc7f 	bl	8003126 <HAL_OSPI_Command>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e047      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f001 fcf3 	bl	8003228 <HAL_OSPI_Transmit>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e03a      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800184c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fe74 	bl	800153e <QSPI_AutoPollingMemReady>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e030      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001860:	2315      	movs	r3, #21
 8001862:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8001864:	2302      	movs	r3, #2
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f001 fc57 	bl	8003126 <HAL_OSPI_Command>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e01f      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 fd3e 	bl	800330e <HAL_OSPI_Receive>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e012      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800189c:	7b7b      	ldrb	r3, [r7, #13]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <QSPI_HighPerfMode+0x180>
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d007      	beq.n	80018bc <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80018ac:	7b7b      	ldrb	r3, [r7, #13]
 80018ae:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3760      	adds	r7, #96	; 0x60
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_MspInit+0x44>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_MspInit+0x44>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6613      	str	r3, [r2, #96]	; 0x60
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_MspInit+0x44>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_MspInit+0x44>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_MspInit+0x44>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6593      	str	r3, [r2, #88]	; 0x58
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MspInit+0x44>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <HAL_DAC_MspInit+0xc8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d14d      	bne.n	80019d2 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_DAC_MspInit+0xcc>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <HAL_DAC_MspInit+0xcc>)
 800193c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001940:	6593      	str	r3, [r2, #88]	; 0x58
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_DAC_MspInit+0xcc>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_DAC_MspInit+0xcc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_DAC_MspInit+0xcc>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_DAC_MspInit+0xcc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001966:	2310      	movs	r3, #16
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f001 f84c 	bl	8002a18 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 8001982:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_DAC_MspInit+0xd4>)
 8001984:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 8001988:	2206      	movs	r2, #6
 800198a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 800198e:	2210      	movs	r2, #16
 8001990:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80019b6:	480b      	ldr	r0, [pc, #44]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 80019b8:	f000 fdbc 	bl	8002534 <HAL_DMA_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80019c2:	f7ff fb2d 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_DAC_MspInit+0xd0>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40007400 	.word	0x40007400
 80019e0:	40021000 	.word	0x40021000
 80019e4:	2000003c 	.word	0x2000003c
 80019e8:	40020008 	.word	0x40020008

080019ec <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0b0      	sub	sp, #192	; 0xc0
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	2294      	movs	r2, #148	; 0x94
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 fce3 	bl	80063d8 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a28      	ldr	r2, [pc, #160]	; (8001ab8 <HAL_OSPI_MspInit+0xcc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d149      	bne.n	8001ab0 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 fa95 	bl	8004f5c <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001a38:	f7ff faf2 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a58:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6513      	str	r3, [r2, #80]	; 0x50
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_OSPI_MspInit+0xd0>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001a84:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_OSPI_MspInit+0xd4>)
 8001aac:	f000 ffb4 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	37c0      	adds	r7, #192	; 0xc0
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	a0001000 	.word	0xa0001000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48001000 	.word	0x48001000

08001ac4 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_OSPI_MspDeInit+0x3c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d110      	bne.n	8001af8 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_OSPI_MspDeInit+0x40>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_OSPI_MspDeInit+0x40>)
 8001adc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_OSPI_MspDeInit+0x40>)
 8001ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_OSPI_MspDeInit+0x40>)
 8001ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aec:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001aee:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <HAL_OSPI_MspDeInit+0x44>)
 8001af4:	f001 f922 	bl	8002d3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	a0001000 	.word	0xa0001000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48001000 	.word	0x48001000

08001b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1c:	d113      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_TIM_Base_MspInit+0x44>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_TIM_Base_MspInit+0x44>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_TIM_Base_MspInit+0x44>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	201c      	movs	r0, #28
 8001b3c:	f000 f9f7 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b40:	201c      	movs	r0, #28
 8001b42:	f000 fa10 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f000 f8a6 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA1_Channel1_IRQHandler+0x10>)
 8001bae:	f000 fde4 	bl	800277a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000003c 	.word	0x2000003c

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f003 ffab 	bl	8005b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000ec 	.word	0x200000ec

08001bd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf8:	f7ff ffea 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfe:	490d      	ldr	r1, [pc, #52]	; (8001c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <LoopForever+0xe>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c14:	4c0a      	ldr	r4, [pc, #40]	; (8001c40 <LoopForever+0x16>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c22:	f004 fbb5 	bl	8006390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c26:	f7fe fdf3 	bl	8000810 <main>

08001c2a <LoopForever>:

LoopForever:
    b LoopForever
 8001c2a:	e7fe      	b.n	8001c2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c2c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c38:	08006c4c 	.word	0x08006c4c
  ldr r2, =_sbss
 8001c3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c40:	200120b8 	.word	0x200120b8

08001c44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_IRQHandler>

08001c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 f961 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 f80e 	bl	8001c78 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	e001      	b.n	8001c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c68:	f7ff fe30 	bl	80018cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_InitTick+0x6c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d023      	beq.n	8001cd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_InitTick+0x70>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f96d 	bl	8001f82 <HAL_SYSTICK_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10f      	bne.n	8001cce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b0f      	cmp	r3, #15
 8001cb2:	d809      	bhi.n	8001cc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cbc:	f000 f937 	bl	8001f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_InitTick+0x74>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e007      	b.n	8001cd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e004      	b.n	8001cd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e001      	b.n	8001cd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008
 8001d14:	200120b4 	.word	0x200120b4

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	200120b4 	.word	0x200120b4

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff ffee 	bl	8001d18 <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffde 	bl	8001d18 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000008 	.word	0x20000008

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e014      	b.n	8001fd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	791b      	ldrb	r3, [r3, #4]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fca9 	bl	8001914 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	795b      	ldrb	r3, [r3, #5]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_DAC_Start_DMA+0x1e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0ab      	b.n	8002156 <HAL_DAC_Start_DMA+0x176>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2202      	movs	r2, #2
 8002008:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d12f      	bne.n	8002070 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_DAC_Start_DMA+0x180>)
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a51      	ldr	r2, [pc, #324]	; (8002164 <HAL_DAC_Start_DMA+0x184>)
 800201e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a50      	ldr	r2, [pc, #320]	; (8002168 <HAL_DAC_Start_DMA+0x188>)
 8002026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002036:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d013      	beq.n	8002066 <HAL_DAC_Start_DMA+0x86>
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d845      	bhi.n	80020d0 <HAL_DAC_Start_DMA+0xf0>
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_DAC_Start_DMA+0x72>
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d005      	beq.n	800205c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002050:	e03e      	b.n	80020d0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3308      	adds	r3, #8
 8002058:	613b      	str	r3, [r7, #16]
        break;
 800205a:	e03c      	b.n	80020d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330c      	adds	r3, #12
 8002062:	613b      	str	r3, [r7, #16]
        break;
 8002064:	e037      	b.n	80020d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3310      	adds	r3, #16
 800206c:	613b      	str	r3, [r7, #16]
        break;
 800206e:	e032      	b.n	80020d6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a3d      	ldr	r2, [pc, #244]	; (800216c <HAL_DAC_Start_DMA+0x18c>)
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a3c      	ldr	r2, [pc, #240]	; (8002170 <HAL_DAC_Start_DMA+0x190>)
 800207e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <HAL_DAC_Start_DMA+0x194>)
 8002086:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002096:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2b08      	cmp	r3, #8
 800209c:	d013      	beq.n	80020c6 <HAL_DAC_Start_DMA+0xe6>
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d817      	bhi.n	80020d4 <HAL_DAC_Start_DMA+0xf4>
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_DAC_Start_DMA+0xd2>
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d005      	beq.n	80020bc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80020b0:	e010      	b.n	80020d4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3314      	adds	r3, #20
 80020b8:	613b      	str	r3, [r7, #16]
        break;
 80020ba:	e00c      	b.n	80020d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3318      	adds	r3, #24
 80020c2:	613b      	str	r3, [r7, #16]
        break;
 80020c4:	e007      	b.n	80020d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	331c      	adds	r3, #28
 80020cc:	613b      	str	r3, [r7, #16]
        break;
 80020ce:	e002      	b.n	80020d6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80020d0:	bf00      	nop
 80020d2:	e000      	b.n	80020d6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80020d4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d111      	bne.n	8002100 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6898      	ldr	r0, [r3, #8]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	f000 fac5 	bl	8002684 <HAL_DMA_Start_IT>
 80020fa:	4603      	mov	r3, r0
 80020fc:	75fb      	strb	r3, [r7, #23]
 80020fe:	e010      	b.n	8002122 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800210e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68d8      	ldr	r0, [r3, #12]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	f000 fab3 	bl	8002684 <HAL_DMA_Start_IT>
 800211e:	4603      	mov	r3, r0
 8002120:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e005      	b.n	8002154 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f043 0204 	orr.w	r2, r3, #4
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002154:	7dfb      	ldrb	r3, [r7, #23]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	08002421 	.word	0x08002421
 8002164:	08002443 	.word	0x08002443
 8002168:	0800245f 	.word	0x0800245f
 800216c:	080024c9 	.word	0x080024c9
 8002170:	080024eb 	.word	0x080024eb
 8002174:	08002507 	.word	0x08002507

08002178 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	795b      	ldrb	r3, [r3, #5]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_DAC_ConfigChannel+0x1c>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e12a      	b.n	8002412 <HAL_DAC_ConfigChannel+0x272>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2202      	movs	r2, #2
 80021c6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d174      	bne.n	80022ba <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80021d0:	f7ff fda2 	bl	8001d18 <HAL_GetTick>
 80021d4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d134      	bne.n	8002246 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80021dc:	e011      	b.n	8002202 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80021de:	f7ff fd9b 	bl	8001d18 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d90a      	bls.n	8002202 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f043 0208 	orr.w	r2, r3, #8
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2203      	movs	r2, #3
 80021fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e107      	b.n	8002412 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e6      	bne.n	80021de <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002210:	2001      	movs	r0, #1
 8002212:	f7ff fd8d 	bl	8001d30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	69d2      	ldr	r2, [r2, #28]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
 8002220:	e01e      	b.n	8002260 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002222:	f7ff fd79 	bl	8001d18 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d90a      	bls.n	8002246 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f043 0208 	orr.w	r2, r3, #8
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2203      	movs	r2, #3
 8002240:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0e5      	b.n	8002412 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224c:	2b00      	cmp	r3, #0
 800224e:	dbe8      	blt.n	8002222 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002250:	2001      	movs	r0, #1
 8002252:	f7ff fd6d 	bl	8001d30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	69d2      	ldr	r2, [r2, #28]
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	ea02 0103 	and.w	r1, r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6a1a      	ldr	r2, [r3, #32]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	409a      	lsls	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	21ff      	movs	r1, #255	; 0xff
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	ea02 0103 	and.w	r1, r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d11d      	bne.n	80022fe <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	221f      	movs	r2, #31
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	4013      	ands	r3, r2
 80022dc:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2207      	movs	r2, #7
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	4013      	ands	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	431a      	orrs	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	4313      	orrs	r3, r2
 800233c:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	400a      	ands	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	4013      	ands	r3, r2
 8002380:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	4313      	orrs	r3, r2
 8002398:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a2:	d104      	bne.n	80023ae <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	e018      	b.n	80023e0 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e00f      	b.n	80023e0 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80023c0:	f002 fd00 	bl	8004dc4 <HAL_RCC_GetHCLKFreq>
 80023c4:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <HAL_DAC_ConfigChannel+0x27c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d904      	bls.n	80023d8 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e003      	b.n	80023e0 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023de:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	22c0      	movs	r2, #192	; 0xc0
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	04c4b400 	.word	0x04c4b400

08002420 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7fe fde2 	bl	8000ff8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	711a      	strb	r2, [r3, #4]
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff fe91 	bl	8002178 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fe87 	bl	800218c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	711a      	strb	r2, [r3, #4]
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f7ff ffd8 	bl	800248c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	711a      	strb	r2, [r3, #4]
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff ffd1 	bl	80024a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7ff ffc7 	bl	80024b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	711a      	strb	r2, [r3, #4]
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e08d      	b.n	8002662 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_DMA_Init+0x138>)
 800254e:	429a      	cmp	r2, r3
 8002550:	d80f      	bhi.n	8002572 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	4b45      	ldr	r3, [pc, #276]	; (8002670 <HAL_DMA_Init+0x13c>)
 800255a:	4413      	add	r3, r2
 800255c:	4a45      	ldr	r2, [pc, #276]	; (8002674 <HAL_DMA_Init+0x140>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	009a      	lsls	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a42      	ldr	r2, [pc, #264]	; (8002678 <HAL_DMA_Init+0x144>)
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
 8002570:	e00e      	b.n	8002590 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_DMA_Init+0x148>)
 800257a:	4413      	add	r3, r2
 800257c:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <HAL_DMA_Init+0x140>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	009a      	lsls	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a3c      	ldr	r2, [pc, #240]	; (8002680 <HAL_DMA_Init+0x14c>)
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f9b6 	bl	8002954 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f0:	d102      	bne.n	80025f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800260c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d010      	beq.n	8002638 <HAL_DMA_Init+0x104>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b04      	cmp	r3, #4
 800261c:	d80c      	bhi.n	8002638 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f9d6 	bl	80029d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	e008      	b.n	800264a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40020407 	.word	0x40020407
 8002670:	bffdfff8 	.word	0xbffdfff8
 8002674:	cccccccd 	.word	0xcccccccd
 8002678:	40020000 	.word	0x40020000
 800267c:	bffdfbf8 	.word	0xbffdfbf8
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_DMA_Start_IT+0x20>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e066      	b.n	8002772 <HAL_DMA_Start_IT+0xee>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d155      	bne.n	8002764 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f8fb 	bl	80028d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 020e 	orr.w	r2, r2, #14
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e00f      	b.n	800271c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0204 	bic.w	r2, r2, #4
 800270a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 020a 	orr.w	r2, r2, #10
 800271a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002738:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002750:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e005      	b.n	8002770 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800276c:	2302      	movs	r3, #2
 800276e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f003 031c 	and.w	r3, r3, #28
 800279a:	2204      	movs	r2, #4
 800279c:	409a      	lsls	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d026      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x7a>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d021      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d107      	bne.n	80027ce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0204 	bic.w	r2, r2, #4
 80027cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f003 021c 	and.w	r2, r3, #28
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2104      	movs	r1, #4
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d071      	beq.n	80028ce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	e06c      	b.n	80028ce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f003 031c 	and.w	r3, r3, #28
 80027fc:	2202      	movs	r2, #2
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d02e      	beq.n	8002866 <HAL_DMA_IRQHandler+0xec>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d029      	beq.n	8002866 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10b      	bne.n	8002838 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 020a 	bic.w	r2, r2, #10
 800282e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f003 021c 	and.w	r2, r3, #28
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2102      	movs	r1, #2
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d038      	beq.n	80028ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002864:	e033      	b.n	80028ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f003 031c 	and.w	r3, r3, #28
 800286e:	2208      	movs	r2, #8
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d02a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x156>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d025      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 020e 	bic.w	r2, r2, #14
 8002892:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	f003 021c 	and.w	r2, r3, #28
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
}
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028ee:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002900:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f003 021c 	and.w	r2, r3, #28
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d108      	bne.n	8002938 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002936:	e007      	b.n	8002948 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002964:	429a      	cmp	r2, r3
 8002966:	d80a      	bhi.n	800297e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002974:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6493      	str	r3, [r2, #72]	; 0x48
 800297c:	e007      	b.n	800298e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	009a      	lsls	r2, r3, #2
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002988:	4413      	add	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	3b08      	subs	r3, #8
 8002996:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40020407 	.word	0x40020407
 80029c4:	4002081c 	.word	0x4002081c
 80029c8:	cccccccd 	.word	0xcccccccd
 80029cc:	40020880 	.word	0x40020880

080029d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	461a      	mov	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2201      	movs	r2, #1
 80029fe:	409a      	lsls	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	1000823f 	.word	0x1000823f
 8002a14:	40020940 	.word	0x40020940

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a26:	e166      	b.n	8002cf6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8158 	beq.w	8002cf0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d005      	beq.n	8002a58 <HAL_GPIO_Init+0x40>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d130      	bne.n	8002aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a8e:	2201      	movs	r2, #1
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 0201 	and.w	r2, r3, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d017      	beq.n	8002af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d123      	bne.n	8002b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	6939      	ldr	r1, [r7, #16]
 8002b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0203 	and.w	r2, r3, #3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80b2 	beq.w	8002cf0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8c:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <HAL_GPIO_Init+0x2fc>)
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	4a60      	ldr	r2, [pc, #384]	; (8002d14 <HAL_GPIO_Init+0x2fc>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6613      	str	r3, [r2, #96]	; 0x60
 8002b98:	4b5e      	ldr	r3, [pc, #376]	; (8002d14 <HAL_GPIO_Init+0x2fc>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba4:	4a5c      	ldr	r2, [pc, #368]	; (8002d18 <HAL_GPIO_Init+0x300>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bce:	d02b      	beq.n	8002c28 <HAL_GPIO_Init+0x210>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a52      	ldr	r2, [pc, #328]	; (8002d1c <HAL_GPIO_Init+0x304>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d025      	beq.n	8002c24 <HAL_GPIO_Init+0x20c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a51      	ldr	r2, [pc, #324]	; (8002d20 <HAL_GPIO_Init+0x308>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d01f      	beq.n	8002c20 <HAL_GPIO_Init+0x208>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a50      	ldr	r2, [pc, #320]	; (8002d24 <HAL_GPIO_Init+0x30c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d019      	beq.n	8002c1c <HAL_GPIO_Init+0x204>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a4f      	ldr	r2, [pc, #316]	; (8002d28 <HAL_GPIO_Init+0x310>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_GPIO_Init+0x200>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a4e      	ldr	r2, [pc, #312]	; (8002d2c <HAL_GPIO_Init+0x314>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00d      	beq.n	8002c14 <HAL_GPIO_Init+0x1fc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a4d      	ldr	r2, [pc, #308]	; (8002d30 <HAL_GPIO_Init+0x318>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <HAL_GPIO_Init+0x1f8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a4c      	ldr	r2, [pc, #304]	; (8002d34 <HAL_GPIO_Init+0x31c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_GPIO_Init+0x1f4>
 8002c08:	2307      	movs	r3, #7
 8002c0a:	e00e      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	e00c      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c10:	2306      	movs	r3, #6
 8002c12:	e00a      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c14:	2305      	movs	r3, #5
 8002c16:	e008      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e004      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	f002 0203 	and.w	r2, r2, #3
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	4093      	lsls	r3, r2
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c3a:	4937      	ldr	r1, [pc, #220]	; (8002d18 <HAL_GPIO_Init+0x300>)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c48:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c6c:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c96:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <HAL_GPIO_Init+0x320>)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f ae91 	bne.w	8002a28 <HAL_GPIO_Init+0x10>
  }
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	48000400 	.word	0x48000400
 8002d20:	48000800 	.word	0x48000800
 8002d24:	48000c00 	.word	0x48000c00
 8002d28:	48001000 	.word	0x48001000
 8002d2c:	48001400 	.word	0x48001400
 8002d30:	48001800 	.word	0x48001800
 8002d34:	48001c00 	.word	0x48001c00
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d4a:	e0c9      	b.n	8002ee0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80bc 	beq.w	8002eda <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d62:	4a66      	ldr	r2, [pc, #408]	; (8002efc <HAL_GPIO_DeInit+0x1c0>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d8a:	d02b      	beq.n	8002de4 <HAL_GPIO_DeInit+0xa8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a5c      	ldr	r2, [pc, #368]	; (8002f00 <HAL_GPIO_DeInit+0x1c4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d025      	beq.n	8002de0 <HAL_GPIO_DeInit+0xa4>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a5b      	ldr	r2, [pc, #364]	; (8002f04 <HAL_GPIO_DeInit+0x1c8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01f      	beq.n	8002ddc <HAL_GPIO_DeInit+0xa0>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	; (8002f08 <HAL_GPIO_DeInit+0x1cc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d019      	beq.n	8002dd8 <HAL_GPIO_DeInit+0x9c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a59      	ldr	r2, [pc, #356]	; (8002f0c <HAL_GPIO_DeInit+0x1d0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <HAL_GPIO_DeInit+0x98>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a58      	ldr	r2, [pc, #352]	; (8002f10 <HAL_GPIO_DeInit+0x1d4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00d      	beq.n	8002dd0 <HAL_GPIO_DeInit+0x94>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a57      	ldr	r2, [pc, #348]	; (8002f14 <HAL_GPIO_DeInit+0x1d8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d007      	beq.n	8002dcc <HAL_GPIO_DeInit+0x90>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_GPIO_DeInit+0x1dc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_GPIO_DeInit+0x8c>
 8002dc4:	2307      	movs	r3, #7
 8002dc6:	e00e      	b.n	8002de6 <HAL_GPIO_DeInit+0xaa>
 8002dc8:	2308      	movs	r3, #8
 8002dca:	e00c      	b.n	8002de6 <HAL_GPIO_DeInit+0xaa>
 8002dcc:	2306      	movs	r3, #6
 8002dce:	e00a      	b.n	8002de6 <HAL_GPIO_DeInit+0xaa>
 8002dd0:	2305      	movs	r3, #5
 8002dd2:	e008      	b.n	8002de6 <HAL_GPIO_DeInit+0xaa>
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	e006      	b.n	8002de6 <HAL_GPIO_DeInit+0xaa>
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e004      	b.n	8002de6 <HAL_GPIO_DeInit+0xaa>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e002      	b.n	8002de6 <HAL_GPIO_DeInit+0xaa>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_GPIO_DeInit+0xaa>
 8002de4:	2300      	movs	r3, #0
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	f002 0203 	and.w	r2, r2, #3
 8002dec:	0092      	lsls	r2, r2, #2
 8002dee:	4093      	lsls	r3, r2
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d132      	bne.n	8002e5c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_GPIO_DeInit+0x1e0>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4947      	ldr	r1, [pc, #284]	; (8002f1c <HAL_GPIO_DeInit+0x1e0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002e04:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <HAL_GPIO_DeInit+0x1e0>)
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	4943      	ldr	r1, [pc, #268]	; (8002f1c <HAL_GPIO_DeInit+0x1e0>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002e12:	4b42      	ldr	r3, [pc, #264]	; (8002f1c <HAL_GPIO_DeInit+0x1e0>)
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4940      	ldr	r1, [pc, #256]	; (8002f1c <HAL_GPIO_DeInit+0x1e0>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002e20:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <HAL_GPIO_DeInit+0x1e0>)
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	493c      	ldr	r1, [pc, #240]	; (8002f1c <HAL_GPIO_DeInit+0x1e0>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e3e:	4a2f      	ldr	r2, [pc, #188]	; (8002efc <HAL_GPIO_DeInit+0x1c0>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	3302      	adds	r3, #2
 8002e46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	482b      	ldr	r0, [pc, #172]	; (8002efc <HAL_GPIO_DeInit+0x1c0>)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	400a      	ands	r2, r1
 8002e56:	3302      	adds	r3, #2
 8002e58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2103      	movs	r1, #3
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	08d2      	lsrs	r2, r2, #3
 8002e90:	4019      	ands	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3208      	adds	r2, #8
 8002e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2103      	movs	r1, #3
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f af2f 	bne.w	8002d4c <HAL_GPIO_DeInit+0x10>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40010000 	.word	0x40010000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	48000800 	.word	0x48000800
 8002f08:	48000c00 	.word	0x48000c00
 8002f0c:	48001000 	.word	0x48001000
 8002f10:	48001400 	.word	0x48001400
 8002f14:	48001800 	.word	0x48001800
 8002f18:	48001c00 	.word	0x48001c00
 8002f1c:	40010400 	.word	0x40010400

08002f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f30:	787b      	ldrb	r3, [r7, #1]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4013      	ands	r3, r2
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	43d9      	mvns	r1, r3
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	400b      	ands	r3, r1
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	619a      	str	r2, [r3, #24]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002f90:	f7fe fec2 	bl	8001d18 <HAL_GetTick>
 8002f94:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e092      	b.n	80030c8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 808b 	bne.w	80030c8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fd1a 	bl	80019ec <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002fb8:	f241 3188 	movw	r1, #5000	; 0x1388
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fad0 	bl	8003562 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	4b42      	ldr	r3, [pc, #264]	; (80030d4 <HAL_OSPI_Init+0x150>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68d1      	ldr	r1, [r2, #12]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6912      	ldr	r2, [r2, #16]
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0412      	lsls	r2, r2, #16
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6952      	ldr	r2, [r2, #20]
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	0212      	lsls	r2, r2, #8
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fe8:	4311      	orrs	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	69d2      	ldr	r2, [r2, #28]
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0412      	lsls	r2, r2, #16
 8003002:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	021a      	lsls	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2200      	movs	r2, #0
 8003028:	2120      	movs	r1, #32
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fddc 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d146      	bne.n	80030c8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003070:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d107      	bne.n	80030b0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0202 	orr.w	r2, r2, #2
 80030ae:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030b8:	d103      	bne.n	80030c2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
 80030c0:	e002      	b.n	80030c8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	f8e0f8f4 	.word	0xf8e0f8f4

080030d8 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	e015      	b.n	800311c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0202 	bic.w	r2, r2, #2
 800310e:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7fe fcd7 	bl	8001ac4 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b08a      	sub	sp, #40	; 0x28
 800312a:	af02      	add	r7, sp, #8
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003132:	f7fe fdf1 	bl	8001d18 <HAL_GetTick>
 8003136:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d104      	bne.n	8003154 <HAL_OSPI_Command+0x2e>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003152:	d10d      	bne.n	8003170 <HAL_OSPI_Command+0x4a>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b14      	cmp	r3, #20
 8003158:	d103      	bne.n	8003162 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d006      	beq.n	8003170 <HAL_OSPI_Command+0x4a>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b24      	cmp	r3, #36	; 0x24
 8003166:	d153      	bne.n	8003210 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d14f      	bne.n	8003210 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2200      	movs	r2, #0
 8003178:	2120      	movs	r1, #32
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fd34 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003184:	7ffb      	ldrb	r3, [r7, #31]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d148      	bne.n	800321c <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fd60 	bl	8003c58 <OSPI_ConfigCmd>
 8003198:	4603      	mov	r3, r0
 800319a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800319c:	7ffb      	ldrb	r3, [r7, #31]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d13c      	bne.n	800321c <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10e      	bne.n	80031c8 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2201      	movs	r2, #1
 80031b2:	2102      	movs	r1, #2
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fd17 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2202      	movs	r2, #2
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80031c6:	e029      	b.n	800321c <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2204      	movs	r2, #4
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80031d6:	e021      	b.n	800321c <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10b      	bne.n	80031f8 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	2b24      	cmp	r3, #36	; 0x24
 80031e6:	d103      	bne.n	80031f0 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2204      	movs	r2, #4
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80031ee:	e015      	b.n	800321c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2214      	movs	r2, #20
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80031f6:	e011      	b.n	800321c <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	2b14      	cmp	r3, #20
 80031fe:	d103      	bne.n	8003208 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2204      	movs	r2, #4
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003206:	e009      	b.n	800321c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2224      	movs	r2, #36	; 0x24
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800320e:	e005      	b.n	800321c <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2210      	movs	r2, #16
 8003218:	649a      	str	r2, [r3, #72]	; 0x48
 800321a:	e000      	b.n	800321e <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 800321c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800321e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7fe fd70 	bl	8001d18 <HAL_GetTick>
 8003238:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3350      	adds	r3, #80	; 0x50
 8003240:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d105      	bne.n	8003254 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2208      	movs	r2, #8
 8003250:	649a      	str	r2, [r3, #72]	; 0x48
 8003252:	e057      	b.n	8003304 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	2b04      	cmp	r3, #4
 800325a:	d14e      	bne.n	80032fa <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003284:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2201      	movs	r2, #1
 800328e:	2104      	movs	r1, #4
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fca9 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d113      	bne.n	80032c8 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1df      	bne.n	8003286 <HAL_OSPI_Transmit+0x5e>
 80032c6:	e000      	b.n	80032ca <HAL_OSPI_Transmit+0xa2>
          break;
 80032c8:	bf00      	nop

      if (status == HAL_OK)
 80032ca:	7ffb      	ldrb	r3, [r7, #31]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d119      	bne.n	8003304 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2201      	movs	r2, #1
 80032d8:	2102      	movs	r1, #2
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fc84 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80032e4:	7ffb      	ldrb	r3, [r7, #31]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2202      	movs	r2, #2
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2202      	movs	r2, #2
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
 80032f8:	e004      	b.n	8003304 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2210      	movs	r2, #16
 8003302:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003304:	7ffb      	ldrb	r3, [r7, #31]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b08c      	sub	sp, #48	; 0x30
 8003312:	af02      	add	r7, sp, #8
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800331a:	f7fe fcfd 	bl	8001d18 <HAL_GetTick>
 800331e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3350      	adds	r3, #80	; 0x50
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003338:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2208      	movs	r2, #8
 800334a:	649a      	str	r2, [r3, #72]	; 0x48
 800334c:	e07c      	b.n	8003448 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	2b04      	cmp	r3, #4
 8003354:	d172      	bne.n	800343c <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003382:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800338c:	d104      	bne.n	8003398 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	649a      	str	r2, [r3, #72]	; 0x48
 8003396:	e011      	b.n	80033bc <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80033a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	649a      	str	r2, [r3, #72]	; 0x48
 80033b0:	e004      	b.n	80033bc <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2201      	movs	r2, #1
 80033c4:	2106      	movs	r1, #6
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fc0e 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80033d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d114      	bne.n	8003404 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	1e5a      	subs	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1dc      	bne.n	80033bc <HAL_OSPI_Receive+0xae>
 8003402:	e000      	b.n	8003406 <HAL_OSPI_Receive+0xf8>
          break;
 8003404:	bf00      	nop

      if (status == HAL_OK)
 8003406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11c      	bne.n	8003448 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	2201      	movs	r2, #1
 8003416:	2102      	movs	r1, #2
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fbe5 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10d      	bne.n	8003448 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2202      	movs	r2, #2
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2202      	movs	r2, #2
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
 800343a:	e005      	b.n	8003448 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2210      	movs	r2, #16
 8003446:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800344c:	4618      	mov	r0, r3
 800344e:	3728      	adds	r7, #40	; 0x28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003460:	f7fe fc5a 	bl	8001d18 <HAL_GetTick>
 8003464:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003476:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	2b04      	cmp	r3, #4
 800347e:	d164      	bne.n	800354a <HAL_OSPI_AutoPolling+0xf6>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003488:	d15f      	bne.n	800354a <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2200      	movs	r2, #0
 8003492:	2120      	movs	r1, #32
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fba7 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d158      	bne.n	8003556 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	6852      	ldr	r2, [r2, #4]
 80034b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	6912      	ldr	r2, [r2, #16]
 80034c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	430b      	orrs	r3, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034e6:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f0:	d104      	bne.n	80034fc <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	649a      	str	r2, [r3, #72]	; 0x48
 80034fa:	e011      	b.n	8003520 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	649a      	str	r2, [r3, #72]	; 0x48
 8003514:	e004      	b.n	8003520 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2201      	movs	r2, #1
 8003528:	2108      	movs	r1, #8
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fb5c 	bl	8003be8 <OSPI_WaitFlagStateUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003534:	7ffb      	ldrb	r3, [r7, #31]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10d      	bne.n	8003556 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2208      	movs	r2, #8
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2202      	movs	r2, #2
 8003546:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003548:	e005      	b.n	8003556 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2210      	movs	r2, #16
 8003552:	649a      	str	r2, [r3, #72]	; 0x48
 8003554:	e000      	b.n	8003558 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003556:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003558:	7ffb      	ldrb	r3, [r7, #31]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b092      	sub	sp, #72	; 0x48
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <HAL_OSPIM_Config+0x40>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d105      	bne.n	80035ae <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80035ac:	e004      	b.n	80035b8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80035ae:	2301      	movs	r3, #1
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80035be:	e01f      	b.n	8003600 <HAL_OSPIM_Config+0x80>
 80035c0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80035c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035c8:	3301      	adds	r3, #1
 80035ca:	b2d8      	uxtb	r0, r3
 80035cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80035d0:	f107 0114 	add.w	r1, r7, #20
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	4619      	mov	r1, r3
 80035e0:	f000 fc9c 	bl	8003f1c <OSPIM_GetConfig>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2208      	movs	r2, #8
 80035f4:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80035f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035fa:	3301      	adds	r3, #1
 80035fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003600:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003604:	2b01      	cmp	r3, #1
 8003606:	d9dd      	bls.n	80035c4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003608:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 82de 	bne.w	8003bce <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003612:	4bc6      	ldr	r3, [pc, #792]	; (800392c <HAL_OSPIM_Config+0x3ac>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800361e:	4bc3      	ldr	r3, [pc, #780]	; (800392c <HAL_OSPIM_Config+0x3ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4ac2      	ldr	r2, [pc, #776]	; (800392c <HAL_OSPIM_Config+0x3ac>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800362a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003636:	4bbe      	ldr	r3, [pc, #760]	; (8003930 <HAL_OSPIM_Config+0x3b0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003642:	4bbb      	ldr	r3, [pc, #748]	; (8003930 <HAL_OSPIM_Config+0x3b0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4aba      	ldr	r2, [pc, #744]	; (8003930 <HAL_OSPIM_Config+0x3b0>)
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800364e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800365a:	49b6      	ldr	r1, [pc, #728]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 800365c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	3348      	adds	r3, #72	; 0x48
 8003668:	443b      	add	r3, r7
 800366a:	3b2c      	subs	r3, #44	; 0x2c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3b01      	subs	r3, #1
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	48af      	ldr	r0, [pc, #700]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 8003678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	3348      	adds	r3, #72	; 0x48
 8003684:	443b      	add	r3, r7
 8003686:	3b2c      	subs	r3, #44	; 0x2c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3b01      	subs	r3, #1
 800368c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4403      	add	r3, r0
 8003694:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3348      	adds	r3, #72	; 0x48
 80036a2:	443b      	add	r3, r7
 80036a4:	3b34      	subs	r3, #52	; 0x34
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a1 	beq.w	80037f0 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80036ae:	49a1      	ldr	r1, [pc, #644]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 80036b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	3348      	adds	r3, #72	; 0x48
 80036bc:	443b      	add	r3, r7
 80036be:	3b34      	subs	r3, #52	; 0x34
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	489a      	ldr	r0, [pc, #616]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 80036cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	3348      	adds	r3, #72	; 0x48
 80036d8:	443b      	add	r3, r7
 80036da:	3b34      	subs	r3, #52	; 0x34
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3b01      	subs	r3, #1
 80036e0:	f021 0201 	bic.w	r2, r1, #1
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4403      	add	r3, r0
 80036e8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80036ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	3348      	adds	r3, #72	; 0x48
 80036f6:	443b      	add	r3, r7
 80036f8:	3b30      	subs	r3, #48	; 0x30
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01d      	beq.n	800373c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003700:	498c      	ldr	r1, [pc, #560]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 8003702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	3348      	adds	r3, #72	; 0x48
 800370e:	443b      	add	r3, r7
 8003710:	3b30      	subs	r3, #48	; 0x30
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3b01      	subs	r3, #1
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	4885      	ldr	r0, [pc, #532]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 800371e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	3348      	adds	r3, #72	; 0x48
 800372a:	443b      	add	r3, r7
 800372c:	3b30      	subs	r3, #48	; 0x30
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	f021 0210 	bic.w	r2, r1, #16
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4403      	add	r3, r0
 800373a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800373c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	3348      	adds	r3, #72	; 0x48
 8003748:	443b      	add	r3, r7
 800374a:	3b28      	subs	r3, #40	; 0x28
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d021      	beq.n	8003796 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003752:	4978      	ldr	r1, [pc, #480]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 8003754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3348      	adds	r3, #72	; 0x48
 8003760:	443b      	add	r3, r7
 8003762:	3b28      	subs	r3, #40	; 0x28
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3b01      	subs	r3, #1
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	4870      	ldr	r0, [pc, #448]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 8003774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3348      	adds	r3, #72	; 0x48
 8003780:	443b      	add	r3, r7
 8003782:	3b28      	subs	r3, #40	; 0x28
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4403      	add	r3, r0
 8003794:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	3348      	adds	r3, #72	; 0x48
 80037a2:	443b      	add	r3, r7
 80037a4:	3b24      	subs	r3, #36	; 0x24
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d021      	beq.n	80037f0 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80037ac:	4961      	ldr	r1, [pc, #388]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 80037ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	3348      	adds	r3, #72	; 0x48
 80037ba:	443b      	add	r3, r7
 80037bc:	3b24      	subs	r3, #36	; 0x24
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	4859      	ldr	r0, [pc, #356]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 80037ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	3348      	adds	r3, #72	; 0x48
 80037da:	443b      	add	r3, r7
 80037dc:	3b24      	subs	r3, #36	; 0x24
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4403      	add	r3, r0
 80037ee:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6819      	ldr	r1, [r3, #0]
 80037f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	3348      	adds	r3, #72	; 0x48
 8003802:	443b      	add	r3, r7
 8003804:	3b34      	subs	r3, #52	; 0x34
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4299      	cmp	r1, r3
 800380a:	d038      	beq.n	800387e <HAL_OSPIM_Config+0x2fe>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	3348      	adds	r3, #72	; 0x48
 800381e:	443b      	add	r3, r7
 8003820:	3b30      	subs	r3, #48	; 0x30
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4299      	cmp	r1, r3
 8003826:	d02a      	beq.n	800387e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	3348      	adds	r3, #72	; 0x48
 800383a:	443b      	add	r3, r7
 800383c:	3b2c      	subs	r3, #44	; 0x2c
 800383e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003840:	4299      	cmp	r1, r3
 8003842:	d01c      	beq.n	800387e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	68d9      	ldr	r1, [r3, #12]
 8003848:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3348      	adds	r3, #72	; 0x48
 8003856:	443b      	add	r3, r7
 8003858:	3b28      	subs	r3, #40	; 0x28
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4299      	cmp	r1, r3
 800385e:	d00e      	beq.n	800387e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6919      	ldr	r1, [r3, #16]
 8003864:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3348      	adds	r3, #72	; 0x48
 8003872:	443b      	add	r3, r7
 8003874:	3b24      	subs	r3, #36	; 0x24
 8003876:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003878:	4299      	cmp	r1, r3
 800387a:	f040 80d3 	bne.w	8003a24 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800387e:	492d      	ldr	r1, [pc, #180]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 8003880:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3348      	adds	r3, #72	; 0x48
 800388e:	443b      	add	r3, r7
 8003890:	3b34      	subs	r3, #52	; 0x34
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3b01      	subs	r3, #1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	4825      	ldr	r0, [pc, #148]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 800389e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	3348      	adds	r3, #72	; 0x48
 80038ac:	443b      	add	r3, r7
 80038ae:	3b34      	subs	r3, #52	; 0x34
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	f021 0201 	bic.w	r2, r1, #1
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4403      	add	r3, r0
 80038bc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80038be:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	3348      	adds	r3, #72	; 0x48
 80038cc:	443b      	add	r3, r7
 80038ce:	3b30      	subs	r3, #48	; 0x30
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01f      	beq.n	8003916 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80038d6:	4917      	ldr	r1, [pc, #92]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 80038d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	3348      	adds	r3, #72	; 0x48
 80038e6:	443b      	add	r3, r7
 80038e8:	3b30      	subs	r3, #48	; 0x30
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	480f      	ldr	r0, [pc, #60]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 80038f6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3348      	adds	r3, #72	; 0x48
 8003904:	443b      	add	r3, r7
 8003906:	3b30      	subs	r3, #48	; 0x30
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3b01      	subs	r3, #1
 800390c:	f021 0210 	bic.w	r2, r1, #16
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4403      	add	r3, r0
 8003914:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003916:	4907      	ldr	r1, [pc, #28]	; (8003934 <HAL_OSPIM_Config+0x3b4>)
 8003918:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	3348      	adds	r3, #72	; 0x48
 8003926:	443b      	add	r3, r7
 8003928:	3b2c      	subs	r3, #44	; 0x2c
 800392a:	e005      	b.n	8003938 <HAL_OSPIM_Config+0x3b8>
 800392c:	a0001000 	.word	0xa0001000
 8003930:	a0001400 	.word	0xa0001400
 8003934:	50061c00 	.word	0x50061c00
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3b01      	subs	r3, #1
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	48a6      	ldr	r0, [pc, #664]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003944:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	3348      	adds	r3, #72	; 0x48
 8003952:	443b      	add	r3, r7
 8003954:	3b2c      	subs	r3, #44	; 0x2c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3b01      	subs	r3, #1
 800395a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4403      	add	r3, r0
 8003962:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003964:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	3348      	adds	r3, #72	; 0x48
 8003972:	443b      	add	r3, r7
 8003974:	3b28      	subs	r3, #40	; 0x28
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d023      	beq.n	80039c4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800397c:	4997      	ldr	r1, [pc, #604]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 800397e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	3348      	adds	r3, #72	; 0x48
 800398c:	443b      	add	r3, r7
 800398e:	3b28      	subs	r3, #40	; 0x28
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3b01      	subs	r3, #1
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	488f      	ldr	r0, [pc, #572]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 80039a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	3348      	adds	r3, #72	; 0x48
 80039ae:	443b      	add	r3, r7
 80039b0:	3b28      	subs	r3, #40	; 0x28
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4403      	add	r3, r0
 80039c2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80039c4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	3348      	adds	r3, #72	; 0x48
 80039d2:	443b      	add	r3, r7
 80039d4:	3b24      	subs	r3, #36	; 0x24
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d023      	beq.n	8003a24 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80039dc:	497f      	ldr	r1, [pc, #508]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 80039de:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3348      	adds	r3, #72	; 0x48
 80039ec:	443b      	add	r3, r7
 80039ee:	3b24      	subs	r3, #36	; 0x24
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	4877      	ldr	r0, [pc, #476]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003a00:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	3348      	adds	r3, #72	; 0x48
 8003a0e:	443b      	add	r3, r7
 8003a10:	3b24      	subs	r3, #36	; 0x24
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4403      	add	r3, r0
 8003a22:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003a24:	4a6d      	ldr	r2, [pc, #436]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a38:	025b      	lsls	r3, r3, #9
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	4967      	ldr	r1, [pc, #412]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003a4e:	4a63      	ldr	r2, [pc, #396]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 0203 	bic.w	r2, r3, #3
 8003a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	431a      	orrs	r2, r3
 8003a66:	495d      	ldr	r1, [pc, #372]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d014      	beq.n	8003aaa <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003a80:	4a56      	ldr	r2, [pc, #344]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a94:	015b      	lsls	r3, r3, #5
 8003a96:	431a      	orrs	r2, r3
 8003a98:	4950      	ldr	r1, [pc, #320]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f042 0210 	orr.w	r2, r2, #16
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d019      	beq.n	8003aea <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003ab6:	4a49      	ldr	r2, [pc, #292]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ace:	049b      	lsls	r3, r3, #18
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	4942      	ldr	r1, [pc, #264]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	e01c      	b.n	8003b24 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d018      	beq.n	8003b24 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003af2:	4a3a      	ldr	r2, [pc, #232]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0a:	069b      	lsls	r3, r3, #26
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	4933      	ldr	r1, [pc, #204]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d019      	beq.n	8003b64 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003b30:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	049b      	lsls	r3, r3, #18
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	4923      	ldr	r1, [pc, #140]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	e01c      	b.n	8003b9e <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d018      	beq.n	8003b9e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b84:	069b      	lsls	r3, r3, #26
 8003b86:	431a      	orrs	r2, r3
 8003b88:	4914      	ldr	r1, [pc, #80]	; (8003bdc <HAL_OSPIM_Config+0x65c>)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003b9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <HAL_OSPIM_Config+0x660>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <HAL_OSPIM_Config+0x660>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003bb6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_OSPIM_Config+0x664>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_OSPIM_Config+0x664>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003bce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3748      	adds	r7, #72	; 0x48
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	50061c00 	.word	0x50061c00
 8003be0:	a0001000 	.word	0xa0001000
 8003be4:	a0001400 	.word	0xa0001400

08003be8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003bf8:	e01a      	b.n	8003c30 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c00:	d016      	beq.n	8003c30 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fe f889 	bl	8001d18 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e00e      	b.n	8003c4e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1d6      	bne.n	8003bfa <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c74:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d114      	bne.n	8003cc6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ca4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003cae:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003cb8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e013      	b.n	8003cee <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003cce:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003cd8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003ce2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	4319      	orrs	r1, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	430b      	orrs	r3, r1
 8003d24:	431a      	orrs	r2, r3
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 021f 	bic.w	r2, r3, #31
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	431a      	orrs	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3a01      	subs	r2, #1
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8099 	beq.w	8003e94 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d055      	beq.n	8003e16 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d01e      	beq.n	8003db0 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b68      	ldr	r3, [pc, #416]	; (8003f18 <OSPI_ConfigCmd+0x2c0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	68d1      	ldr	r1, [r2, #12]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	6952      	ldr	r2, [r2, #20]
 8003d82:	4311      	orrs	r1, r2
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	6912      	ldr	r2, [r2, #16]
 8003d88:	4311      	orrs	r1, r2
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	69d2      	ldr	r2, [r2, #28]
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d94:	4311      	orrs	r1, r2
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	6a12      	ldr	r2, [r2, #32]
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da0:	4311      	orrs	r1, r2
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003da6:	430a      	orrs	r2, r1
 8003da8:	431a      	orrs	r2, r3
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	e028      	b.n	8003e02 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	68d1      	ldr	r1, [r2, #12]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	6952      	ldr	r2, [r2, #20]
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	6912      	ldr	r2, [r2, #16]
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	69d2      	ldr	r2, [r2, #28]
 8003dd0:	4311      	orrs	r1, r2
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dd6:	4311      	orrs	r1, r2
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	6a12      	ldr	r2, [r2, #32]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	431a      	orrs	r2, r3
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dec:	d109      	bne.n	8003e02 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d105      	bne.n	8003e02 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	6992      	ldr	r2, [r2, #24]
 8003e12:	649a      	str	r2, [r3, #72]	; 0x48
 8003e14:	e078      	b.n	8003f08 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d017      	beq.n	8003e4e <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003e26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	68d1      	ldr	r1, [r2, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	6952      	ldr	r2, [r2, #20]
 8003e32:	4311      	orrs	r1, r2
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	6912      	ldr	r2, [r2, #16]
 8003e38:	4311      	orrs	r1, r2
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e44:	430a      	orrs	r2, r1
 8003e46:	431a      	orrs	r2, r3
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e01d      	b.n	8003e8a <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68d9      	ldr	r1, [r3, #12]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	4319      	orrs	r1, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	431a      	orrs	r2, r3
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e74:	d109      	bne.n	8003e8a <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d105      	bne.n	8003e8a <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e039      	b.n	8003f08 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d030      	beq.n	8003efe <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003eac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	69d1      	ldr	r1, [r2, #28]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	6a12      	ldr	r2, [r2, #32]
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ec4:	4311      	orrs	r1, r2
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e00e      	b.n	8003ef2 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	4319      	orrs	r1, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	430b      	orrs	r3, r1
 8003eec:	431a      	orrs	r2, r3
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	6992      	ldr	r2, [r2, #24]
 8003efa:	649a      	str	r2, [r3, #72]	; 0x48
 8003efc:	e004      	b.n	8003f08 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2208      	movs	r2, #8
 8003f06:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3724      	adds	r7, #36	; 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	f0ffc0c0 	.word	0xf0ffc0c0

08003f1c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <OSPIM_GetConfig+0x26>
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d802      	bhi.n	8003f42 <OSPIM_GetConfig+0x26>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
 8003f46:	e08e      	b.n	8004066 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2200      	movs	r2, #0
 8003f52:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d101      	bne.n	8003f70 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003f6c:	4b41      	ldr	r3, [pc, #260]	; (8004074 <OSPIM_GetConfig+0x158>)
 8003f6e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e074      	b.n	8004060 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003f76:	4a40      	ldr	r2, [pc, #256]	; (8004078 <OSPIM_GetConfig+0x15c>)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4053      	eors	r3, r2
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4053      	eors	r3, r2
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4053      	eors	r3, r2
 8003fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d018      	beq.n	800401e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4053      	eors	r3, r2
 8003ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d111      	bne.n	800401e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d106      	bne.n	8004012 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3301      	adds	r3, #1
 8004008:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	e005      	b.n	800401e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3301      	adds	r3, #1
 8004016:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d018      	beq.n	800405a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4053      	eors	r3, r2
 800402e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d111      	bne.n	800405a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
 8004044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	611a      	str	r2, [r3, #16]
 800404c:	e005      	b.n	800405a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3301      	adds	r3, #1
 8004052:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3301      	adds	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d987      	bls.n	8003f76 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
}
 8004068:	4618      	mov	r0, r3
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	04040222 	.word	0x04040222
 8004078:	50061c00 	.word	0x50061c00

0800407c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408c:	d102      	bne.n	8004094 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800408e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004092:	e00b      	b.n	80040ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004094:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a2:	d102      	bne.n	80040aa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80040a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a8:	e000      	b.n	80040ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80040aa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40007000 	.word	0x40007000

080040bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d141      	bne.n	800414e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ca:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d131      	bne.n	800413c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040de:	4a46      	ldr	r2, [pc, #280]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e8:	4b43      	ldr	r3, [pc, #268]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040f0:	4a41      	ldr	r2, [pc, #260]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040f8:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2232      	movs	r2, #50	; 0x32
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a3f      	ldr	r2, [pc, #252]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	0c9b      	lsrs	r3, r3, #18
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410e:	e002      	b.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004116:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d102      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f2      	bne.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800412a:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d158      	bne.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e057      	b.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800413c:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004142:	4a2d      	ldr	r2, [pc, #180]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800414c:	e04d      	b.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004154:	d141      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004156:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800415e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004162:	d131      	bne.n	80041c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004164:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416a:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004174:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004182:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004184:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2232      	movs	r2, #50	; 0x32
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0c9b      	lsrs	r3, r3, #18
 8004196:	3301      	adds	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800419a:	e002      	b.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3b01      	subs	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d102      	bne.n	80041b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f2      	bne.n	800419c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c2:	d112      	bne.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e011      	b.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041d8:	e007      	b.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041e2:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40007000 	.word	0x40007000
 80041fc:	20000000 	.word	0x20000000
 8004200:	431bde83 	.word	0x431bde83

08004204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f000 bc08 	b.w	8004a28 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004218:	4b96      	ldr	r3, [pc, #600]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004222:	4b94      	ldr	r3, [pc, #592]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80e4 	beq.w	8004402 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <HAL_RCC_OscConfig+0x4c>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	f040 808b 	bne.w	800435e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b01      	cmp	r3, #1
 800424c:	f040 8087 	bne.w	800435e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004250:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_OscConfig+0x64>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e3df      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	4b81      	ldr	r3, [pc, #516]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_RCC_OscConfig+0x7e>
 8004278:	4b7e      	ldr	r3, [pc, #504]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004280:	e005      	b.n	800428e <HAL_RCC_OscConfig+0x8a>
 8004282:	4b7c      	ldr	r3, [pc, #496]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428e:	4293      	cmp	r3, r2
 8004290:	d223      	bcs.n	80042da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fda0 	bl	8004ddc <RCC_SetFlashLatencyFromMSIRange>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e3c0      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a6:	4b73      	ldr	r3, [pc, #460]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a72      	ldr	r2, [pc, #456]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042ac:	f043 0308 	orr.w	r3, r3, #8
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b70      	ldr	r3, [pc, #448]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	496d      	ldr	r1, [pc, #436]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c4:	4b6b      	ldr	r3, [pc, #428]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	4968      	ldr	r1, [pc, #416]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
 80042d8:	e025      	b.n	8004326 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042da:	4b66      	ldr	r3, [pc, #408]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a65      	ldr	r2, [pc, #404]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042e0:	f043 0308 	orr.w	r3, r3, #8
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b63      	ldr	r3, [pc, #396]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	4960      	ldr	r1, [pc, #384]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f8:	4b5e      	ldr	r3, [pc, #376]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	495b      	ldr	r1, [pc, #364]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fd60 	bl	8004ddc <RCC_SetFlashLatencyFromMSIRange>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e380      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004326:	f000 fcc1 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 800432a:	4602      	mov	r2, r0
 800432c:	4b51      	ldr	r3, [pc, #324]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	4950      	ldr	r1, [pc, #320]	; (8004478 <HAL_RCC_OscConfig+0x274>)
 8004338:	5ccb      	ldrb	r3, [r1, r3]
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	4a4e      	ldr	r2, [pc, #312]	; (800447c <HAL_RCC_OscConfig+0x278>)
 8004344:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004346:	4b4e      	ldr	r3, [pc, #312]	; (8004480 <HAL_RCC_OscConfig+0x27c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fd fc94 	bl	8001c78 <HAL_InitTick>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d052      	beq.n	8004400 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	e364      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d032      	beq.n	80043cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004366:	4b43      	ldr	r3, [pc, #268]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a42      	ldr	r2, [pc, #264]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004372:	f7fd fcd1 	bl	8001d18 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800437a:	f7fd fccd 	bl	8001d18 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e34d      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800438c:	4b39      	ldr	r3, [pc, #228]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004398:	4b36      	ldr	r3, [pc, #216]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a35      	ldr	r2, [pc, #212]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800439e:	f043 0308 	orr.w	r3, r3, #8
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b33      	ldr	r3, [pc, #204]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	4930      	ldr	r1, [pc, #192]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b6:	4b2f      	ldr	r3, [pc, #188]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	492b      	ldr	r1, [pc, #172]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
 80043ca:	e01a      	b.n	8004402 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043cc:	4b29      	ldr	r3, [pc, #164]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a28      	ldr	r2, [pc, #160]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043d8:	f7fd fc9e 	bl	8001d18 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043e0:	f7fd fc9a 	bl	8001d18 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e31a      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x1dc>
 80043fe:	e000      	b.n	8004402 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004400:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d073      	beq.n	80044f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d005      	beq.n	8004420 <HAL_RCC_OscConfig+0x21c>
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b0c      	cmp	r3, #12
 8004418:	d10e      	bne.n	8004438 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d10b      	bne.n	8004438 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d063      	beq.n	80044f4 <HAL_RCC_OscConfig+0x2f0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d15f      	bne.n	80044f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e2f7      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004440:	d106      	bne.n	8004450 <HAL_RCC_OscConfig+0x24c>
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e025      	b.n	800449c <HAL_RCC_OscConfig+0x298>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004458:	d114      	bne.n	8004484 <HAL_RCC_OscConfig+0x280>
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a05      	ldr	r2, [pc, #20]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a02      	ldr	r2, [pc, #8]	; (8004474 <HAL_RCC_OscConfig+0x270>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e013      	b.n	800449c <HAL_RCC_OscConfig+0x298>
 8004474:	40021000 	.word	0x40021000
 8004478:	08006400 	.word	0x08006400
 800447c:	20000000 	.word	0x20000000
 8004480:	20000004 	.word	0x20000004
 8004484:	4ba0      	ldr	r3, [pc, #640]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a9f      	ldr	r2, [pc, #636]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b9d      	ldr	r3, [pc, #628]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a9c      	ldr	r2, [pc, #624]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fd fc38 	bl	8001d18 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fd fc34 	bl	8001d18 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e2b4      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044be:	4b92      	ldr	r3, [pc, #584]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x2a8>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fc24 	bl	8001d18 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fc20 	bl	8001d18 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e2a0      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044e6:	4b88      	ldr	r3, [pc, #544]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x2d0>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d060      	beq.n	80045c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d005      	beq.n	8004514 <HAL_RCC_OscConfig+0x310>
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d119      	bne.n	8004542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d116      	bne.n	8004542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004514:	4b7c      	ldr	r3, [pc, #496]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_OscConfig+0x328>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e27d      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452c:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	4973      	ldr	r1, [pc, #460]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004540:	e040      	b.n	80045c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d023      	beq.n	8004592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454a:	4b6f      	ldr	r3, [pc, #444]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6e      	ldr	r2, [pc, #440]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd fbdf 	bl	8001d18 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7fd fbdb 	bl	8001d18 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e25b      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004570:	4b65      	ldr	r3, [pc, #404]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b62      	ldr	r3, [pc, #392]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	495f      	ldr	r1, [pc, #380]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
 8004590:	e018      	b.n	80045c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b5d      	ldr	r3, [pc, #372]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a5c      	ldr	r2, [pc, #368]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800459c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fd fbbb 	bl	8001d18 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a6:	f7fd fbb7 	bl	8001d18 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e237      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d03c      	beq.n	800464a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01c      	beq.n	8004612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d8:	4b4b      	ldr	r3, [pc, #300]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80045da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045de:	4a4a      	ldr	r2, [pc, #296]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd fb96 	bl	8001d18 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fd fb92 	bl	8001d18 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e212      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ef      	beq.n	80045f0 <HAL_RCC_OscConfig+0x3ec>
 8004610:	e01b      	b.n	800464a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004612:	4b3d      	ldr	r3, [pc, #244]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004618:	4a3b      	ldr	r2, [pc, #236]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fd fb79 	bl	8001d18 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462a:	f7fd fb75 	bl	8001d18 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e1f5      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800463c:	4b32      	ldr	r3, [pc, #200]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ef      	bne.n	800462a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80a6 	beq.w	80047a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004658:	2300      	movs	r3, #0
 800465a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10d      	bne.n	8004684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	4b27      	ldr	r3, [pc, #156]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004672:	6593      	str	r3, [r2, #88]	; 0x58
 8004674:	4b24      	ldr	r3, [pc, #144]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004680:	2301      	movs	r3, #1
 8004682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004684:	4b21      	ldr	r3, [pc, #132]	; (800470c <HAL_RCC_OscConfig+0x508>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d118      	bne.n	80046c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004690:	4b1e      	ldr	r3, [pc, #120]	; (800470c <HAL_RCC_OscConfig+0x508>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1d      	ldr	r2, [pc, #116]	; (800470c <HAL_RCC_OscConfig+0x508>)
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469c:	f7fd fb3c 	bl	8001d18 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a4:	f7fd fb38 	bl	8001d18 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e1b8      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <HAL_RCC_OscConfig+0x508>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d108      	bne.n	80046dc <HAL_RCC_OscConfig+0x4d8>
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	4a0d      	ldr	r2, [pc, #52]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046da:	e029      	b.n	8004730 <HAL_RCC_OscConfig+0x52c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b05      	cmp	r3, #5
 80046e2:	d115      	bne.n	8004710 <HAL_RCC_OscConfig+0x50c>
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	4a07      	ldr	r2, [pc, #28]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	4a03      	ldr	r2, [pc, #12]	; (8004708 <HAL_RCC_OscConfig+0x504>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004704:	e014      	b.n	8004730 <HAL_RCC_OscConfig+0x52c>
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	40007000 	.word	0x40007000
 8004710:	4b9d      	ldr	r3, [pc, #628]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	4a9c      	ldr	r2, [pc, #624]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004720:	4b99      	ldr	r3, [pc, #612]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	4a98      	ldr	r2, [pc, #608]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d016      	beq.n	8004766 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fd faee 	bl	8001d18 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fd faea 	bl	8001d18 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e168      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004756:	4b8c      	ldr	r3, [pc, #560]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0ed      	beq.n	8004740 <HAL_RCC_OscConfig+0x53c>
 8004764:	e015      	b.n	8004792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fd fad7 	bl	8001d18 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fd fad3 	bl	8001d18 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	; 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e151      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004784:	4b80      	ldr	r3, [pc, #512]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ed      	bne.n	800476e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004792:	7ffb      	ldrb	r3, [r7, #31]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b7b      	ldr	r3, [pc, #492]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	4a7a      	ldr	r2, [pc, #488]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d03c      	beq.n	800482a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01c      	beq.n	80047f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047b8:	4b73      	ldr	r3, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80047ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047be:	4a72      	ldr	r2, [pc, #456]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd faa6 	bl	8001d18 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047d0:	f7fd faa2 	bl	8001d18 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e122      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047e2:	4b69      	ldr	r3, [pc, #420]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80047e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ef      	beq.n	80047d0 <HAL_RCC_OscConfig+0x5cc>
 80047f0:	e01b      	b.n	800482a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80047f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f8:	4a63      	ldr	r2, [pc, #396]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004802:	f7fd fa89 	bl	8001d18 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800480a:	f7fd fa85 	bl	8001d18 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e105      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800481c:	4b5a      	ldr	r3, [pc, #360]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 800481e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ef      	bne.n	800480a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80f9 	beq.w	8004a26 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	2b02      	cmp	r3, #2
 800483a:	f040 80cf 	bne.w	80049dc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800483e:	4b52      	ldr	r3, [pc, #328]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0203 	and.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	429a      	cmp	r2, r3
 8004850:	d12c      	bne.n	80048ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	3b01      	subs	r3, #1
 800485e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d123      	bne.n	80048ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d11b      	bne.n	80048ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d113      	bne.n	80048ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	3b01      	subs	r3, #1
 8004892:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d109      	bne.n	80048ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	3b01      	subs	r3, #1
 80048a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d071      	beq.n	8004990 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d068      	beq.n	8004984 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048b2:	4b35      	ldr	r3, [pc, #212]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048be:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0ac      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048ce:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2d      	ldr	r2, [pc, #180]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80048d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048da:	f7fd fa1d 	bl	8001d18 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fd fa19 	bl	8001d18 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e099      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004900:	4b21      	ldr	r3, [pc, #132]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <HAL_RCC_OscConfig+0x788>)
 8004906:	4013      	ands	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004910:	3a01      	subs	r2, #1
 8004912:	0112      	lsls	r2, r2, #4
 8004914:	4311      	orrs	r1, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800491a:	0212      	lsls	r2, r2, #8
 800491c:	4311      	orrs	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004922:	0852      	lsrs	r2, r2, #1
 8004924:	3a01      	subs	r2, #1
 8004926:	0552      	lsls	r2, r2, #21
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800492e:	0852      	lsrs	r2, r2, #1
 8004930:	3a01      	subs	r2, #1
 8004932:	0652      	lsls	r2, r2, #25
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800493a:	06d2      	lsls	r2, r2, #27
 800493c:	430a      	orrs	r2, r1
 800493e:	4912      	ldr	r1, [pc, #72]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004940:	4313      	orrs	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0f      	ldr	r2, [pc, #60]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004950:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800495c:	f7fd f9dc 	bl	8001d18 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd f9d8 	bl	8001d18 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e058      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	4b04      	ldr	r3, [pc, #16]	; (8004988 <HAL_RCC_OscConfig+0x784>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004982:	e050      	b.n	8004a26 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e04f      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
 8004988:	40021000 	.word	0x40021000
 800498c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d144      	bne.n	8004a26 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800499c:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 80049a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a8:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 80049ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049b4:	f7fd f9b0 	bl	8001d18 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd f9ac 	bl	8001d18 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e02c      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x7b8>
 80049da:	e024      	b.n	8004a26 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d01f      	beq.n	8004a22 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 80049e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fd f993 	bl	8001d18 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f6:	f7fd f98f 	bl	8001d18 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	4905      	ldr	r1, [pc, #20]	; (8004a30 <HAL_RCC_OscConfig+0x82c>)
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_OscConfig+0x830>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
 8004a20:	e001      	b.n	8004a26 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	feeefffc 	.word	0xfeeefffc

08004a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e11d      	b.n	8004c8c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a50:	4b90      	ldr	r3, [pc, #576]	; (8004c94 <HAL_RCC_ClockConfig+0x25c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d910      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <HAL_RCC_ClockConfig+0x25c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 020f 	bic.w	r2, r3, #15
 8004a66:	498b      	ldr	r1, [pc, #556]	; (8004c94 <HAL_RCC_ClockConfig+0x25c>)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b89      	ldr	r3, [pc, #548]	; (8004c94 <HAL_RCC_ClockConfig+0x25c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e105      	b.n	8004c8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d010      	beq.n	8004aae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	4b81      	ldr	r3, [pc, #516]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d908      	bls.n	8004aae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9c:	4b7e      	ldr	r3, [pc, #504]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	497b      	ldr	r1, [pc, #492]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d079      	beq.n	8004bae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d11e      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac2:	4b75      	ldr	r3, [pc, #468]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0dc      	b.n	8004c8c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004ad2:	f000 f9dd 	bl	8004e90 <RCC_GetSysClockFreqFromPLLSource>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4a70      	ldr	r2, [pc, #448]	; (8004c9c <HAL_RCC_ClockConfig+0x264>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d946      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ade:	4b6e      	ldr	r3, [pc, #440]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d140      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aea:	4b6b      	ldr	r3, [pc, #428]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af2:	4a69      	ldr	r2, [pc, #420]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e035      	b.n	8004b6c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b08:	4b63      	ldr	r3, [pc, #396]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d115      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0b9      	b.n	8004c8c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d107      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b20:	4b5d      	ldr	r3, [pc, #372]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0ad      	b.n	8004c8c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b30:	4b59      	ldr	r3, [pc, #356]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0a5      	b.n	8004c8c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004b40:	f000 f8b4 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004b44:	4603      	mov	r3, r0
 8004b46:	4a55      	ldr	r2, [pc, #340]	; (8004c9c <HAL_RCC_ClockConfig+0x264>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d90f      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b4c:	4b52      	ldr	r3, [pc, #328]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b58:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b60:	4a4d      	ldr	r2, [pc, #308]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b6c:	4b4a      	ldr	r3, [pc, #296]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 0203 	bic.w	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4947      	ldr	r1, [pc, #284]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7e:	f7fd f8cb 	bl	8001d18 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b86:	f7fd f8c7 	bl	8001d18 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e077      	b.n	8004c8c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9c:	4b3e      	ldr	r3, [pc, #248]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 020c 	and.w	r2, r3, #12
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d1eb      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b80      	cmp	r3, #128	; 0x80
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bb4:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4a37      	ldr	r2, [pc, #220]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bbe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d010      	beq.n	8004bee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d208      	bcs.n	8004bee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bdc:	4b2e      	ldr	r3, [pc, #184]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	492b      	ldr	r1, [pc, #172]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bee:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <HAL_RCC_ClockConfig+0x25c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d210      	bcs.n	8004c1e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfc:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <HAL_RCC_ClockConfig+0x25c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 020f 	bic.w	r2, r3, #15
 8004c04:	4923      	ldr	r1, [pc, #140]	; (8004c94 <HAL_RCC_ClockConfig+0x25c>)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <HAL_RCC_ClockConfig+0x25c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e036      	b.n	8004c8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	4918      	ldr	r1, [pc, #96]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4910      	ldr	r1, [pc, #64]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c5c:	f000 f826 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_RCC_ClockConfig+0x260>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	490c      	ldr	r1, [pc, #48]	; (8004ca0 <HAL_RCC_ClockConfig+0x268>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <HAL_RCC_ClockConfig+0x26c>)
 8004c7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <HAL_RCC_ClockConfig+0x270>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fc fff9 	bl	8001c78 <HAL_InitTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]

  return status;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40022000 	.word	0x40022000
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	04c4b400 	.word	0x04c4b400
 8004ca0:	08006400 	.word	0x08006400
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	20000004 	.word	0x20000004

08004cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b089      	sub	sp, #36	; 0x24
 8004cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cba:	4b3e      	ldr	r3, [pc, #248]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc4:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d121      	bne.n	8004d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d11e      	bne.n	8004d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ce0:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cec:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	e005      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cfc:	4b2d      	ldr	r3, [pc, #180]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d08:	4a2b      	ldr	r2, [pc, #172]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10d      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d102      	bne.n	8004d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d24:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	e004      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d134      	bne.n	8004da4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d003      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d003      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0xac>
 8004d50:	e005      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d52:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8004d54:	617b      	str	r3, [r7, #20]
      break;
 8004d56:	e005      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d58:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d5a:	617b      	str	r3, [r7, #20]
      break;
 8004d5c:	e002      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	617b      	str	r3, [r7, #20]
      break;
 8004d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	3301      	adds	r3, #1
 8004d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	fb03 f202 	mul.w	r2, r3, r2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	0e5b      	lsrs	r3, r3, #25
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	3301      	adds	r3, #1
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004da4:	69bb      	ldr	r3, [r7, #24]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3724      	adds	r7, #36	; 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
 8004db8:	08006410 	.word	0x08006410
 8004dbc:	00f42400 	.word	0x00f42400
 8004dc0:	007a1200 	.word	0x007a1200

08004dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dca:	681b      	ldr	r3, [r3, #0]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000000 	.word	0x20000000

08004ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004de8:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004df4:	f7ff f942 	bl	800407c <HAL_PWREx_GetVoltageRange>
 8004df8:	6178      	str	r0, [r7, #20]
 8004dfa:	e014      	b.n	8004e26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dfc:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e06:	6593      	str	r3, [r2, #88]	; 0x58
 8004e08:	4b1f      	ldr	r3, [pc, #124]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e14:	f7ff f932 	bl	800407c <HAL_PWREx_GetVoltageRange>
 8004e18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d10b      	bne.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b80      	cmp	r3, #128	; 0x80
 8004e32:	d913      	bls.n	8004e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2ba0      	cmp	r3, #160	; 0xa0
 8004e38:	d902      	bls.n	8004e40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e00d      	b.n	8004e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e40:	2301      	movs	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e00a      	b.n	8004e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4a:	d902      	bls.n	8004e52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	e004      	b.n	8004e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b70      	cmp	r3, #112	; 0x70
 8004e56:	d101      	bne.n	8004e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e58:	2301      	movs	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 020f 	bic.w	r2, r3, #15
 8004e64:	4909      	ldr	r1, [pc, #36]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d001      	beq.n	8004e7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40022000 	.word	0x40022000

08004e90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e96:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d00b      	beq.n	8004ebe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d825      	bhi.n	8004ef8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d008      	beq.n	8004ec4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d11f      	bne.n	8004ef8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004eb8:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004eba:	613b      	str	r3, [r7, #16]
    break;
 8004ebc:	e01f      	b.n	8004efe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004ebe:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ec0:	613b      	str	r3, [r7, #16]
    break;
 8004ec2:	e01c      	b.n	8004efe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ec4:	4b21      	ldr	r3, [pc, #132]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ed0:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e005      	b.n	8004eec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ee0:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004eec:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef4:	613b      	str	r3, [r7, #16]
    break;
 8004ef6:	e002      	b.n	8004efe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]
    break;
 8004efc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	3301      	adds	r3, #1
 8004f0a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	fb03 f202 	mul.w	r2, r3, r2
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f22:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f24:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0e5b      	lsrs	r3, r3, #25
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004f3e:	683b      	ldr	r3, [r7, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	00f42400 	.word	0x00f42400
 8004f54:	007a1200 	.word	0x007a1200
 8004f58:	08006410 	.word	0x08006410

08004f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f64:	2300      	movs	r3, #0
 8004f66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d040      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d02a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f80:	2b80      	cmp	r3, #128	; 0x80
 8004f82:	d825      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f84:	2b60      	cmp	r3, #96	; 0x60
 8004f86:	d026      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d821      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d006      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d81d      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f9c:	e018      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f9e:	4b89      	ldr	r3, [pc, #548]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4a88      	ldr	r2, [pc, #544]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004faa:	e015      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fb02 	bl	80055bc <RCCEx_PLLSAI1_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fbc:	e00c      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3320      	adds	r3, #32
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fbed 	bl	80057a4 <RCCEx_PLLSAI2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fce:	e003      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	74fb      	strb	r3, [r7, #19]
      break;
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fde:	4b79      	ldr	r3, [pc, #484]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fec:	4975      	ldr	r1, [pc, #468]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ff4:	e001      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d047      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d030      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005014:	d82a      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800501a:	d02a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800501c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005020:	d824      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005026:	d008      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502c:	d81e      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005036:	d010      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005038:	e018      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800503a:	4b62      	ldr	r3, [pc, #392]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4a61      	ldr	r2, [pc, #388]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005044:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005046:	e015      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3304      	adds	r3, #4
 800504c:	2100      	movs	r1, #0
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fab4 	bl	80055bc <RCCEx_PLLSAI1_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005058:	e00c      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3320      	adds	r3, #32
 800505e:	2100      	movs	r1, #0
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fb9f 	bl	80057a4 <RCCEx_PLLSAI2_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	74fb      	strb	r3, [r7, #19]
      break;
 8005070:	e000      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800507a:	4b52      	ldr	r3, [pc, #328]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800507c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	494e      	ldr	r1, [pc, #312]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005090:	e001      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005092:	7cfb      	ldrb	r3, [r7, #19]
 8005094:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 809f 	beq.w	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a4:	2300      	movs	r3, #0
 80050a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050a8:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	4b41      	ldr	r3, [pc, #260]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	4a40      	ldr	r2, [pc, #256]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c8:	6593      	str	r3, [r2, #88]	; 0x58
 80050ca:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d6:	2301      	movs	r3, #1
 80050d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a3a      	ldr	r2, [pc, #232]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80050e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050e6:	f7fc fe17 	bl	8001d18 <HAL_GetTick>
 80050ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050ec:	e009      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ee:	f7fc fe13 	bl	8001d18 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d902      	bls.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	74fb      	strb	r3, [r7, #19]
        break;
 8005100:	e005      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005102:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0ef      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d15b      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005114:	4b2b      	ldr	r3, [pc, #172]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01f      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	429a      	cmp	r2, r3
 8005130:	d019      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800513e:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800514e:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800515e:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d016      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fc fdd2 	bl	8001d18 <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005176:	e00b      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005178:	f7fc fdce 	bl	8001d18 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	; 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d902      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	74fb      	strb	r3, [r7, #19]
            break;
 800518e:	e006      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ec      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800519e:	7cfb      	ldrb	r3, [r7, #19]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10c      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b4:	4903      	ldr	r1, [pc, #12]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051bc:	e008      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	74bb      	strb	r3, [r7, #18]
 80051c2:	e005      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051d0:	7c7b      	ldrb	r3, [r7, #17]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4ba0      	ldr	r3, [pc, #640]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	4a9f      	ldr	r2, [pc, #636]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ee:	4b9a      	ldr	r3, [pc, #616]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f023 0203 	bic.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fc:	4996      	ldr	r1, [pc, #600]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005210:	4b91      	ldr	r3, [pc, #580]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f023 020c 	bic.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	498e      	ldr	r1, [pc, #568]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005232:	4b89      	ldr	r3, [pc, #548]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	4985      	ldr	r1, [pc, #532]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005254:	4b80      	ldr	r3, [pc, #512]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005262:	497d      	ldr	r1, [pc, #500]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005276:	4b78      	ldr	r3, [pc, #480]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005284:	4974      	ldr	r1, [pc, #464]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005298:	4b6f      	ldr	r3, [pc, #444]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a6:	496c      	ldr	r1, [pc, #432]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ba:	4b67      	ldr	r3, [pc, #412]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052c8:	4963      	ldr	r1, [pc, #396]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052dc:	4b5e      	ldr	r3, [pc, #376]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ea:	495b      	ldr	r1, [pc, #364]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052fe:	4b56      	ldr	r3, [pc, #344]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	4952      	ldr	r1, [pc, #328]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005320:	4b4d      	ldr	r3, [pc, #308]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	494a      	ldr	r1, [pc, #296]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005342:	4b45      	ldr	r3, [pc, #276]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	4941      	ldr	r1, [pc, #260]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005364:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005372:	4939      	ldr	r1, [pc, #228]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d028      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005394:	4930      	ldr	r1, [pc, #192]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a4:	d106      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a6:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b0:	60d3      	str	r3, [r2, #12]
 80053b2:	e011      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053bc:	d10c      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3304      	adds	r3, #4
 80053c2:	2101      	movs	r1, #1
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 f8f9 	bl	80055bc <RCCEx_PLLSAI1_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053ce:	7cfb      	ldrb	r3, [r7, #19]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80053d4:	7cfb      	ldrb	r3, [r7, #19]
 80053d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d04d      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ec:	d108      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80053ee:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f4:	4a18      	ldr	r2, [pc, #96]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80053fe:	e012      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005400:	4b15      	ldr	r3, [pc, #84]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005406:	4a14      	ldr	r2, [pc, #80]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541e:	490e      	ldr	r1, [pc, #56]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800542a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800542e:	d106      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a08      	ldr	r2, [pc, #32]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543a:	60d3      	str	r3, [r2, #12]
 800543c:	e020      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005446:	d109      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a02      	ldr	r2, [pc, #8]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005452:	60d3      	str	r3, [r2, #12]
 8005454:	e014      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005464:	d10c      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3304      	adds	r3, #4
 800546a:	2101      	movs	r1, #1
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f8a5 	bl	80055bc <RCCEx_PLLSAI1_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005476:	7cfb      	ldrb	r3, [r7, #19]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d028      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800548c:	4b4a      	ldr	r3, [pc, #296]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549a:	4947      	ldr	r1, [pc, #284]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054aa:	d106      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ac:	4b42      	ldr	r3, [pc, #264]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4a41      	ldr	r2, [pc, #260]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b6:	60d3      	str	r3, [r2, #12]
 80054b8:	e011      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054c2:	d10c      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	2101      	movs	r1, #1
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f876 	bl	80055bc <RCCEx_PLLSAI1_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054d4:	7cfb      	ldrb	r3, [r7, #19]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01e      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ea:	4b33      	ldr	r3, [pc, #204]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fa:	492f      	ldr	r1, [pc, #188]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800550c:	d10c      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	2102      	movs	r1, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f851 	bl	80055bc <RCCEx_PLLSAI1_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005534:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800553a:	f023 0204 	bic.w	r2, r3, #4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005544:	491c      	ldr	r1, [pc, #112]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005558:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800555e:	f023 0218 	bic.w	r2, r3, #24
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	4913      	ldr	r1, [pc, #76]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d017      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800558c:	490a      	ldr	r1, [pc, #40]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800559e:	d105      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000

080055bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ca:	4b72      	ldr	r3, [pc, #456]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00e      	beq.n	80055f4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055d6:	4b6f      	ldr	r3, [pc, #444]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 0203 	and.w	r2, r3, #3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d103      	bne.n	80055ee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
       ||
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d142      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
 80055f2:	e03f      	b.n	8005674 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d018      	beq.n	800562e <RCCEx_PLLSAI1_Config+0x72>
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d825      	bhi.n	800564c <RCCEx_PLLSAI1_Config+0x90>
 8005600:	2b01      	cmp	r3, #1
 8005602:	d002      	beq.n	800560a <RCCEx_PLLSAI1_Config+0x4e>
 8005604:	2b02      	cmp	r3, #2
 8005606:	d009      	beq.n	800561c <RCCEx_PLLSAI1_Config+0x60>
 8005608:	e020      	b.n	800564c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800560a:	4b62      	ldr	r3, [pc, #392]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d11d      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800561a:	e01a      	b.n	8005652 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800561c:	4b5d      	ldr	r3, [pc, #372]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	2b00      	cmp	r3, #0
 8005626:	d116      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800562c:	e013      	b.n	8005656 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800562e:	4b59      	ldr	r3, [pc, #356]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10f      	bne.n	800565a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800563a:	4b56      	ldr	r3, [pc, #344]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800564a:	e006      	b.n	800565a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
      break;
 8005650:	e004      	b.n	800565c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800565a:	bf00      	nop
    }

    if(status == HAL_OK)
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d108      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005662:	4b4c      	ldr	r3, [pc, #304]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f023 0203 	bic.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4949      	ldr	r1, [pc, #292]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005670:	4313      	orrs	r3, r2
 8005672:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 8086 	bne.w	8005788 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800567c:	4b45      	ldr	r3, [pc, #276]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a44      	ldr	r2, [pc, #272]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005682:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005688:	f7fc fb46 	bl	8001d18 <HAL_GetTick>
 800568c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800568e:	e009      	b.n	80056a4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005690:	f7fc fb42 	bl	8001d18 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d902      	bls.n	80056a4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	73fb      	strb	r3, [r7, #15]
        break;
 80056a2:	e005      	b.n	80056b0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056a4:	4b3b      	ldr	r3, [pc, #236]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1ef      	bne.n	8005690 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d168      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d113      	bne.n	80056e4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056bc:	4b35      	ldr	r3, [pc, #212]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	4b35      	ldr	r3, [pc, #212]	; (8005798 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6892      	ldr	r2, [r2, #8]
 80056c8:	0211      	lsls	r1, r2, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68d2      	ldr	r2, [r2, #12]
 80056ce:	06d2      	lsls	r2, r2, #27
 80056d0:	4311      	orrs	r1, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6852      	ldr	r2, [r2, #4]
 80056d6:	3a01      	subs	r2, #1
 80056d8:	0112      	lsls	r2, r2, #4
 80056da:	430a      	orrs	r2, r1
 80056dc:	492d      	ldr	r1, [pc, #180]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	610b      	str	r3, [r1, #16]
 80056e2:	e02d      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d115      	bne.n	8005716 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ea:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	4b2b      	ldr	r3, [pc, #172]	; (800579c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6892      	ldr	r2, [r2, #8]
 80056f6:	0211      	lsls	r1, r2, #8
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6912      	ldr	r2, [r2, #16]
 80056fc:	0852      	lsrs	r2, r2, #1
 80056fe:	3a01      	subs	r2, #1
 8005700:	0552      	lsls	r2, r2, #21
 8005702:	4311      	orrs	r1, r2
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6852      	ldr	r2, [r2, #4]
 8005708:	3a01      	subs	r2, #1
 800570a:	0112      	lsls	r2, r2, #4
 800570c:	430a      	orrs	r2, r1
 800570e:	4921      	ldr	r1, [pc, #132]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005710:	4313      	orrs	r3, r2
 8005712:	610b      	str	r3, [r1, #16]
 8005714:	e014      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005716:	4b1f      	ldr	r3, [pc, #124]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6892      	ldr	r2, [r2, #8]
 8005722:	0211      	lsls	r1, r2, #8
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6952      	ldr	r2, [r2, #20]
 8005728:	0852      	lsrs	r2, r2, #1
 800572a:	3a01      	subs	r2, #1
 800572c:	0652      	lsls	r2, r2, #25
 800572e:	4311      	orrs	r1, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6852      	ldr	r2, [r2, #4]
 8005734:	3a01      	subs	r2, #1
 8005736:	0112      	lsls	r2, r2, #4
 8005738:	430a      	orrs	r2, r1
 800573a:	4916      	ldr	r1, [pc, #88]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005740:	4b14      	ldr	r3, [pc, #80]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800574a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574c:	f7fc fae4 	bl	8001d18 <HAL_GetTick>
 8005750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005752:	e009      	b.n	8005768 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005754:	f7fc fae0 	bl	8001d18 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d902      	bls.n	8005768 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	73fb      	strb	r3, [r7, #15]
          break;
 8005766:	e005      	b.n	8005774 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ef      	beq.n	8005754 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	4904      	ldr	r1, [pc, #16]	; (8005794 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000
 8005798:	07ff800f 	.word	0x07ff800f
 800579c:	ff9f800f 	.word	0xff9f800f
 80057a0:	f9ff800f 	.word	0xf9ff800f

080057a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057b2:	4b72      	ldr	r3, [pc, #456]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00e      	beq.n	80057dc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057be:	4b6f      	ldr	r3, [pc, #444]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0203 	and.w	r2, r3, #3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d103      	bne.n	80057d6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
       ||
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d142      	bne.n	800585c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
 80057da:	e03f      	b.n	800585c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d018      	beq.n	8005816 <RCCEx_PLLSAI2_Config+0x72>
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d825      	bhi.n	8005834 <RCCEx_PLLSAI2_Config+0x90>
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d002      	beq.n	80057f2 <RCCEx_PLLSAI2_Config+0x4e>
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d009      	beq.n	8005804 <RCCEx_PLLSAI2_Config+0x60>
 80057f0:	e020      	b.n	8005834 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057f2:	4b62      	ldr	r3, [pc, #392]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11d      	bne.n	800583a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005802:	e01a      	b.n	800583a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005804:	4b5d      	ldr	r3, [pc, #372]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d116      	bne.n	800583e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005814:	e013      	b.n	800583e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005816:	4b59      	ldr	r3, [pc, #356]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005822:	4b56      	ldr	r3, [pc, #344]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005832:	e006      	b.n	8005842 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
      break;
 8005838:	e004      	b.n	8005844 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800583a:	bf00      	nop
 800583c:	e002      	b.n	8005844 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005842:	bf00      	nop
    }

    if(status == HAL_OK)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800584a:	4b4c      	ldr	r3, [pc, #304]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f023 0203 	bic.w	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4949      	ldr	r1, [pc, #292]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005858:	4313      	orrs	r3, r2
 800585a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 8086 	bne.w	8005970 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005864:	4b45      	ldr	r3, [pc, #276]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a44      	ldr	r2, [pc, #272]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 800586a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005870:	f7fc fa52 	bl	8001d18 <HAL_GetTick>
 8005874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005876:	e009      	b.n	800588c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005878:	f7fc fa4e 	bl	8001d18 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d902      	bls.n	800588c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	73fb      	strb	r3, [r7, #15]
        break;
 800588a:	e005      	b.n	8005898 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800588c:	4b3b      	ldr	r3, [pc, #236]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1ef      	bne.n	8005878 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d168      	bne.n	8005970 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d113      	bne.n	80058cc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058a4:	4b35      	ldr	r3, [pc, #212]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <RCCEx_PLLSAI2_Config+0x1dc>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6892      	ldr	r2, [r2, #8]
 80058b0:	0211      	lsls	r1, r2, #8
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d2      	ldr	r2, [r2, #12]
 80058b6:	06d2      	lsls	r2, r2, #27
 80058b8:	4311      	orrs	r1, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6852      	ldr	r2, [r2, #4]
 80058be:	3a01      	subs	r2, #1
 80058c0:	0112      	lsls	r2, r2, #4
 80058c2:	430a      	orrs	r2, r1
 80058c4:	492d      	ldr	r1, [pc, #180]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	614b      	str	r3, [r1, #20]
 80058ca:	e02d      	b.n	8005928 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d115      	bne.n	80058fe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d2:	4b2a      	ldr	r3, [pc, #168]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <RCCEx_PLLSAI2_Config+0x1e0>)
 80058d8:	4013      	ands	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6892      	ldr	r2, [r2, #8]
 80058de:	0211      	lsls	r1, r2, #8
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6912      	ldr	r2, [r2, #16]
 80058e4:	0852      	lsrs	r2, r2, #1
 80058e6:	3a01      	subs	r2, #1
 80058e8:	0552      	lsls	r2, r2, #21
 80058ea:	4311      	orrs	r1, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6852      	ldr	r2, [r2, #4]
 80058f0:	3a01      	subs	r2, #1
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	430a      	orrs	r2, r1
 80058f6:	4921      	ldr	r1, [pc, #132]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	614b      	str	r3, [r1, #20]
 80058fc:	e014      	b.n	8005928 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	4b21      	ldr	r3, [pc, #132]	; (8005988 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005904:	4013      	ands	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6892      	ldr	r2, [r2, #8]
 800590a:	0211      	lsls	r1, r2, #8
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6952      	ldr	r2, [r2, #20]
 8005910:	0852      	lsrs	r2, r2, #1
 8005912:	3a01      	subs	r2, #1
 8005914:	0652      	lsls	r2, r2, #25
 8005916:	4311      	orrs	r1, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6852      	ldr	r2, [r2, #4]
 800591c:	3a01      	subs	r2, #1
 800591e:	0112      	lsls	r2, r2, #4
 8005920:	430a      	orrs	r2, r1
 8005922:	4916      	ldr	r1, [pc, #88]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005924:	4313      	orrs	r3, r2
 8005926:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a13      	ldr	r2, [pc, #76]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 800592e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005934:	f7fc f9f0 	bl	8001d18 <HAL_GetTick>
 8005938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800593a:	e009      	b.n	8005950 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800593c:	f7fc f9ec 	bl	8001d18 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d902      	bls.n	8005950 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	73fb      	strb	r3, [r7, #15]
          break;
 800594e:	e005      	b.n	800595c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ef      	beq.n	800593c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005964:	695a      	ldr	r2, [r3, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	4904      	ldr	r1, [pc, #16]	; (800597c <RCCEx_PLLSAI2_Config+0x1d8>)
 800596c:	4313      	orrs	r3, r2
 800596e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	07ff800f 	.word	0x07ff800f
 8005984:	ff9f800f 	.word	0xff9f800f
 8005988:	f9ff800f 	.word	0xf9ff800f

0800598c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e049      	b.n	8005a32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fc f8aa 	bl	8001b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4619      	mov	r1, r3
 80059ca:	4610      	mov	r0, r2
 80059cc:	f000 fac0 	bl	8005f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d001      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e04f      	b.n	8005af4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a23      	ldr	r2, [pc, #140]	; (8005b00 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01d      	beq.n	8005ab2 <HAL_TIM_Base_Start_IT+0x76>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7e:	d018      	beq.n	8005ab2 <HAL_TIM_Base_Start_IT+0x76>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIM_Base_Start_IT+0x76>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIM_Base_Start_IT+0x76>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <HAL_TIM_Base_Start_IT+0xd0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_Base_Start_IT+0x76>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <HAL_TIM_Base_Start_IT+0xd4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIM_Base_Start_IT+0x76>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d115      	bne.n	8005ade <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <HAL_TIM_Base_Start_IT+0xdc>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d015      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0xb4>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aca:	d011      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005adc:	e008      	b.n	8005af0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e000      	b.n	8005af2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	00010007 	.word	0x00010007

08005b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d122      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0202 	mvn.w	r2, #2
 8005b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9d8 	bl	8005f14 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f9ca 	bl	8005f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f9db 	bl	8005f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d122      	bne.n	8005bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d11b      	bne.n	8005bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0204 	mvn.w	r2, #4
 8005b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9ae 	bl	8005f14 <HAL_TIM_IC_CaptureCallback>
 8005bb8:	e005      	b.n	8005bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9a0 	bl	8005f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f9b1 	bl	8005f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d122      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d11b      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0208 	mvn.w	r2, #8
 8005bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f984 	bl	8005f14 <HAL_TIM_IC_CaptureCallback>
 8005c0c:	e005      	b.n	8005c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f976 	bl	8005f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f987 	bl	8005f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0310 	and.w	r3, r3, #16
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d122      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d11b      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0210 	mvn.w	r2, #16
 8005c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f95a 	bl	8005f14 <HAL_TIM_IC_CaptureCallback>
 8005c60:	e005      	b.n	8005c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f94c 	bl	8005f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f95d 	bl	8005f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10e      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d107      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0201 	mvn.w	r2, #1
 8005c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f926 	bl	8005eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	2b80      	cmp	r3, #128	; 0x80
 8005cac:	d10e      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d107      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fb08 	bl	80062dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cda:	d10e      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce6:	2b80      	cmp	r3, #128	; 0x80
 8005ce8:	d107      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fafb 	bl	80062f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d10e      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d107      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f90b 	bl	8005f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d10e      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d107      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0220 	mvn.w	r2, #32
 8005d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fabb 	bl	80062c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_TIM_ConfigClockSource+0x1c>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0b6      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x18a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db2:	d03e      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0xd8>
 8005db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db8:	f200 8087 	bhi.w	8005eca <HAL_TIM_ConfigClockSource+0x170>
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	f000 8086 	beq.w	8005ed0 <HAL_TIM_ConfigClockSource+0x176>
 8005dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc8:	d87f      	bhi.n	8005eca <HAL_TIM_ConfigClockSource+0x170>
 8005dca:	2b70      	cmp	r3, #112	; 0x70
 8005dcc:	d01a      	beq.n	8005e04 <HAL_TIM_ConfigClockSource+0xaa>
 8005dce:	2b70      	cmp	r3, #112	; 0x70
 8005dd0:	d87b      	bhi.n	8005eca <HAL_TIM_ConfigClockSource+0x170>
 8005dd2:	2b60      	cmp	r3, #96	; 0x60
 8005dd4:	d050      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x11e>
 8005dd6:	2b60      	cmp	r3, #96	; 0x60
 8005dd8:	d877      	bhi.n	8005eca <HAL_TIM_ConfigClockSource+0x170>
 8005dda:	2b50      	cmp	r3, #80	; 0x50
 8005ddc:	d03c      	beq.n	8005e58 <HAL_TIM_ConfigClockSource+0xfe>
 8005dde:	2b50      	cmp	r3, #80	; 0x50
 8005de0:	d873      	bhi.n	8005eca <HAL_TIM_ConfigClockSource+0x170>
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d058      	beq.n	8005e98 <HAL_TIM_ConfigClockSource+0x13e>
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d86f      	bhi.n	8005eca <HAL_TIM_ConfigClockSource+0x170>
 8005dea:	2b30      	cmp	r3, #48	; 0x30
 8005dec:	d064      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x15e>
 8005dee:	2b30      	cmp	r3, #48	; 0x30
 8005df0:	d86b      	bhi.n	8005eca <HAL_TIM_ConfigClockSource+0x170>
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d060      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x15e>
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d867      	bhi.n	8005eca <HAL_TIM_ConfigClockSource+0x170>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d05c      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x15e>
 8005dfe:	2b10      	cmp	r3, #16
 8005e00:	d05a      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0x15e>
 8005e02:	e062      	b.n	8005eca <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6899      	ldr	r1, [r3, #8]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f000 f9b0 	bl	8006178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]
      break;
 8005e30:	e04f      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6899      	ldr	r1, [r3, #8]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f000 f999 	bl	8006178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e54:	609a      	str	r2, [r3, #8]
      break;
 8005e56:	e03c      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	6859      	ldr	r1, [r3, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	461a      	mov	r2, r3
 8005e66:	f000 f90d 	bl	8006084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2150      	movs	r1, #80	; 0x50
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f966 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005e76:	e02c      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6859      	ldr	r1, [r3, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	461a      	mov	r2, r3
 8005e86:	f000 f92c 	bl	80060e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2160      	movs	r1, #96	; 0x60
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 f956 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005e96:	e01c      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6859      	ldr	r1, [r3, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f000 f8ed 	bl	8006084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2140      	movs	r1, #64	; 0x40
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f946 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005eb6:	e00c      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f000 f93d 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005ec8:	e003      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ece:	e000      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ed0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a40      	ldr	r2, [pc, #256]	; (8006064 <TIM_Base_SetConfig+0x114>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6e:	d00f      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3d      	ldr	r2, [pc, #244]	; (8006068 <TIM_Base_SetConfig+0x118>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3c      	ldr	r2, [pc, #240]	; (800606c <TIM_Base_SetConfig+0x11c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d007      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3b      	ldr	r2, [pc, #236]	; (8006070 <TIM_Base_SetConfig+0x120>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <TIM_Base_SetConfig+0x124>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d108      	bne.n	8005fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2f      	ldr	r2, [pc, #188]	; (8006064 <TIM_Base_SetConfig+0x114>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01f      	beq.n	8005fea <TIM_Base_SetConfig+0x9a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d01b      	beq.n	8005fea <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2c      	ldr	r2, [pc, #176]	; (8006068 <TIM_Base_SetConfig+0x118>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d017      	beq.n	8005fea <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2b      	ldr	r2, [pc, #172]	; (800606c <TIM_Base_SetConfig+0x11c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2a      	ldr	r2, [pc, #168]	; (8006070 <TIM_Base_SetConfig+0x120>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00f      	beq.n	8005fea <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a29      	ldr	r2, [pc, #164]	; (8006074 <TIM_Base_SetConfig+0x124>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_Base_SetConfig+0x9a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a28      	ldr	r2, [pc, #160]	; (8006078 <TIM_Base_SetConfig+0x128>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a27      	ldr	r2, [pc, #156]	; (800607c <TIM_Base_SetConfig+0x12c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_Base_SetConfig+0x9a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a26      	ldr	r2, [pc, #152]	; (8006080 <TIM_Base_SetConfig+0x130>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d108      	bne.n	8005ffc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a10      	ldr	r2, [pc, #64]	; (8006064 <TIM_Base_SetConfig+0x114>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00f      	beq.n	8006048 <TIM_Base_SetConfig+0xf8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a12      	ldr	r2, [pc, #72]	; (8006074 <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00b      	beq.n	8006048 <TIM_Base_SetConfig+0xf8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a11      	ldr	r2, [pc, #68]	; (8006078 <TIM_Base_SetConfig+0x128>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d007      	beq.n	8006048 <TIM_Base_SetConfig+0xf8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a10      	ldr	r2, [pc, #64]	; (800607c <TIM_Base_SetConfig+0x12c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d003      	beq.n	8006048 <TIM_Base_SetConfig+0xf8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <TIM_Base_SetConfig+0x130>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d103      	bne.n	8006050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	615a      	str	r2, [r3, #20]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40012c00 	.word	0x40012c00
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40013400 	.word	0x40013400
 8006078:	40014000 	.word	0x40014000
 800607c:	40014400 	.word	0x40014400
 8006080:	40014800 	.word	0x40014800

08006084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f023 0201 	bic.w	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f023 030a 	bic.w	r3, r3, #10
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b087      	sub	sp, #28
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0210 	bic.w	r2, r3, #16
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800610c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800611e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	f043 0307 	orr.w	r3, r3, #7
 8006164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	021a      	lsls	r2, r3, #8
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	431a      	orrs	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e068      	b.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a2e      	ldr	r2, [pc, #184]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a2d      	ldr	r2, [pc, #180]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d108      	bne.n	8006216 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800620a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01d      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006242:	d018      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a14      	ldr	r2, [pc, #80]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d10c      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	4313      	orrs	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40013400 	.word	0x40013400
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40014000 	.word	0x40014000

080062c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <arm_sin_f32>:
 8006304:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006384 <arm_sin_f32+0x80>
 8006308:	ee20 0a27 	vmul.f32	s0, s0, s15
 800630c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006314:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006318:	d504      	bpl.n	8006324 <arm_sin_f32+0x20>
 800631a:	ee17 3a90 	vmov	r3, s15
 800631e:	3b01      	subs	r3, #1
 8006320:	ee07 3a90 	vmov	s15, r3
 8006324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006328:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006388 <arm_sin_f32+0x84>
 800632c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006330:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006334:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006338:	ee17 3a90 	vmov	r3, s15
 800633c:	b29b      	uxth	r3, r3
 800633e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006342:	d21a      	bcs.n	800637a <arm_sin_f32+0x76>
 8006344:	ee07 3a90 	vmov	s15, r3
 8006348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634c:	1c59      	adds	r1, r3, #1
 800634e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006352:	4a0e      	ldr	r2, [pc, #56]	; (800638c <arm_sin_f32+0x88>)
 8006354:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006358:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800635c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006360:	ed93 7a00 	vldr	s14, [r3]
 8006364:	edd2 6a00 	vldr	s13, [r2]
 8006368:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800636c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006374:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006378:	4770      	bx	lr
 800637a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800637e:	2101      	movs	r1, #1
 8006380:	2300      	movs	r3, #0
 8006382:	e7e6      	b.n	8006352 <arm_sin_f32+0x4e>
 8006384:	3e22f983 	.word	0x3e22f983
 8006388:	44000000 	.word	0x44000000
 800638c:	08006440 	.word	0x08006440

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	4d0d      	ldr	r5, [pc, #52]	; (80063c8 <__libc_init_array+0x38>)
 8006394:	4c0d      	ldr	r4, [pc, #52]	; (80063cc <__libc_init_array+0x3c>)
 8006396:	1b64      	subs	r4, r4, r5
 8006398:	10a4      	asrs	r4, r4, #2
 800639a:	2600      	movs	r6, #0
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	4d0b      	ldr	r5, [pc, #44]	; (80063d0 <__libc_init_array+0x40>)
 80063a2:	4c0c      	ldr	r4, [pc, #48]	; (80063d4 <__libc_init_array+0x44>)
 80063a4:	f000 f820 	bl	80063e8 <_init>
 80063a8:	1b64      	subs	r4, r4, r5
 80063aa:	10a4      	asrs	r4, r4, #2
 80063ac:	2600      	movs	r6, #0
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	08006c44 	.word	0x08006c44
 80063cc:	08006c44 	.word	0x08006c44
 80063d0:	08006c44 	.word	0x08006c44
 80063d4:	08006c48 	.word	0x08006c48

080063d8 <memset>:
 80063d8:	4402      	add	r2, r0
 80063da:	4603      	mov	r3, r0
 80063dc:	4293      	cmp	r3, r2
 80063de:	d100      	bne.n	80063e2 <memset+0xa>
 80063e0:	4770      	bx	lr
 80063e2:	f803 1b01 	strb.w	r1, [r3], #1
 80063e6:	e7f9      	b.n	80063dc <memset+0x4>

080063e8 <_init>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr

080063f4 <_fini>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	bf00      	nop
 80063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fa:	bc08      	pop	{r3}
 80063fc:	469e      	mov	lr, r3
 80063fe:	4770      	bx	lr
