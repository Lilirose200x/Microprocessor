
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048cc  080048cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048cc  080048cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048cc  080048cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000159b8  2000000c  080048e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200159c4  080048e0  000259c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001179b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002384  00000000  00000000  000317d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00034c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a538  00000000  00000000  00035bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e02  00000000  00000000  00060130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106ae4  00000000  00000000  00071f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178a16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c0  00000000  00000000  00178a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004874 	.word	0x08004874

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004874 	.word	0x08004874

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fcc4 	bl	8000b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f823 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f98d 	bl	8000528 <MX_GPIO_Init>
  MX_DMA_Init();
 800020e:	f000 f959 	bl	80004c4 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000212:	f000 f8a3 	bl	800035c <MX_DFSDM1_Init>
  MX_DAC1_Init();
 8000216:	f000 f86d 	bl	80002f4 <MX_DAC1_Init>
  MX_TIM2_Init();
 800021a:	f000 f905 	bl	8000428 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800021e:	480a      	ldr	r0, [pc, #40]	; (8000248 <main+0x4c>)
 8000220:	f003 fea0 	bl	8003f64 <HAL_TIM_Base_Start>
  for(int i = 0 ; i<18000 ; i++){
 8000224:	2300      	movs	r3, #0
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	e007      	b.n	800023a <main+0x3e>
	  audioBuffer[i] = 0;
 800022a:	4a08      	ldr	r2, [pc, #32]	; (800024c <main+0x50>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2100      	movs	r1, #0
 8000230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0 ; i<18000 ; i++){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f244 624f 	movw	r2, #17999	; 0x464f
 8000240:	4293      	cmp	r3, r2
 8000242:	ddf2      	ble.n	800022a <main+0x2e>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x48>
 8000246:	bf00      	nop
 8000248:	20000188 	.word	0x20000188
 800024c:	200001d4 	.word	0x200001d4

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b096      	sub	sp, #88	; 0x58
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2244      	movs	r2, #68	; 0x44
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f004 fb00 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f002 f9b5 	bl	80025e4 <HAL_PWREx_ControlVoltageScaling>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000280:	f000 f9de 	bl	8000640 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000284:	2310      	movs	r3, #16
 8000286:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	; 0x60
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000298:	2301      	movs	r3, #1
 800029a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800029c:	2301      	movs	r3, #1
 800029e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002a0:	2328      	movs	r3, #40	; 0x28
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a4:	2302      	movs	r3, #2
 80002a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ac:	2302      	movs	r3, #2
 80002ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fa39 	bl	800272c <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002c0:	f000 f9be 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2303      	movs	r3, #3
 80002ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	2103      	movs	r1, #3
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fe3f 	bl	8002f60 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002e8:	f000 f9aa 	bl	8000640 <Error_Handler>
  }
}
 80002ec:	bf00      	nop
 80002ee:	3758      	adds	r7, #88	; 0x58
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08a      	sub	sp, #40	; 0x28
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002fa:	463b      	mov	r3, r7
 80002fc:	2228      	movs	r2, #40	; 0x28
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f004 faaf 	bl	8004864 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <MX_DAC1_Init+0x60>)
 8000308:	4a13      	ldr	r2, [pc, #76]	; (8000358 <MX_DAC1_Init+0x64>)
 800030a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800030c:	4811      	ldr	r0, [pc, #68]	; (8000354 <MX_DAC1_Init+0x60>)
 800030e:	f000 fde8 	bl	8000ee2 <HAL_DAC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000318:	f000 f992 	bl	8000640 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800031c:	2300      	movs	r3, #0
 800031e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000320:	230a      	movs	r3, #10
 8000322:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000328:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000336:	463b      	mov	r3, r7
 8000338:	2200      	movs	r2, #0
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_DAC1_Init+0x60>)
 800033e:	f000 ff23 	bl	8001188 <HAL_DAC_ConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000348:	f000 f97a 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	3728      	adds	r7, #40	; 0x28
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028
 8000358:	40007400 	.word	0x40007400

0800035c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000360:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 8000362:	4a2d      	ldr	r2, [pc, #180]	; (8000418 <MX_DFSDM1_Init+0xbc>)
 8000364:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000366:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800036c:	4b29      	ldr	r3, [pc, #164]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 800036e:	2201      	movs	r2, #1
 8000370:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000372:	4b28      	ldr	r3, [pc, #160]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 8000374:	2201      	movs	r2, #1
 8000376:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000378:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 800037a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800037e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 8000380:	4b24      	ldr	r3, [pc, #144]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 8000382:	2264      	movs	r2, #100	; 0x64
 8000384:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 8000388:	2201      	movs	r2, #1
 800038a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 800038e:	f001 f985 	bl	800169c <HAL_DFSDM_FilterInit>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000398:	f000 f952 	bl	8000640 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <MX_DFSDM1_Init+0xc0>)
 800039e:	4a20      	ldr	r2, [pc, #128]	; (8000420 <MX_DFSDM1_Init+0xc4>)
 80003a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003b0:	2228      	movs	r2, #40	; 0x28
 80003b2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80003b4:	4b19      	ldr	r3, [pc, #100]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003da:	2201      	movs	r2, #1
 80003dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80003ea:	480c      	ldr	r0, [pc, #48]	; (800041c <MX_DFSDM1_Init+0xc0>)
 80003ec:	f001 f896 	bl	800151c <HAL_DFSDM_ChannelInit>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80003f6:	f000 f923 	bl	8000640 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80003fa:	2201      	movs	r2, #1
 80003fc:	4909      	ldr	r1, [pc, #36]	; (8000424 <MX_DFSDM1_Init+0xc8>)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_DFSDM1_Init+0xb8>)
 8000400:	f001 fa26 	bl	8001850 <HAL_DFSDM_FilterConfigRegChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800040a:	f000 f919 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	2000009c 	.word	0x2000009c
 8000418:	40016100 	.word	0x40016100
 800041c:	200000f0 	.word	0x200000f0
 8000420:	40016040 	.word	0x40016040
 8000424:	00020004 	.word	0x00020004

08000428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000446:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <MX_TIM2_Init+0x98>)
 8000448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <MX_TIM2_Init+0x98>)
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <MX_TIM2_Init+0x98>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 800045a:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <MX_TIM2_Init+0x98>)
 800045c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000460:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <MX_TIM2_Init+0x98>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_TIM2_Init+0x98>)
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800046e:	4814      	ldr	r0, [pc, #80]	; (80004c0 <MX_TIM2_Init+0x98>)
 8000470:	f003 fd20 	bl	8003eb4 <HAL_TIM_Base_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800047a:	f000 f8e1 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800047e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000482:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	480d      	ldr	r0, [pc, #52]	; (80004c0 <MX_TIM2_Init+0x98>)
 800048c:	f003 fef1 	bl	8004272 <HAL_TIM_ConfigClockSource>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000496:	f000 f8d3 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800049a:	2320      	movs	r3, #32
 800049c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <MX_TIM2_Init+0x98>)
 80004a8:	f004 f912 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004b2:	f000 f8c5 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000188 	.word	0x20000188

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_DMA_Init+0x60>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ce:	4a15      	ldr	r2, [pc, #84]	; (8000524 <MX_DMA_Init+0x60>)
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	6493      	str	r3, [r2, #72]	; 0x48
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_DMA_Init+0x60>)
 80004d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004da:	f003 0304 	and.w	r3, r3, #4
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_DMA_Init+0x60>)
 80004e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e6:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <MX_DMA_Init+0x60>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6493      	str	r3, [r2, #72]	; 0x48
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <MX_DMA_Init+0x60>)
 80004f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200b      	movs	r0, #11
 8000500:	f000 fcb9 	bl	8000e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000504:	200b      	movs	r0, #11
 8000506:	f000 fcd2 	bl	8000eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	200c      	movs	r0, #12
 8000510:	f000 fcb1 	bl	8000e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000514:	200c      	movs	r0, #12
 8000516:	f000 fcca 	bl	8000eae <HAL_NVIC_EnableIRQ>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <MX_GPIO_Init+0x94>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a1e      	ldr	r2, [pc, #120]	; (80005bc <MX_GPIO_Init+0x94>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <MX_GPIO_Init+0x94>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <MX_GPIO_Init+0x94>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a18      	ldr	r2, [pc, #96]	; (80005bc <MX_GPIO_Init+0x94>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <MX_GPIO_Init+0x94>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_GPIO_Init+0x94>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_GPIO_Init+0x94>)
 8000574:	f043 0310 	orr.w	r3, r3, #16
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_GPIO_Init+0x94>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0310 	and.w	r3, r3, #16
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : push_button_Pin */
  GPIO_InitStruct.Pin = push_button_Pin;
 8000586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(push_button_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	4808      	ldr	r0, [pc, #32]	; (80005c0 <MX_GPIO_Init+0x98>)
 800059e:	f001 fe3f 	bl	8002220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2028      	movs	r0, #40	; 0x28
 80005a8:	f000 fc65 	bl	8000e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f000 fc7e 	bl	8000eae <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3720      	adds	r7, #32
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000800 	.word	0x48000800

080005c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET) {
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	480a      	ldr	r0, [pc, #40]	; (80005fc <HAL_GPIO_EXTI_Callback+0x38>)
 80005d4:	f001 ffb6 	bl	8002544 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d009      	beq.n	80005f2 <HAL_GPIO_EXTI_Callback+0x2e>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80005de:	2100      	movs	r1, #0
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005e2:	f000 fd6d 	bl	80010c0 <HAL_DAC_Stop_DMA>
		//Starting DFSDM DMA mode
		HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, audioBuffer, BufferSize);
 80005e6:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80005ea:	4906      	ldr	r1, [pc, #24]	; (8000604 <HAL_GPIO_EXTI_Callback+0x40>)
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <HAL_GPIO_EXTI_Callback+0x44>)
 80005ee:	f001 f975 	bl	80018dc <HAL_DFSDM_FilterRegularStart_DMA>
	}
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	48000800 	.word	0x48000800
 8000600:	20000028 	.word	0x20000028
 8000604:	200001d4 	.word	0x200001d4
 8000608:	2000009c 	.word	0x2000009c

0800060c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter0){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
 8000612:	6078      	str	r0, [r7, #4]
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 8000616:	f001 f9e3 	bl	80019e0 <HAL_DFSDM_FilterRegularStop_DMA>
	HAL_DAC_Start_DMA (&hdac1, DAC_CHANNEL_1, (uint32_t *) audioBuffer, BufferSize, DAC_ALIGN_12B_R);
 800061a:	2300      	movs	r3, #0
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	f245 53f0 	movw	r3, #22000	; 0x55f0
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 8000624:	2100      	movs	r1, #0
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 8000628:	f000 fc7e 	bl	8000f28 <HAL_DAC_Start_DMA>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000009c 	.word	0x2000009c
 8000638:	200001d4 	.word	0x200001d4
 800063c:	20000028 	.word	0x20000028

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x44>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x44>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6613      	str	r3, [r2, #96]	; 0x60
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x44>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x44>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <HAL_MspInit+0x44>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	6593      	str	r3, [r2, #88]	; 0x58
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_MspInit+0x44>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <HAL_DAC_MspInit+0xcc>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d14f      	bne.n	8000756 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <HAL_DAC_MspInit+0xd0>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <HAL_DAC_MspInit+0xd0>)
 80006bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80006c0:	6593      	str	r3, [r2, #88]	; 0x58
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <HAL_DAC_MspInit+0xd0>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <HAL_DAC_MspInit+0xd0>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a24      	ldr	r2, [pc, #144]	; (8000764 <HAL_DAC_MspInit+0xd0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_DAC_MspInit+0xd0>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006e6:	2310      	movs	r3, #16
 80006e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ea:	2303      	movs	r3, #3
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f001 fd90 	bl	8002220 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 8000702:	4a1a      	ldr	r2, [pc, #104]	; (800076c <HAL_DAC_MspInit+0xd8>)
 8000704:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 8000708:	2206      	movs	r2, #6
 800070a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 800070e:	2210      	movs	r2, #16
 8000710:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 8000728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800072c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 8000730:	2220      	movs	r2, #32
 8000732:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 800073c:	f001 faa2 	bl	8001c84 <HAL_DMA_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000746:	f7ff ff7b 	bl	8000640 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	4a05      	ldr	r2, [pc, #20]	; (8000768 <HAL_DAC_MspInit+0xd4>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40007400 	.word	0x40007400
 8000764:	40021000 	.word	0x40021000
 8000768:	2000003c 	.word	0x2000003c
 800076c:	4002001c 	.word	0x4002001c

08000770 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0b0      	sub	sp, #192	; 0xc0
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	2294      	movs	r2, #148	; 0x94
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f004 f867 	bl	8004864 <memset>
  if(DFSDM1_Init == 0)
 8000796:	4b55      	ldr	r3, [pc, #340]	; (80008ec <HAL_DFSDM_FilterMspInit+0x17c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d16b      	bne.n	8000876 <HAL_DFSDM_FilterMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800079e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fe68 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80007ba:	f7ff ff41 	bl	8000640 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80007be:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <HAL_DFSDM_FilterMspInit+0x180>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a4a      	ldr	r2, [pc, #296]	; (80008f0 <HAL_DFSDM_FilterMspInit+0x180>)
 80007c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80007c8:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <HAL_DFSDM_FilterMspInit+0x180>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10b      	bne.n	80007e8 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80007d0:	4b48      	ldr	r3, [pc, #288]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 80007d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d4:	4a47      	ldr	r2, [pc, #284]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 80007d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007da:	6613      	str	r3, [r2, #96]	; 0x60
 80007dc:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 80007de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e8:	4b42      	ldr	r3, [pc, #264]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	4a41      	ldr	r2, [pc, #260]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f4:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	4a3b      	ldr	r2, [pc, #236]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <HAL_DFSDM_FilterMspInit+0x184>)
 800080e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PE7     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000818:	2304      	movs	r3, #4
 800081a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000830:	2306      	movs	r3, #6
 8000832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800083a:	4619      	mov	r1, r3
 800083c:	482e      	ldr	r0, [pc, #184]	; (80008f8 <HAL_DFSDM_FilterMspInit+0x188>)
 800083e:	f001 fcef 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800085a:	2306      	movs	r3, #6
 800085c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000860:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000864:	4619      	mov	r1, r3
 8000866:	4825      	ldr	r0, [pc, #148]	; (80008fc <HAL_DFSDM_FilterMspInit+0x18c>)
 8000868:	f001 fcda 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <HAL_DFSDM_FilterMspInit+0x17c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <HAL_DFSDM_FilterMspInit+0x17c>)
 8000874:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a21      	ldr	r2, [pc, #132]	; (8000900 <HAL_DFSDM_FilterMspInit+0x190>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d130      	bne.n	80008e2 <HAL_DFSDM_FilterMspInit+0x172>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 8000882:	4a21      	ldr	r2, [pc, #132]	; (8000908 <HAL_DFSDM_FilterMspInit+0x198>)
 8000884:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 8000888:	2256      	movs	r2, #86	; 0x56
 800088a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008bc:	f001 f9e2 	bl	8001c84 <HAL_DMA_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_DFSDM_FilterMspInit+0x15a>
    {
      Error_Handler();
 80008c6:	f7ff febb 	bl	8000640 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
 80008dc:	4a09      	ldr	r2, [pc, #36]	; (8000904 <HAL_DFSDM_FilterMspInit+0x194>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80008e2:	bf00      	nop
 80008e4:	37c0      	adds	r7, #192	; 0xc0
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20015998 	.word	0x20015998
 80008f0:	20015994 	.word	0x20015994
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000800 	.word	0x48000800
 80008fc:	48001000 	.word	0x48001000
 8000900:	40016100 	.word	0x40016100
 8000904:	20000128 	.word	0x20000128
 8000908:	40020008 	.word	0x40020008

0800090c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0b0      	sub	sp, #192	; 0xc0
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	2294      	movs	r2, #148	; 0x94
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f003 ff99 	bl	8004864 <memset>
  if(DFSDM1_Init == 0)
 8000932:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <HAL_DFSDM_ChannelMspInit+0x110>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d16b      	bne.n	8000a12 <HAL_DFSDM_ChannelMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800093a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	f107 0318 	add.w	r3, r7, #24
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fd9a 	bl	8003484 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000956:	f7ff fe73 	bl	8000640 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800095a:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <HAL_DFSDM_ChannelMspInit+0x114>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	4a2f      	ldr	r2, [pc, #188]	; (8000a20 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000962:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10b      	bne.n	8000984 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 800096e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000970:	4a2c      	ldr	r2, [pc, #176]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000976:	6613      	str	r3, [r2, #96]	; 0x60
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 800097a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000988:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_DFSDM_ChannelMspInit+0x118>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PE7     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b4:	2304      	movs	r3, #4
 80009b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009cc:	2306      	movs	r3, #6
 80009ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009d6:	4619      	mov	r1, r3
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80009da:	f001 fc21 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009f6:	2306      	movs	r3, #6
 80009f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a00:	4619      	mov	r1, r3
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <HAL_DFSDM_ChannelMspInit+0x120>)
 8000a04:	f001 fc0c 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <HAL_DFSDM_ChannelMspInit+0x110>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_DFSDM_ChannelMspInit+0x110>)
 8000a10:	6013      	str	r3, [r2, #0]
  }

}
 8000a12:	bf00      	nop
 8000a14:	37c0      	adds	r7, #192	; 0xc0
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20015998 	.word	0x20015998
 8000a20:	20015994 	.word	0x20015994
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000800 	.word	0x48000800
 8000a2c:	48001000 	.word	0x48001000

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a40:	d113      	bne.n	8000a6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	201c      	movs	r0, #28
 8000a60:	f000 fa09 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a64:	201c      	movs	r0, #28
 8000a66:	f000 fa22 	bl	8000eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f8b8 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <DMA1_Channel1_IRQHandler+0x10>)
 8000ad2:	f001 fa56 	bl	8001f82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000128 	.word	0x20000128

08000ae0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <DMA1_Channel2_IRQHandler+0x10>)
 8000ae6:	f001 fa4c 	bl	8001f82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000003c 	.word	0x2000003c

08000af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <TIM2_IRQHandler+0x10>)
 8000afa:	f003 fa9b 	bl	8004034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000188 	.word	0x20000188

08000b08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(push_button_Pin);
 8000b0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b10:	f001 fd30 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f003 fe57 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6e:	f7ff fb45 	bl	80001fc <main>

08000b72 <LoopForever>:

LoopForever:
    b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b74:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b80:	080048d4 	.word	0x080048d4
  ldr r2, =_sbss
 8000b84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b88:	200159c4 	.word	0x200159c4

08000b8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_IRQHandler>

08000b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f961 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f80e 	bl	8000bc0 <HAL_InitTick>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	e001      	b.n	8000bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb0:	f7ff fd4c 	bl	800064c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d023      	beq.n	8000c1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_InitTick+0x70>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f96d 	bl	8000eca <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10f      	bne.n	8000c16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d809      	bhi.n	8000c10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c04:	f000 f937 	bl	8000e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0x74>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e007      	b.n	8000c20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e004      	b.n	8000c20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e001      	b.n	8000c20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	2001599c 	.word	0x2001599c

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2001599c 	.word	0x2001599c

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff3e 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff31 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffa2 	bl	8000e1c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e014      	b.n	8000f1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	791b      	ldrb	r3, [r3, #4]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d105      	bne.n	8000f0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fbc5 	bl	8000694 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	795b      	ldrb	r3, [r3, #5]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_DAC_Start_DMA+0x1e>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e0ab      	b.n	800109e <HAL_DAC_Start_DMA+0x176>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d12f      	bne.n	8000fb8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a52      	ldr	r2, [pc, #328]	; (80010a8 <HAL_DAC_Start_DMA+0x180>)
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4a51      	ldr	r2, [pc, #324]	; (80010ac <HAL_DAC_Start_DMA+0x184>)
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4a50      	ldr	r2, [pc, #320]	; (80010b0 <HAL_DAC_Start_DMA+0x188>)
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f7e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d013      	beq.n	8000fae <HAL_DAC_Start_DMA+0x86>
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d845      	bhi.n	8001018 <HAL_DAC_Start_DMA+0xf0>
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_DAC_Start_DMA+0x72>
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d005      	beq.n	8000fa4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000f98:	e03e      	b.n	8001018 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	613b      	str	r3, [r7, #16]
        break;
 8000fa2:	e03c      	b.n	800101e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	330c      	adds	r3, #12
 8000faa:	613b      	str	r3, [r7, #16]
        break;
 8000fac:	e037      	b.n	800101e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3310      	adds	r3, #16
 8000fb4:	613b      	str	r3, [r7, #16]
        break;
 8000fb6:	e032      	b.n	800101e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4a3d      	ldr	r2, [pc, #244]	; (80010b4 <HAL_DAC_Start_DMA+0x18c>)
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a3c      	ldr	r2, [pc, #240]	; (80010b8 <HAL_DAC_Start_DMA+0x190>)
 8000fc6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	4a3b      	ldr	r2, [pc, #236]	; (80010bc <HAL_DAC_Start_DMA+0x194>)
 8000fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fde:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d013      	beq.n	800100e <HAL_DAC_Start_DMA+0xe6>
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d817      	bhi.n	800101c <HAL_DAC_Start_DMA+0xf4>
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_DAC_Start_DMA+0xd2>
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d005      	beq.n	8001004 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000ff8:	e010      	b.n	800101c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3314      	adds	r3, #20
 8001000:	613b      	str	r3, [r7, #16]
        break;
 8001002:	e00c      	b.n	800101e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3318      	adds	r3, #24
 800100a:	613b      	str	r3, [r7, #16]
        break;
 800100c:	e007      	b.n	800101e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	331c      	adds	r3, #28
 8001014:	613b      	str	r3, [r7, #16]
        break;
 8001016:	e002      	b.n	800101e <HAL_DAC_Start_DMA+0xf6>
        break;
 8001018:	bf00      	nop
 800101a:	e000      	b.n	800101e <HAL_DAC_Start_DMA+0xf6>
        break;
 800101c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d111      	bne.n	8001048 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001032:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	f000 fec9 	bl	8001dd4 <HAL_DMA_Start_IT>
 8001042:	4603      	mov	r3, r0
 8001044:	75fb      	strb	r3, [r7, #23]
 8001046:	e010      	b.n	800106a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001056:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	68d8      	ldr	r0, [r3, #12]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	f000 feb7 	bl	8001dd4 <HAL_DMA_Start_IT>
 8001066:	4603      	mov	r3, r0
 8001068:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	2201      	movs	r2, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e005      	b.n	800109c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800109c:	7dfb      	ldrb	r3, [r7, #23]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	08001409 	.word	0x08001409
 80010ac:	0800142b 	.word	0x0800142b
 80010b0:	08001447 	.word	0x08001447
 80010b4:	080014b1 	.word	0x080014b1
 80010b8:	080014d3 	.word	0x080014d3
 80010bc:	080014ef 	.word	0x080014ef

080010c0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	400a      	ands	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2201      	movs	r2, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10d      	bne.n	8001126 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fedb 	bl	8001eca <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e00c      	b.n	8001140 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fecd 	bl	8001eca <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800113e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	795b      	ldrb	r3, [r3, #5]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_DAC_ConfigChannel+0x1c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e12a      	b.n	80013fa <HAL_DAC_ConfigChannel+0x272>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2201      	movs	r2, #1
 80011a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2202      	movs	r2, #2
 80011ae:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d174      	bne.n	80012a2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80011b8:	f7ff fd52 	bl	8000c60 <HAL_GetTick>
 80011bc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d134      	bne.n	800122e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80011c4:	e011      	b.n	80011ea <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80011c6:	f7ff fd4b 	bl	8000c60 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d90a      	bls.n	80011ea <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	f043 0208 	orr.w	r2, r3, #8
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2203      	movs	r2, #3
 80011e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e107      	b.n	80013fa <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e6      	bne.n	80011c6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff fd3d 	bl	8000c78 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	69d2      	ldr	r2, [r2, #28]
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
 8001208:	e01e      	b.n	8001248 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800120a:	f7ff fd29 	bl	8000c60 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d90a      	bls.n	800122e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	f043 0208 	orr.w	r2, r3, #8
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2203      	movs	r2, #3
 8001228:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0e5      	b.n	80013fa <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001234:	2b00      	cmp	r3, #0
 8001236:	dbe8      	blt.n	800120a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fd1d 	bl	8000c78 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	69d2      	ldr	r2, [r2, #28]
 8001246:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	ea02 0103 	and.w	r1, r2, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	409a      	lsls	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	21ff      	movs	r1, #255	; 0xff
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	ea02 0103 	and.w	r1, r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d11d      	bne.n	80012e6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	2207      	movs	r2, #7
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	4013      	ands	r3, r2
 8001300:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	431a      	orrs	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	4313      	orrs	r3, r2
 8001324:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6819      	ldr	r1, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	4013      	ands	r3, r2
 8001368:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	4313      	orrs	r3, r2
 8001380:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800138a:	d104      	bne.n	8001396 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e018      	b.n	80013c8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d104      	bne.n	80013a8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e00f      	b.n	80013c8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80013a8:	f001 ffa0 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 80013ac:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_DAC_ConfigChannel+0x27c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d904      	bls.n	80013c0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e003      	b.n	80013c8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013c6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	22c0      	movs	r2, #192	; 0xc0
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	04c4b400 	.word	0x04c4b400

08001408 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff fe97 	bl	800114a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2201      	movs	r2, #1
 8001420:	711a      	strb	r2, [r3, #4]
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f7ff fe90 	bl	800115e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	f043 0204 	orr.w	r2, r3, #4
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7ff fe86 	bl	8001172 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2201      	movs	r2, #1
 800146a:	711a      	strb	r2, [r3, #4]
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff ffd8 	bl	8001474 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2201      	movs	r2, #1
 80014c8:	711a      	strb	r2, [r3, #4]
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff ffd1 	bl	8001488 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	f043 0204 	orr.w	r2, r3, #4
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff ffc7 	bl	800149c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2201      	movs	r2, #1
 8001512:	711a      	strb	r2, [r3, #4]
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0ac      	b.n	8001688 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fab6 	bl	8001aa4 <DFSDM_GetChannelFromInstance>
 8001538:	4603      	mov	r3, r0
 800153a:	4a55      	ldr	r2, [pc, #340]	; (8001690 <HAL_DFSDM_ChannelInit+0x174>)
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e09f      	b.n	8001688 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff f9df 	bl	800090c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800154e:	4b51      	ldr	r3, [pc, #324]	; (8001694 <HAL_DFSDM_ChannelInit+0x178>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <HAL_DFSDM_ChannelInit+0x178>)
 8001556:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001558:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <HAL_DFSDM_ChannelInit+0x178>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d125      	bne.n	80015ac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 8001566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800156a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4948      	ldr	r1, [pc, #288]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a46      	ldr	r2, [pc, #280]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 8001580:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001584:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	791b      	ldrb	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	3b01      	subs	r3, #1
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	493f      	ldr	r1, [pc, #252]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <HAL_DFSDM_ChannelInit+0x17c>)
 80015a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015aa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80015ba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6819      	ldr	r1, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015ca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015d0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 020f 	bic.w	r2, r2, #15
 80015e8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001610:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6899      	ldr	r1, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	3b01      	subs	r3, #1
 8001622:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f002 0207 	and.w	r2, r2, #7
 800163c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001668:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa14 	bl	8001aa4 <DFSDM_GetChannelFromInstance>
 800167c:	4602      	mov	r2, r0
 800167e:	4904      	ldr	r1, [pc, #16]	; (8001690 <HAL_DFSDM_ChannelInit+0x174>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200159a4 	.word	0x200159a4
 8001694:	200159a0 	.word	0x200159a0
 8001698:	40016000 	.word	0x40016000

0800169c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0ca      	b.n	8001844 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a66      	ldr	r2, [pc, #408]	; (800184c <HAL_DFSDM_FilterInit+0x1b0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d109      	bne.n	80016cc <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d003      	beq.n	80016c8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0bb      	b.n	8001844 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff f843 	bl	8000770 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80016f8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7a1b      	ldrb	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e007      	b.n	8001724 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001722:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7a5b      	ldrb	r3, [r3, #9]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d108      	bne.n	800173e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e007      	b.n	800174e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800175c:	f023 0308 	bic.w	r3, r3, #8
 8001760:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d108      	bne.n	800177c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7c1b      	ldrb	r3, [r3, #16]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d108      	bne.n	8001796 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0210 	orr.w	r2, r2, #16
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e007      	b.n	80017a6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0210 	bic.w	r2, r2, #16
 80017a4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7c5b      	ldrb	r3, [r3, #17]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0220 	orr.w	r2, r2, #32
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e007      	b.n	80017d0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0220 	bic.w	r2, r2, #32
 80017ce:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80017de:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80017e2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6959      	ldr	r1, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017f6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017fe:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7c1a      	ldrb	r2, [r3, #16]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40016100 	.word	0x40016100

08001850 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d02e      	beq.n	80018c8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001870:	2bff      	cmp	r3, #255	; 0xff
 8001872:	d029      	beq.n	80018c8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10d      	bne.n	80018aa <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e00a      	b.n	80018c0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
 80018c6:	e001      	b.n	80018cc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	75fb      	strb	r3, [r7, #23]
 80018fc:	e064      	b.n	80019c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800190c:	d002      	beq.n	8001914 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
 8001912:	e059      	b.n	80019c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10e      	bne.n	800193a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10a      	bne.n	800193a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800192a:	2b00      	cmp	r3, #0
 800192c:	d105      	bne.n	800193a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d002      	beq.n	800193a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	75fb      	strb	r3, [r7, #23]
 8001938:	e046      	b.n	80019c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10b      	bne.n	800195a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001946:	2b00      	cmp	r3, #0
 8001948:	d107      	bne.n	800195a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001950:	2b20      	cmp	r3, #32
 8001952:	d102      	bne.n	800195a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	75fb      	strb	r3, [r7, #23]
 8001958:	e036      	b.n	80019c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001960:	2b01      	cmp	r3, #1
 8001962:	d004      	beq.n	800196e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800196a:	2b03      	cmp	r3, #3
 800196c:	d12a      	bne.n	80019c4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800197c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001984:	2b20      	cmp	r3, #32
 8001986:	d101      	bne.n	800198c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800198a:	e000      	b.n	800198e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800198c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	331c      	adds	r3, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f000 fa16 	bl	8001dd4 <HAL_DMA_Start_IT>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80019ba:	e005      	b.n	80019c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f8bd 	bl	8001b3c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80019c2:	e001      	b.n	80019c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08001a65 	.word	0x08001a65
 80019d8:	08001a81 	.word	0x08001a81
 80019dc:	08001a49 	.word	0x08001a49

080019e0 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d007      	beq.n	8001a06 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d002      	beq.n	8001a06 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e007      	b.n	8001a16 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fa5d 	bl	8001eca <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f8e9 	bl	8001be8 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff ffe2 	bl	8001a20 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7fe fdca 	bl	800060c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2203      	movs	r2, #3
 8001a92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff ffcd 	bl	8001a34 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <DFSDM_GetChannelFromInstance+0x7c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d102      	bne.n	8001aba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	e02b      	b.n	8001b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <DFSDM_GetChannelFromInstance+0x80>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d102      	bne.n	8001ac8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e024      	b.n	8001b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <DFSDM_GetChannelFromInstance+0x84>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d102      	bne.n	8001ad6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e01d      	b.n	8001b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <DFSDM_GetChannelFromInstance+0x88>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d102      	bne.n	8001ae4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e016      	b.n	8001b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d102      	bne.n	8001af2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001aec:	2305      	movs	r3, #5
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e00f      	b.n	8001b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <DFSDM_GetChannelFromInstance+0x90>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d102      	bne.n	8001b00 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001afa:	2306      	movs	r3, #6
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e008      	b.n	8001b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <DFSDM_GetChannelFromInstance+0x94>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d102      	bne.n	8001b0e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001b08:	2307      	movs	r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e001      	b.n	8001b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40016000 	.word	0x40016000
 8001b24:	40016020 	.word	0x40016020
 8001b28:	40016040 	.word	0x40016040
 8001b2c:	40016080 	.word	0x40016080
 8001b30:	400160a0 	.word	0x400160a0
 8001b34:	400160c0 	.word	0x400160c0
 8001b38:	400160e0 	.word	0x400160e0

08001b3c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d108      	bne.n	8001b5e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e033      	b.n	8001bc6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b7c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d116      	bne.n	8001bc6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0202 	orr.w	r2, r2, #2
 8001bae:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <DFSDM_RegConvStart+0x84>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	e000      	b.n	8001bc2 <DFSDM_RegConvStart+0x86>
 8001bc0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <DFSDM_RegConvStart+0x98>
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	e000      	b.n	8001bd6 <DFSDM_RegConvStart+0x9a>
 8001bd4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d107      	bne.n	8001c18 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d116      	bne.n	8001c60 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d107      	bne.n	8001c4a <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0202 	orr.w	r2, r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d102      	bne.n	8001c5a <DFSDM_RegConvStop+0x72>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	e000      	b.n	8001c5c <DFSDM_RegConvStop+0x74>
 8001c5a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d101      	bne.n	8001c6e <DFSDM_RegConvStop+0x86>
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	e000      	b.n	8001c70 <DFSDM_RegConvStop+0x88>
 8001c6e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e08d      	b.n	8001db2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_DMA_Init+0x138>)
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d80f      	bhi.n	8001cc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b45      	ldr	r3, [pc, #276]	; (8001dc0 <HAL_DMA_Init+0x13c>)
 8001caa:	4413      	add	r3, r2
 8001cac:	4a45      	ldr	r2, [pc, #276]	; (8001dc4 <HAL_DMA_Init+0x140>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	009a      	lsls	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a42      	ldr	r2, [pc, #264]	; (8001dc8 <HAL_DMA_Init+0x144>)
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001cc0:	e00e      	b.n	8001ce0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <HAL_DMA_Init+0x148>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a3d      	ldr	r2, [pc, #244]	; (8001dc4 <HAL_DMA_Init+0x140>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	009a      	lsls	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <HAL_DMA_Init+0x14c>)
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fa12 	bl	800215c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d40:	d102      	bne.n	8001d48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d5c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d010      	beq.n	8001d88 <HAL_DMA_Init+0x104>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d80c      	bhi.n	8001d88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fa32 	bl	80021d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	e008      	b.n	8001d9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40020407 	.word	0x40020407
 8001dc0:	bffdfff8 	.word	0xbffdfff8
 8001dc4:	cccccccd 	.word	0xcccccccd
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	bffdfbf8 	.word	0xbffdfbf8
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_DMA_Start_IT+0x20>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e066      	b.n	8001ec2 <HAL_DMA_Start_IT+0xee>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d155      	bne.n	8001eb4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f957 	bl	80020e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 020e 	orr.w	r2, r2, #14
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e00f      	b.n	8001e6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0204 	bic.w	r2, r2, #4
 8001e5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 020a 	orr.w	r2, r2, #10
 8001e6a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e88:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e005      	b.n	8001ec0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d008      	beq.n	8001ef4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e040      	b.n	8001f76 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 020e 	bic.w	r2, r2, #14
 8001f02:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f12:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f003 021c 	and.w	r2, r3, #28
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00c      	beq.n	8001f64 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f62:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f003 031c 	and.w	r3, r3, #28
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d026      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x7a>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d021      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0204 	bic.w	r2, r2, #4
 8001fd4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f003 021c 	and.w	r2, r3, #28
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d071      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001ffa:	e06c      	b.n	80020d6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f003 031c 	and.w	r3, r3, #28
 8002004:	2202      	movs	r2, #2
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d02e      	beq.n	800206e <HAL_DMA_IRQHandler+0xec>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d029      	beq.n	800206e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 020a 	bic.w	r2, r2, #10
 8002036:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	f003 021c 	and.w	r2, r3, #28
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2102      	movs	r1, #2
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d038      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800206c:	e033      	b.n	80020d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f003 031c 	and.w	r3, r3, #28
 8002076:	2208      	movs	r2, #8
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d02a      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x156>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d025      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 020e 	bic.w	r2, r2, #14
 800209a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f003 021c 	and.w	r2, r3, #28
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
}
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020f6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002108:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f003 021c 	and.w	r2, r3, #28
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f202 	lsl.w	r2, r1, r2
 800211c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b10      	cmp	r3, #16
 800212c:	d108      	bne.n	8002140 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800213e:	e007      	b.n	8002150 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	60da      	str	r2, [r3, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800216c:	429a      	cmp	r2, r3
 800216e:	d80a      	bhi.n	8002186 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800217c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6493      	str	r3, [r2, #72]	; 0x48
 8002184:	e007      	b.n	8002196 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	009a      	lsls	r2, r3, #2
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002190:	4413      	add	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3b08      	subs	r3, #8
 800219e:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2201      	movs	r2, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40020407 	.word	0x40020407
 80021cc:	4002081c 	.word	0x4002081c
 80021d0:	cccccccd 	.word	0xcccccccd
 80021d4:	40020880 	.word	0x40020880

080021d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	461a      	mov	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a08      	ldr	r2, [pc, #32]	; (800221c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2201      	movs	r2, #1
 8002206:	409a      	lsls	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	1000823f 	.word	0x1000823f
 800221c:	40020940 	.word	0x40020940

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	e166      	b.n	80024fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8158 	beq.w	80024f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d005      	beq.n	8002260 <HAL_GPIO_Init+0x40>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d130      	bne.n	80022c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002296:	2201      	movs	r2, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 0201 	and.w	r2, r3, #1
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d017      	beq.n	80022fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d123      	bne.n	8002352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	6939      	ldr	r1, [r7, #16]
 800234e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0203 	and.w	r2, r3, #3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80b2 	beq.w	80024f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002394:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_GPIO_Init+0x2fc>)
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	4a60      	ldr	r2, [pc, #384]	; (800251c <HAL_GPIO_Init+0x2fc>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6613      	str	r3, [r2, #96]	; 0x60
 80023a0:	4b5e      	ldr	r3, [pc, #376]	; (800251c <HAL_GPIO_Init+0x2fc>)
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ac:	4a5c      	ldr	r2, [pc, #368]	; (8002520 <HAL_GPIO_Init+0x300>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023d6:	d02b      	beq.n	8002430 <HAL_GPIO_Init+0x210>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_GPIO_Init+0x304>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d025      	beq.n	800242c <HAL_GPIO_Init+0x20c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a51      	ldr	r2, [pc, #324]	; (8002528 <HAL_GPIO_Init+0x308>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01f      	beq.n	8002428 <HAL_GPIO_Init+0x208>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a50      	ldr	r2, [pc, #320]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d019      	beq.n	8002424 <HAL_GPIO_Init+0x204>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a4f      	ldr	r2, [pc, #316]	; (8002530 <HAL_GPIO_Init+0x310>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_GPIO_Init+0x200>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a4e      	ldr	r2, [pc, #312]	; (8002534 <HAL_GPIO_Init+0x314>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00d      	beq.n	800241c <HAL_GPIO_Init+0x1fc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a4d      	ldr	r2, [pc, #308]	; (8002538 <HAL_GPIO_Init+0x318>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <HAL_GPIO_Init+0x1f8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a4c      	ldr	r2, [pc, #304]	; (800253c <HAL_GPIO_Init+0x31c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_GPIO_Init+0x1f4>
 8002410:	2307      	movs	r3, #7
 8002412:	e00e      	b.n	8002432 <HAL_GPIO_Init+0x212>
 8002414:	2308      	movs	r3, #8
 8002416:	e00c      	b.n	8002432 <HAL_GPIO_Init+0x212>
 8002418:	2306      	movs	r3, #6
 800241a:	e00a      	b.n	8002432 <HAL_GPIO_Init+0x212>
 800241c:	2305      	movs	r3, #5
 800241e:	e008      	b.n	8002432 <HAL_GPIO_Init+0x212>
 8002420:	2304      	movs	r3, #4
 8002422:	e006      	b.n	8002432 <HAL_GPIO_Init+0x212>
 8002424:	2303      	movs	r3, #3
 8002426:	e004      	b.n	8002432 <HAL_GPIO_Init+0x212>
 8002428:	2302      	movs	r3, #2
 800242a:	e002      	b.n	8002432 <HAL_GPIO_Init+0x212>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_GPIO_Init+0x212>
 8002430:	2300      	movs	r3, #0
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	f002 0203 	and.w	r2, r2, #3
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	4093      	lsls	r3, r2
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002442:	4937      	ldr	r1, [pc, #220]	; (8002520 <HAL_GPIO_Init+0x300>)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002450:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_GPIO_Init+0x320>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002474:	4a32      	ldr	r2, [pc, #200]	; (8002540 <HAL_GPIO_Init+0x320>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <HAL_GPIO_Init+0x320>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800249e:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024a4:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f47f ae91 	bne.w	8002230 <HAL_GPIO_Init+0x10>
  }
}
 800250e:	bf00      	nop
 8002510:	bf00      	nop
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40021000 	.word	0x40021000
 8002520:	40010000 	.word	0x40010000
 8002524:	48000400 	.word	0x48000400
 8002528:	48000800 	.word	0x48000800
 800252c:	48000c00 	.word	0x48000c00
 8002530:	48001000 	.word	0x48001000
 8002534:	48001400 	.word	0x48001400
 8002538:	48001800 	.word	0x48001800
 800253c:	48001c00 	.word	0x48001c00
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e001      	b.n	8002566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe f816 	bl	80005c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b4:	d102      	bne.n	80025bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80025b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ba:	e00b      	b.n	80025d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ca:	d102      	bne.n	80025d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80025cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d0:	e000      	b.n	80025d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80025d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000

080025e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d141      	bne.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025f2:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fe:	d131      	bne.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002600:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002606:	4a46      	ldr	r2, [pc, #280]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800260c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	4b43      	ldr	r3, [pc, #268]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002618:	4a41      	ldr	r2, [pc, #260]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002620:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2232      	movs	r2, #50	; 0x32
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4a3f      	ldr	r2, [pc, #252]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	0c9b      	lsrs	r3, r3, #18
 8002632:	3301      	adds	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002636:	e002      	b.n	800263e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3b01      	subs	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264a:	d102      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f2      	bne.n	8002638 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265e:	d158      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e057      	b.n	8002714 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002664:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800266a:	4a2d      	ldr	r2, [pc, #180]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002674:	e04d      	b.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267c:	d141      	bne.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d131      	bne.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002692:	4a23      	ldr	r2, [pc, #140]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a4:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2232      	movs	r2, #50	; 0x32
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	0c9b      	lsrs	r3, r3, #18
 80026be:	3301      	adds	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c2:	e002      	b.n	80026ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d6:	d102      	bne.n	80026de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f2      	bne.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ea:	d112      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e011      	b.n	8002714 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002700:	e007      	b.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002710:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40007000 	.word	0x40007000
 8002724:	20000000 	.word	0x20000000
 8002728:	431bde83 	.word	0x431bde83

0800272c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f000 bc08 	b.w	8002f50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002740:	4b96      	ldr	r3, [pc, #600]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800274a:	4b94      	ldr	r3, [pc, #592]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80e4 	beq.w	800292a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_RCC_OscConfig+0x4c>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	f040 808b 	bne.w	8002886 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b01      	cmp	r3, #1
 8002774:	f040 8087 	bne.w	8002886 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002778:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x64>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e3df      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_RCC_OscConfig+0x7e>
 80027a0:	4b7e      	ldr	r3, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	e005      	b.n	80027b6 <HAL_RCC_OscConfig+0x8a>
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d223      	bcs.n	8002802 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fda0 	bl	8003304 <RCC_SetFlashLatencyFromMSIRange>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e3c0      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a72      	ldr	r2, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027d4:	f043 0308 	orr.w	r3, r3, #8
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b70      	ldr	r3, [pc, #448]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	496d      	ldr	r1, [pc, #436]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ec:	4b6b      	ldr	r3, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	4968      	ldr	r1, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
 8002800:	e025      	b.n	800284e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002802:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a65      	ldr	r2, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002808:	f043 0308 	orr.w	r3, r3, #8
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4960      	ldr	r1, [pc, #384]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002820:	4b5e      	ldr	r3, [pc, #376]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	495b      	ldr	r1, [pc, #364]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fd60 	bl	8003304 <RCC_SetFlashLatencyFromMSIRange>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e380      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800284e:	f000 fcc1 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b51      	ldr	r3, [pc, #324]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4950      	ldr	r1, [pc, #320]	; (80029a0 <HAL_RCC_OscConfig+0x274>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a4e      	ldr	r2, [pc, #312]	; (80029a4 <HAL_RCC_OscConfig+0x278>)
 800286c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800286e:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <HAL_RCC_OscConfig+0x27c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe f9a4 	bl	8000bc0 <HAL_InitTick>
 8002878:	4603      	mov	r3, r0
 800287a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d052      	beq.n	8002928 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	e364      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d032      	beq.n	80028f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800288e:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a42      	ldr	r2, [pc, #264]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800289a:	f7fe f9e1 	bl	8000c60 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028a2:	f7fe f9dd 	bl	8000c60 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e34d      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b4:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c0:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a35      	ldr	r2, [pc, #212]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028c6:	f043 0308 	orr.w	r3, r3, #8
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4930      	ldr	r1, [pc, #192]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	492b      	ldr	r1, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
 80028f2:	e01a      	b.n	800292a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028f4:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a28      	ldr	r2, [pc, #160]	; (800299c <HAL_RCC_OscConfig+0x270>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002900:	f7fe f9ae 	bl	8000c60 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002908:	f7fe f9aa 	bl	8000c60 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e31a      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x1dc>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d073      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d005      	beq.n	8002948 <HAL_RCC_OscConfig+0x21c>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d10e      	bne.n	8002960 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d10b      	bne.n	8002960 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d063      	beq.n	8002a1c <HAL_RCC_OscConfig+0x2f0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d15f      	bne.n	8002a1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e2f7      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002968:	d106      	bne.n	8002978 <HAL_RCC_OscConfig+0x24c>
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e025      	b.n	80029c4 <HAL_RCC_OscConfig+0x298>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002980:	d114      	bne.n	80029ac <HAL_RCC_OscConfig+0x280>
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCC_OscConfig+0x270>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e013      	b.n	80029c4 <HAL_RCC_OscConfig+0x298>
 800299c:	40021000 	.word	0x40021000
 80029a0:	0800488c 	.word	0x0800488c
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004
 80029ac:	4ba0      	ldr	r3, [pc, #640]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a9f      	ldr	r2, [pc, #636]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b9d      	ldr	r3, [pc, #628]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a9c      	ldr	r2, [pc, #624]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe f948 	bl	8000c60 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe f944 	bl	8000c60 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e2b4      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e6:	4b92      	ldr	r3, [pc, #584]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2a8>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe f934 	bl	8000c60 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe f930 	bl	8000c60 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e2a0      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0e:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x2d0>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d060      	beq.n	8002aec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_OscConfig+0x310>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d119      	bne.n	8002a6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d116      	bne.n	8002a6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a3c:	4b7c      	ldr	r3, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x328>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e27d      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	4973      	ldr	r1, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a68:	e040      	b.n	8002aec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d023      	beq.n	8002aba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a72:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe f8ef 	bl	8000c60 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe f8eb 	bl	8000c60 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e25b      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a98:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	495f      	ldr	r1, [pc, #380]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e018      	b.n	8002aec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe f8cb 	bl	8000c60 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fe f8c7 	bl	8000c60 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e237      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d03c      	beq.n	8002b72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	4a4a      	ldr	r2, [pc, #296]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fe f8a6 	bl	8000c60 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b18:	f7fe f8a2 	bl	8000c60 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e212      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ef      	beq.n	8002b18 <HAL_RCC_OscConfig+0x3ec>
 8002b38:	e01b      	b.n	8002b72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b40:	4a3b      	ldr	r2, [pc, #236]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fe f889 	bl	8000c60 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b52:	f7fe f885 	bl	8000c60 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1f5      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ef      	bne.n	8002b52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80a6 	beq.w	8002ccc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10d      	bne.n	8002bac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCC_OscConfig+0x508>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d118      	bne.n	8002bea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <HAL_RCC_OscConfig+0x508>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_RCC_OscConfig+0x508>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc4:	f7fe f84c 	bl	8000c60 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe f848 	bl	8000c60 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1b8      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_RCC_OscConfig+0x508>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4d8>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c02:	e029      	b.n	8002c58 <HAL_RCC_OscConfig+0x52c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d115      	bne.n	8002c38 <HAL_RCC_OscConfig+0x50c>
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	4a03      	ldr	r2, [pc, #12]	; (8002c30 <HAL_RCC_OscConfig+0x504>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c2c:	e014      	b.n	8002c58 <HAL_RCC_OscConfig+0x52c>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
 8002c38:	4b9d      	ldr	r3, [pc, #628]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	4a9c      	ldr	r2, [pc, #624]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c48:	4b99      	ldr	r3, [pc, #612]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	4a98      	ldr	r2, [pc, #608]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d016      	beq.n	8002c8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fd fffe 	bl	8000c60 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fd fffa 	bl	8000c60 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e168      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7e:	4b8c      	ldr	r3, [pc, #560]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ed      	beq.n	8002c68 <HAL_RCC_OscConfig+0x53c>
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fd ffe7 	bl	8000c60 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fd ffe3 	bl	8000c60 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e151      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cac:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ed      	bne.n	8002c96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cba:	7ffb      	ldrb	r3, [r7, #31]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b7b      	ldr	r3, [pc, #492]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	4a7a      	ldr	r2, [pc, #488]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d03c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ce0:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ce6:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fd ffb6 	bl	8000c60 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cf8:	f7fd ffb2 	bl	8000c60 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e122      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d0a:	4b69      	ldr	r3, [pc, #420]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ef      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x5cc>
 8002d18:	e01b      	b.n	8002d52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d20:	4a63      	ldr	r2, [pc, #396]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fd ff99 	bl	8000c60 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d32:	f7fd ff95 	bl	8000c60 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e105      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d44:	4b5a      	ldr	r3, [pc, #360]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ef      	bne.n	8002d32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80f9 	beq.w	8002f4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	f040 80cf 	bne.w	8002f04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d66:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0203 	and.w	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d12c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	3b01      	subs	r3, #1
 8002d86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d123      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d113      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	085b      	lsrs	r3, r3, #1
 8002db8:	3b01      	subs	r3, #1
 8002dba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d109      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d071      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d068      	beq.n	8002eac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dda:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002de6:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0ac      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002dfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e02:	f7fd ff2d 	bl	8000c60 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7fd ff29 	bl	8000c60 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e099      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x788>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e42:	0212      	lsls	r2, r2, #8
 8002e44:	4311      	orrs	r1, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e4a:	0852      	lsrs	r2, r2, #1
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	0552      	lsls	r2, r2, #21
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e56:	0852      	lsrs	r2, r2, #1
 8002e58:	3a01      	subs	r2, #1
 8002e5a:	0652      	lsls	r2, r2, #25
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e62:	06d2      	lsls	r2, r2, #27
 8002e64:	430a      	orrs	r2, r1
 8002e66:	4912      	ldr	r1, [pc, #72]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e84:	f7fd feec 	bl	8000c60 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fd fee8 	bl	8000c60 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e058      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_RCC_OscConfig+0x784>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eaa:	e050      	b.n	8002f4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e04f      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d144      	bne.n	8002f4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a23      	ldr	r2, [pc, #140]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002edc:	f7fd fec0 	bl	8000c60 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fd febc 	bl	8000c60 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e02c      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x7b8>
 8002f02:	e024      	b.n	8002f4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d01f      	beq.n	8002f4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fd fea3 	bl	8000c60 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7fd fe9f 	bl	8000c60 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e00f      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	4905      	ldr	r1, [pc, #20]	; (8002f58 <HAL_RCC_OscConfig+0x82c>)
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_OscConfig+0x830>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	60cb      	str	r3, [r1, #12]
 8002f48:	e001      	b.n	8002f4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	feeefffc 	.word	0xfeeefffc

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e11d      	b.n	80031b4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b90      	ldr	r3, [pc, #576]	; (80031bc <HAL_RCC_ClockConfig+0x25c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b8d      	ldr	r3, [pc, #564]	; (80031bc <HAL_RCC_ClockConfig+0x25c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	498b      	ldr	r1, [pc, #556]	; (80031bc <HAL_RCC_ClockConfig+0x25c>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b89      	ldr	r3, [pc, #548]	; (80031bc <HAL_RCC_ClockConfig+0x25c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e105      	b.n	80031b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d908      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b7e      	ldr	r3, [pc, #504]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	497b      	ldr	r1, [pc, #492]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d079      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d11e      	bne.n	8003028 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	4b75      	ldr	r3, [pc, #468]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0dc      	b.n	80031b4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ffa:	f000 f9dd 	bl	80033b8 <RCC_GetSysClockFreqFromPLLSource>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a70      	ldr	r2, [pc, #448]	; (80031c4 <HAL_RCC_ClockConfig+0x264>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d946      	bls.n	8003094 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003006:	4b6e      	ldr	r3, [pc, #440]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d140      	bne.n	8003094 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003012:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800301a:	4a69      	ldr	r2, [pc, #420]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 800301c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003020:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e035      	b.n	8003094 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d107      	bne.n	8003040 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003030:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d115      	bne.n	8003068 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b9      	b.n	80031b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003048:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ad      	b.n	80031b4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003058:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0a5      	b.n	80031b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003068:	f000 f8b4 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 800306c:	4603      	mov	r3, r0
 800306e:	4a55      	ldr	r2, [pc, #340]	; (80031c4 <HAL_RCC_ClockConfig+0x264>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d90f      	bls.n	8003094 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003074:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003080:	4b4f      	ldr	r3, [pc, #316]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003088:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 800308a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003094:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 0203 	bic.w	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4947      	ldr	r1, [pc, #284]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a6:	f7fd fddb 	bl	8000c60 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fd fdd7 	bl	8000c60 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e077      	b.n	80031b4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c4:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 020c 	and.w	r2, r3, #12
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d1eb      	bne.n	80030ae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d105      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030dc:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a37      	ldr	r2, [pc, #220]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 80030e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003100:	429a      	cmp	r2, r3
 8003102:	d208      	bcs.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	492b      	ldr	r1, [pc, #172]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_RCC_ClockConfig+0x25c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d210      	bcs.n	8003146 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_RCC_ClockConfig+0x25c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 020f 	bic.w	r2, r3, #15
 800312c:	4923      	ldr	r1, [pc, #140]	; (80031bc <HAL_RCC_ClockConfig+0x25c>)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003134:	4b21      	ldr	r3, [pc, #132]	; (80031bc <HAL_RCC_ClockConfig+0x25c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e036      	b.n	80031b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003152:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4918      	ldr	r1, [pc, #96]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d009      	beq.n	8003184 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4910      	ldr	r1, [pc, #64]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 8003180:	4313      	orrs	r3, r2
 8003182:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003184:	f000 f826 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCC_ClockConfig+0x260>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	490c      	ldr	r1, [pc, #48]	; (80031c8 <HAL_RCC_ClockConfig+0x268>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_RCC_ClockConfig+0x26c>)
 80031a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd fd09 	bl	8000bc0 <HAL_InitTick>
 80031ae:	4603      	mov	r3, r0
 80031b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40022000 	.word	0x40022000
 80031c0:	40021000 	.word	0x40021000
 80031c4:	04c4b400 	.word	0x04c4b400
 80031c8:	0800488c 	.word	0x0800488c
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e2:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ec:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x34>
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d121      	bne.n	8003246 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d11e      	bne.n	8003246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d107      	bne.n	8003224 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e005      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003224:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10d      	bne.n	800325c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003244:	e00a      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d102      	bne.n	8003252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800324e:	61bb      	str	r3, [r7, #24]
 8003250:	e004      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d101      	bne.n	800325c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003258:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800325a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d134      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d003      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0xa6>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d003      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0xac>
 8003278:	e005      	b.n	8003286 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800327c:	617b      	str	r3, [r7, #20]
      break;
 800327e:	e005      	b.n	800328c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003282:	617b      	str	r3, [r7, #20]
      break;
 8003284:	e002      	b.n	800328c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	617b      	str	r3, [r7, #20]
      break;
 800328a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	3301      	adds	r3, #1
 8003298:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	fb03 f202 	mul.w	r2, r3, r2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_RCC_GetSysClockFreq+0x108>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	0e5b      	lsrs	r3, r3, #25
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	3301      	adds	r3, #1
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032cc:	69bb      	ldr	r3, [r7, #24]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	0800489c 	.word	0x0800489c
 80032e4:	00f42400 	.word	0x00f42400
 80032e8:	007a1200 	.word	0x007a1200

080032ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000000 	.word	0x20000000

08003304 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800331c:	f7ff f942 	bl	80025a4 <HAL_PWREx_GetVoltageRange>
 8003320:	6178      	str	r0, [r7, #20]
 8003322:	e014      	b.n	800334e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	; 0x58
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800333c:	f7ff f932 	bl	80025a4 <HAL_PWREx_GetVoltageRange>
 8003340:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	4a1a      	ldr	r2, [pc, #104]	; (80033b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d10b      	bne.n	800336e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b80      	cmp	r3, #128	; 0x80
 800335a:	d913      	bls.n	8003384 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2ba0      	cmp	r3, #160	; 0xa0
 8003360:	d902      	bls.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003362:	2302      	movs	r3, #2
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	e00d      	b.n	8003384 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003368:	2301      	movs	r3, #1
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	e00a      	b.n	8003384 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b7f      	cmp	r3, #127	; 0x7f
 8003372:	d902      	bls.n	800337a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003374:	2302      	movs	r3, #2
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e004      	b.n	8003384 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b70      	cmp	r3, #112	; 0x70
 800337e:	d101      	bne.n	8003384 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003380:	2301      	movs	r3, #1
 8003382:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 020f 	bic.w	r2, r3, #15
 800338c:	4909      	ldr	r1, [pc, #36]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40022000 	.word	0x40022000

080033b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033be:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d00b      	beq.n	80033e6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d825      	bhi.n	8003420 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d008      	beq.n	80033ec <RCC_GetSysClockFreqFromPLLSource+0x34>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d11f      	bne.n	8003420 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033e2:	613b      	str	r3, [r7, #16]
    break;
 80033e4:	e01f      	b.n	8003426 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80033e8:	613b      	str	r3, [r7, #16]
    break;
 80033ea:	e01c      	b.n	8003426 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033ec:	4b21      	ldr	r3, [pc, #132]	; (8003474 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e005      	b.n	8003414 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341c:	613b      	str	r3, [r7, #16]
    break;
 800341e:	e002      	b.n	8003426 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
    break;
 8003424:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	3301      	adds	r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	fb03 f202 	mul.w	r2, r3, r2
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	0e5b      	lsrs	r3, r3, #25
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003466:	683b      	ldr	r3, [r7, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	40021000 	.word	0x40021000
 8003478:	00f42400 	.word	0x00f42400
 800347c:	007a1200 	.word	0x007a1200
 8003480:	0800489c 	.word	0x0800489c

08003484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800348c:	2300      	movs	r3, #0
 800348e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003490:	2300      	movs	r3, #0
 8003492:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349c:	2b00      	cmp	r3, #0
 800349e:	d040      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d02a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d825      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034ac:	2b60      	cmp	r3, #96	; 0x60
 80034ae:	d026      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034b0:	2b60      	cmp	r3, #96	; 0x60
 80034b2:	d821      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d006      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d81d      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d010      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80034c4:	e018      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034c6:	4b89      	ldr	r3, [pc, #548]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4a88      	ldr	r2, [pc, #544]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034d2:	e015      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fb02 	bl	8003ae4 <RCCEx_PLLSAI1_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e4:	e00c      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3320      	adds	r3, #32
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fbed 	bl	8003ccc <RCCEx_PLLSAI2_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	74fb      	strb	r3, [r7, #19]
      break;
 80034fc:	e000      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80034fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003506:	4b79      	ldr	r3, [pc, #484]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003508:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800350c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003514:	4975      	ldr	r1, [pc, #468]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800351c:	e001      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d047      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003536:	d030      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d82a      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800353e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003542:	d02a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003548:	d824      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800354a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354e:	d008      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003554:	d81e      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d010      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003560:	e018      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003562:	4b62      	ldr	r3, [pc, #392]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4a61      	ldr	r2, [pc, #388]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800356e:	e015      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fab4 	bl	8003ae4 <RCCEx_PLLSAI1_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003580:	e00c      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3320      	adds	r3, #32
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fb9f 	bl	8003ccc <RCCEx_PLLSAI2_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003592:	e003      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	74fb      	strb	r3, [r7, #19]
      break;
 8003598:	e000      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800359a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359c:	7cfb      	ldrb	r3, [r7, #19]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10b      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035a2:	4b52      	ldr	r3, [pc, #328]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	494e      	ldr	r1, [pc, #312]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035b8:	e001      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 809f 	beq.w	800370a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00d      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	4a40      	ldr	r2, [pc, #256]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6593      	str	r3, [r2, #88]	; 0x58
 80035f2:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fe:	2301      	movs	r3, #1
 8003600:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003602:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a3a      	ldr	r2, [pc, #232]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800360e:	f7fd fb27 	bl	8000c60 <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003614:	e009      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fd fb23 	bl	8000c60 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d902      	bls.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	74fb      	strb	r3, [r7, #19]
        break;
 8003628:	e005      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ef      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d15b      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800363c:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01f      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	429a      	cmp	r2, r3
 8003658:	d019      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003664:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003686:	4a19      	ldr	r2, [pc, #100]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d016      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd fae2 	bl	8000c60 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369e:	e00b      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fd fade 	bl	8000c60 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d902      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	74fb      	strb	r3, [r7, #19]
            break;
 80036b6:	e006      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ec      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10c      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	4903      	ldr	r1, [pc, #12]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036e4:	e008      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	74bb      	strb	r3, [r7, #18]
 80036ea:	e005      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f8:	7c7b      	ldrb	r3, [r7, #17]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d105      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fe:	4ba0      	ldr	r3, [pc, #640]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a9f      	ldr	r2, [pc, #636]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003716:	4b9a      	ldr	r3, [pc, #616]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f023 0203 	bic.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	4996      	ldr	r1, [pc, #600]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003738:	4b91      	ldr	r3, [pc, #580]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f023 020c 	bic.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	498e      	ldr	r1, [pc, #568]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	4985      	ldr	r1, [pc, #532]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800377c:	4b80      	ldr	r3, [pc, #512]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	497d      	ldr	r1, [pc, #500]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800379e:	4b78      	ldr	r3, [pc, #480]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	4974      	ldr	r1, [pc, #464]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c0:	4b6f      	ldr	r3, [pc, #444]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	496c      	ldr	r1, [pc, #432]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e2:	4b67      	ldr	r3, [pc, #412]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037f0:	4963      	ldr	r1, [pc, #396]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003804:	4b5e      	ldr	r3, [pc, #376]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003812:	495b      	ldr	r1, [pc, #364]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003826:	4b56      	ldr	r3, [pc, #344]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	4952      	ldr	r1, [pc, #328]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003848:	4b4d      	ldr	r3, [pc, #308]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	494a      	ldr	r1, [pc, #296]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800386a:	4b45      	ldr	r3, [pc, #276]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	4941      	ldr	r1, [pc, #260]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800388c:	4b3c      	ldr	r3, [pc, #240]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800388e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	4939      	ldr	r1, [pc, #228]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d028      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038bc:	4930      	ldr	r1, [pc, #192]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038cc:	d106      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ce:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4a2b      	ldr	r2, [pc, #172]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d8:	60d3      	str	r3, [r2, #12]
 80038da:	e011      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 f8f9 	bl	8003ae4 <RCCEx_PLLSAI1_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d04d      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003914:	d108      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003918:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800391e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003922:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003926:	e012      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003928:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003934:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003946:	490e      	ldr	r1, [pc, #56]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003956:	d106      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a08      	ldr	r2, [pc, #32]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800395e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003962:	60d3      	str	r3, [r2, #12]
 8003964:	e020      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396e:	d109      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a02      	ldr	r2, [pc, #8]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	60d3      	str	r3, [r2, #12]
 800397c:	e014      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f8a5 	bl	8003ae4 <RCCEx_PLLSAI1_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d028      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039b4:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c2:	4947      	ldr	r1, [pc, #284]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a41      	ldr	r2, [pc, #260]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039de:	60d3      	str	r3, [r2, #12]
 80039e0:	e011      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f876 	bl	8003ae4 <RCCEx_PLLSAI1_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01e      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a12:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a22:	492f      	ldr	r1, [pc, #188]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 f851 	bl	8003ae4 <RCCEx_PLLSAI1_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a5c:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a62:	f023 0204 	bic.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6c:	491c      	ldr	r1, [pc, #112]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a86:	f023 0218 	bic.w	r2, r3, #24
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	4913      	ldr	r1, [pc, #76]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d017      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab4:	490a      	ldr	r1, [pc, #40]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ad4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003af2:	4b72      	ldr	r3, [pc, #456]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003afe:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0203 	and.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d103      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
       ||
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d142      	bne.n	8003b9c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	e03f      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d018      	beq.n	8003b56 <RCCEx_PLLSAI1_Config+0x72>
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d825      	bhi.n	8003b74 <RCCEx_PLLSAI1_Config+0x90>
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d002      	beq.n	8003b32 <RCCEx_PLLSAI1_Config+0x4e>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d009      	beq.n	8003b44 <RCCEx_PLLSAI1_Config+0x60>
 8003b30:	e020      	b.n	8003b74 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b32:	4b62      	ldr	r3, [pc, #392]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11d      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b42:	e01a      	b.n	8003b7a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b44:	4b5d      	ldr	r3, [pc, #372]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d116      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b54:	e013      	b.n	8003b7e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b56:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b62:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b72:	e006      	b.n	8003b82 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	e004      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003b8a:	4b4c      	ldr	r3, [pc, #304]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4949      	ldr	r1, [pc, #292]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 8086 	bne.w	8003cb0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ba4:	4b45      	ldr	r3, [pc, #276]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a44      	ldr	r2, [pc, #272]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fd f856 	bl	8000c60 <HAL_GetTick>
 8003bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bb6:	e009      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb8:	f7fd f852 	bl	8000c60 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d902      	bls.n	8003bcc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8003bca:	e005      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ef      	bne.n	8003bb8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d168      	bne.n	8003cb0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d113      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be4:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6892      	ldr	r2, [r2, #8]
 8003bf0:	0211      	lsls	r1, r2, #8
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68d2      	ldr	r2, [r2, #12]
 8003bf6:	06d2      	lsls	r2, r2, #27
 8003bf8:	4311      	orrs	r1, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6852      	ldr	r2, [r2, #4]
 8003bfe:	3a01      	subs	r2, #1
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	430a      	orrs	r2, r1
 8003c04:	492d      	ldr	r1, [pc, #180]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
 8003c0a:	e02d      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d115      	bne.n	8003c3e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6892      	ldr	r2, [r2, #8]
 8003c1e:	0211      	lsls	r1, r2, #8
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6912      	ldr	r2, [r2, #16]
 8003c24:	0852      	lsrs	r2, r2, #1
 8003c26:	3a01      	subs	r2, #1
 8003c28:	0552      	lsls	r2, r2, #21
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6852      	ldr	r2, [r2, #4]
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	430a      	orrs	r2, r1
 8003c36:	4921      	ldr	r1, [pc, #132]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	610b      	str	r3, [r1, #16]
 8003c3c:	e014      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6892      	ldr	r2, [r2, #8]
 8003c4a:	0211      	lsls	r1, r2, #8
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6952      	ldr	r2, [r2, #20]
 8003c50:	0852      	lsrs	r2, r2, #1
 8003c52:	3a01      	subs	r2, #1
 8003c54:	0652      	lsls	r2, r2, #25
 8003c56:	4311      	orrs	r1, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6852      	ldr	r2, [r2, #4]
 8003c5c:	3a01      	subs	r2, #1
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	430a      	orrs	r2, r1
 8003c62:	4916      	ldr	r1, [pc, #88]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c68:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fc fff4 	bl	8000c60 <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c7a:	e009      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c7c:	f7fc fff0 	bl	8000c60 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d902      	bls.n	8003c90 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c8e:	e005      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ef      	beq.n	8003c7c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	4904      	ldr	r1, [pc, #16]	; (8003cbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	07ff800f 	.word	0x07ff800f
 8003cc4:	ff9f800f 	.word	0xff9f800f
 8003cc8:	f9ff800f 	.word	0xf9ff800f

08003ccc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cda:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ce6:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0203 	and.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d103      	bne.n	8003cfe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d142      	bne.n	8003d84 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	e03f      	b.n	8003d84 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d018      	beq.n	8003d3e <RCCEx_PLLSAI2_Config+0x72>
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d825      	bhi.n	8003d5c <RCCEx_PLLSAI2_Config+0x90>
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d002      	beq.n	8003d1a <RCCEx_PLLSAI2_Config+0x4e>
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d009      	beq.n	8003d2c <RCCEx_PLLSAI2_Config+0x60>
 8003d18:	e020      	b.n	8003d5c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d1a:	4b62      	ldr	r3, [pc, #392]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11d      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2a:	e01a      	b.n	8003d62 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3c:	e013      	b.n	8003d66 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d3e:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d4a:	4b56      	ldr	r3, [pc, #344]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d5a:	e006      	b.n	8003d6a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d60:	e004      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d108      	bne.n	8003d84 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003d72:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f023 0203 	bic.w	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4949      	ldr	r1, [pc, #292]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8086 	bne.w	8003e98 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d8c:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a44      	ldr	r2, [pc, #272]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fc ff62 	bl	8000c60 <HAL_GetTick>
 8003d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d9e:	e009      	b.n	8003db4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003da0:	f7fc ff5e 	bl	8000c60 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d902      	bls.n	8003db4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	73fb      	strb	r3, [r7, #15]
        break;
 8003db2:	e005      	b.n	8003dc0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ef      	bne.n	8003da0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d168      	bne.n	8003e98 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	4b35      	ldr	r3, [pc, #212]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6892      	ldr	r2, [r2, #8]
 8003dd8:	0211      	lsls	r1, r2, #8
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68d2      	ldr	r2, [r2, #12]
 8003dde:	06d2      	lsls	r2, r2, #27
 8003de0:	4311      	orrs	r1, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6852      	ldr	r2, [r2, #4]
 8003de6:	3a01      	subs	r2, #1
 8003de8:	0112      	lsls	r2, r2, #4
 8003dea:	430a      	orrs	r2, r1
 8003dec:	492d      	ldr	r1, [pc, #180]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	614b      	str	r3, [r1, #20]
 8003df2:	e02d      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d115      	bne.n	8003e26 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <RCCEx_PLLSAI2_Config+0x1e0>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6892      	ldr	r2, [r2, #8]
 8003e06:	0211      	lsls	r1, r2, #8
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6912      	ldr	r2, [r2, #16]
 8003e0c:	0852      	lsrs	r2, r2, #1
 8003e0e:	3a01      	subs	r2, #1
 8003e10:	0552      	lsls	r2, r2, #21
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6852      	ldr	r2, [r2, #4]
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	4921      	ldr	r1, [pc, #132]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	614b      	str	r3, [r1, #20]
 8003e24:	e014      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	0211      	lsls	r1, r2, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6952      	ldr	r2, [r2, #20]
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0652      	lsls	r2, r2, #25
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6852      	ldr	r2, [r2, #4]
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	4916      	ldr	r1, [pc, #88]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fc ff00 	bl	8000c60 <HAL_GetTick>
 8003e60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e62:	e009      	b.n	8003e78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e64:	f7fc fefc 	bl	8000c60 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d902      	bls.n	8003e78 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	73fb      	strb	r3, [r7, #15]
          break;
 8003e76:	e005      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ef      	beq.n	8003e64 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	4904      	ldr	r1, [pc, #16]	; (8003ea4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	07ff800f 	.word	0x07ff800f
 8003eac:	ff9f800f 	.word	0xff9f800f
 8003eb0:	f9ff800f 	.word	0xf9ff800f

08003eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e049      	b.n	8003f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc fda8 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f000 fab8 	bl	8004468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e047      	b.n	800400c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <HAL_TIM_Base_Start+0xb4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <HAL_TIM_Base_Start+0x66>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f96:	d018      	beq.n	8003fca <HAL_TIM_Base_Start+0x66>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	; (800401c <HAL_TIM_Base_Start+0xb8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_TIM_Base_Start+0x66>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <HAL_TIM_Base_Start+0xbc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_TIM_Base_Start+0x66>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <HAL_TIM_Base_Start+0xc0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_TIM_Base_Start+0x66>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1b      	ldr	r2, [pc, #108]	; (8004028 <HAL_TIM_Base_Start+0xc4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_TIM_Base_Start+0x66>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	; (800402c <HAL_TIM_Base_Start+0xc8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d115      	bne.n	8003ff6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <HAL_TIM_Base_Start+0xcc>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d015      	beq.n	8004008 <HAL_TIM_Base_Start+0xa4>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe2:	d011      	beq.n	8004008 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff4:	e008      	b.n	8004008 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e000      	b.n	800400a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40013400 	.word	0x40013400
 800402c:	40014000 	.word	0x40014000
 8004030:	00010007 	.word	0x00010007

08004034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0202 	mvn.w	r2, #2
 8004060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f9d8 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9ca 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f9db 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b04      	cmp	r3, #4
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0204 	mvn.w	r2, #4
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9ae 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f9a0 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f9b1 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d122      	bne.n	8004138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d11b      	bne.n	8004138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0208 	mvn.w	r2, #8
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2204      	movs	r2, #4
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f984 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f976 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f987 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b10      	cmp	r3, #16
 8004144:	d122      	bne.n	800418c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b10      	cmp	r3, #16
 8004152:	d11b      	bne.n	800418c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0210 	mvn.w	r2, #16
 800415c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2208      	movs	r2, #8
 8004162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f95a 	bl	800442c <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f94c 	bl	8004418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f95d 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b01      	cmp	r3, #1
 8004198:	d10e      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0201 	mvn.w	r2, #1
 80041b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f926 	bl	8004404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d10e      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d107      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fb08 	bl	80047f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f2:	d10e      	bne.n	8004212 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	2b80      	cmp	r3, #128	; 0x80
 8004200:	d107      	bne.n	8004212 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800420a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fafb 	bl	8004808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d10e      	bne.n	800423e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d107      	bne.n	800423e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f90b 	bl	8004454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b20      	cmp	r3, #32
 800424a:	d10e      	bne.n	800426a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b20      	cmp	r3, #32
 8004258:	d107      	bne.n	800426a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0220 	mvn.w	r2, #32
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fabb 	bl	80047e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_TIM_ConfigClockSource+0x1c>
 800428a:	2302      	movs	r3, #2
 800428c:	e0b6      	b.n	80043fc <HAL_TIM_ConfigClockSource+0x18a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ca:	d03e      	beq.n	800434a <HAL_TIM_ConfigClockSource+0xd8>
 80042cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d0:	f200 8087 	bhi.w	80043e2 <HAL_TIM_ConfigClockSource+0x170>
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	f000 8086 	beq.w	80043e8 <HAL_TIM_ConfigClockSource+0x176>
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d87f      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x170>
 80042e2:	2b70      	cmp	r3, #112	; 0x70
 80042e4:	d01a      	beq.n	800431c <HAL_TIM_ConfigClockSource+0xaa>
 80042e6:	2b70      	cmp	r3, #112	; 0x70
 80042e8:	d87b      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x170>
 80042ea:	2b60      	cmp	r3, #96	; 0x60
 80042ec:	d050      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0x11e>
 80042ee:	2b60      	cmp	r3, #96	; 0x60
 80042f0:	d877      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x170>
 80042f2:	2b50      	cmp	r3, #80	; 0x50
 80042f4:	d03c      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0xfe>
 80042f6:	2b50      	cmp	r3, #80	; 0x50
 80042f8:	d873      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x170>
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d058      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x13e>
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d86f      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x170>
 8004302:	2b30      	cmp	r3, #48	; 0x30
 8004304:	d064      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x15e>
 8004306:	2b30      	cmp	r3, #48	; 0x30
 8004308:	d86b      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x170>
 800430a:	2b20      	cmp	r3, #32
 800430c:	d060      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x15e>
 800430e:	2b20      	cmp	r3, #32
 8004310:	d867      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x170>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d05c      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x15e>
 8004316:	2b10      	cmp	r3, #16
 8004318:	d05a      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x15e>
 800431a:	e062      	b.n	80043e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	6899      	ldr	r1, [r3, #8]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f000 f9b0 	bl	8004690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800433e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	609a      	str	r2, [r3, #8]
      break;
 8004348:	e04f      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6899      	ldr	r1, [r3, #8]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f000 f999 	bl	8004690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436c:	609a      	str	r2, [r3, #8]
      break;
 800436e:	e03c      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	461a      	mov	r2, r3
 800437e:	f000 f90d 	bl	800459c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2150      	movs	r1, #80	; 0x50
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f966 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 800438e:	e02c      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	f000 f92c 	bl	80045fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2160      	movs	r1, #96	; 0x60
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f956 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 80043ae:	e01c      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	f000 f8ed 	bl	800459c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f946 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 80043ce:	e00c      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f000 f93d 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 80043e0:	e003      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
      break;
 80043e6:	e000      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a40      	ldr	r2, [pc, #256]	; (800457c <TIM_Base_SetConfig+0x114>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004486:	d00f      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3d      	ldr	r2, [pc, #244]	; (8004580 <TIM_Base_SetConfig+0x118>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00b      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d007      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <TIM_Base_SetConfig+0x120>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3a      	ldr	r2, [pc, #232]	; (800458c <TIM_Base_SetConfig+0x124>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2f      	ldr	r2, [pc, #188]	; (800457c <TIM_Base_SetConfig+0x114>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01f      	beq.n	8004502 <TIM_Base_SetConfig+0x9a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d01b      	beq.n	8004502 <TIM_Base_SetConfig+0x9a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <TIM_Base_SetConfig+0x118>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d017      	beq.n	8004502 <TIM_Base_SetConfig+0x9a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	; (8004584 <TIM_Base_SetConfig+0x11c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <TIM_Base_SetConfig+0x9a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <TIM_Base_SetConfig+0x120>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00f      	beq.n	8004502 <TIM_Base_SetConfig+0x9a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a29      	ldr	r2, [pc, #164]	; (800458c <TIM_Base_SetConfig+0x124>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00b      	beq.n	8004502 <TIM_Base_SetConfig+0x9a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a28      	ldr	r2, [pc, #160]	; (8004590 <TIM_Base_SetConfig+0x128>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <TIM_Base_SetConfig+0x9a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a27      	ldr	r2, [pc, #156]	; (8004594 <TIM_Base_SetConfig+0x12c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_Base_SetConfig+0x9a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a26      	ldr	r2, [pc, #152]	; (8004598 <TIM_Base_SetConfig+0x130>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d108      	bne.n	8004514 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a10      	ldr	r2, [pc, #64]	; (800457c <TIM_Base_SetConfig+0x114>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00f      	beq.n	8004560 <TIM_Base_SetConfig+0xf8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <TIM_Base_SetConfig+0x124>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00b      	beq.n	8004560 <TIM_Base_SetConfig+0xf8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a11      	ldr	r2, [pc, #68]	; (8004590 <TIM_Base_SetConfig+0x128>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_Base_SetConfig+0xf8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <TIM_Base_SetConfig+0x12c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_Base_SetConfig+0xf8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a0f      	ldr	r2, [pc, #60]	; (8004598 <TIM_Base_SetConfig+0x130>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d103      	bne.n	8004568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	615a      	str	r2, [r3, #20]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40013400 	.word	0x40013400
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800

0800459c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 030a 	bic.w	r3, r3, #10
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 0210 	bic.w	r2, r3, #16
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004636:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	f043 0307 	orr.w	r3, r3, #7
 800467c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	021a      	lsls	r2, r3, #8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e068      	b.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01d      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d018      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10c      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4313      	orrs	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40000c00 	.word	0x40000c00
 80047dc:	40014000 	.word	0x40014000

080047e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4d0d      	ldr	r5, [pc, #52]	; (8004854 <__libc_init_array+0x38>)
 8004820:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	2600      	movs	r6, #0
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	4d0b      	ldr	r5, [pc, #44]	; (800485c <__libc_init_array+0x40>)
 800482e:	4c0c      	ldr	r4, [pc, #48]	; (8004860 <__libc_init_array+0x44>)
 8004830:	f000 f820 	bl	8004874 <_init>
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	2600      	movs	r6, #0
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	080048cc 	.word	0x080048cc
 8004858:	080048cc 	.word	0x080048cc
 800485c:	080048cc 	.word	0x080048cc
 8004860:	080048d0 	.word	0x080048d0

08004864 <memset>:
 8004864:	4402      	add	r2, r0
 8004866:	4603      	mov	r3, r0
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	f803 1b01 	strb.w	r1, [r3], #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <_init>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	bf00      	nop
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr

08004880 <_fini>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr
