
lab2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001efc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  080020b8  080020b8  000120b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028fc  080028fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028fc  080028fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028fc  080028fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  08002910  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08002910  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009854  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001768  00000000  00000000  00029890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0002aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  0002b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294c8  00000000  00000000  0002bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007269  00000000  00000000  00055170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd5f5  00000000  00000000  0005c3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001599ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018bc  00000000  00000000  00159a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0015b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080020a0 	.word	0x080020a0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080020a0 	.word	0x080020a0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fa52 	bl	80006aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f895 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f925 	bl	8000458 <MX_GPIO_Init>
  MX_DAC1_Init();
 800020e:	f000 f8e3 	bl	80003d8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000212:	2100      	movs	r1, #0
 8000214:	4842      	ldr	r0, [pc, #264]	; (8000320 <main+0x124>)
 8000216:	f000 fbe8 	bl	80009ea <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800021a:	2110      	movs	r1, #16
 800021c:	4840      	ldr	r0, [pc, #256]	; (8000320 <main+0x124>)
 800021e:	f000 fbe4 	bl	80009ea <HAL_DAC_Start>
	uint8_t saw = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	74fb      	strb	r3, [r7, #19]
	uint8_t triangle = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	74bb      	strb	r3, [r7, #18]
	uint32_t sine =0;
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
	char status = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	72fb      	strb	r3, [r7, #11]
	int counterMax = 16;
 8000232:	2310      	movs	r3, #16
 8000234:	607b      	str	r3, [r7, #4]
	int counter = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    //LED
	    status = HAL_GPIO_ReadPin(push_button_GPIO_Port, push_button_Pin);
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	4839      	ldr	r0, [pc, #228]	; (8000324 <main+0x128>)
 8000240:	f000 ff1c 	bl	800107c <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	72fb      	strb	r3, [r7, #11]
	  	if (status == 0)
 8000248:	7afb      	ldrb	r3, [r7, #11]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d106      	bne.n	800025c <main+0x60>
	  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000254:	4834      	ldr	r0, [pc, #208]	; (8000328 <main+0x12c>)
 8000256:	f000 ff29 	bl	80010ac <HAL_GPIO_WritePin>
 800025a:	e005      	b.n	8000268 <main+0x6c>
	    else
	  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <main+0x12c>)
 8000264:	f000 ff22 	bl	80010ac <HAL_GPIO_WritePin>

	  	// Part2
		if (counter < 8){
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	2b07      	cmp	r3, #7
 800026c:	dc08      	bgt.n	8000280 <main+0x84>
			triangle = (counter+1)*20;
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	3301      	adds	r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	461a      	mov	r2, r3
 8000276:	0092      	lsls	r2, r2, #2
 8000278:	4413      	add	r3, r2
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	74bb      	strb	r3, [r7, #18]
 800027e:	e00a      	b.n	8000296 <main+0x9a>
		}else{
			triangle = 300 - counter*20;
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	b2db      	uxtb	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	1ad2      	subs	r2, r2, r3
 800028a:	0092      	lsls	r2, r2, #2
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	b2db      	uxtb	r3, r3
 8000292:	332c      	adds	r3, #44	; 0x2c
 8000294:	74bb      	strb	r3, [r7, #18]
		}

		saw = counter*14;
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	00d2      	lsls	r2, r2, #3
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	74fb      	strb	r3, [r7, #19]

		//sine
		sine =  100 * arm_sin_f32(2*PI*counter/counterMax) + 100;
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	ee07 3a90 	vmov	s15, r3
 80002aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ae:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800032c <main+0x130>
 80002b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	ee07 3a90 	vmov	s15, r3
 80002bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80002c4:	eeb0 0a66 	vmov.f32	s0, s13
 80002c8:	f001 fe78 	bl	8001fbc <arm_sin_f32>
 80002cc:	eef0 7a40 	vmov.f32	s15, s0
 80002d0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000330 <main+0x134>
 80002d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002d8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000330 <main+0x134>
 80002dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80002e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002e4:	ee17 3a90 	vmov	r3, s15
 80002e8:	60fb      	str	r3, [r7, #12]

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R,sine);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	2208      	movs	r2, #8
 80002ee:	2100      	movs	r1, #0
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0x124>)
 80002f2:	f000 fbcc 	bl	8000a8e <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, saw);
 80002f6:	7cfb      	ldrb	r3, [r7, #19]
 80002f8:	2208      	movs	r2, #8
 80002fa:	2110      	movs	r1, #16
 80002fc:	4808      	ldr	r0, [pc, #32]	; (8000320 <main+0x124>)
 80002fe:	f000 fbc6 	bl	8000a8e <HAL_DAC_SetValue>
		counter = (counter + 1) % counterMax;
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	fb93 f2f2 	sdiv	r2, r3, r2
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	fb01 f202 	mul.w	r2, r1, r2
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	617b      	str	r3, [r7, #20]
		HAL_Delay(0.5);
 8000316:	2000      	movs	r0, #0
 8000318:	f000 fa3c 	bl	8000794 <HAL_Delay>
	    status = HAL_GPIO_ReadPin(push_button_GPIO_Port, push_button_Pin);
 800031c:	e78d      	b.n	800023a <main+0x3e>
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	48000800 	.word	0x48000800
 8000328:	48000400 	.word	0x48000400
 800032c:	40c90fdb 	.word	0x40c90fdb
 8000330:	42c80000 	.word	0x42c80000

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b096      	sub	sp, #88	; 0x58
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	2244      	movs	r2, #68	; 0x44
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fea4 	bl	8002090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	463b      	mov	r3, r7
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000356:	f44f 7000 	mov.w	r0, #512	; 0x200
 800035a:	f000 fedf 	bl	800111c <HAL_PWREx_ControlVoltageScaling>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000364:	f000 f8d4 	bl	8000510 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000368:	2310      	movs	r3, #16
 800036a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000374:	2360      	movs	r3, #96	; 0x60
 8000376:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800037c:	2301      	movs	r3, #1
 800037e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000380:	2301      	movs	r3, #1
 8000382:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000384:	2328      	movs	r3, #40	; 0x28
 8000386:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000388:	2302      	movs	r3, #2
 800038a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800038c:	2302      	movs	r3, #2
 800038e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000390:	2302      	movs	r3, #2
 8000392:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0314 	add.w	r3, r7, #20
 8000398:	4618      	mov	r0, r3
 800039a:	f000 ff63 	bl	8001264 <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003a4:	f000 f8b4 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	230f      	movs	r3, #15
 80003aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ac:	2303      	movs	r3, #3
 80003ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003bc:	463b      	mov	r3, r7
 80003be:	2103      	movs	r1, #3
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fb69 	bl	8001a98 <HAL_RCC_ClockConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003cc:	f000 f8a0 	bl	8000510 <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	3758      	adds	r7, #88	; 0x58
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003de:	463b      	mov	r3, r7
 80003e0:	2228      	movs	r2, #40	; 0x28
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 fe53 	bl	8002090 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003ea:	4b19      	ldr	r3, [pc, #100]	; (8000450 <MX_DAC1_Init+0x78>)
 80003ec:	4a19      	ldr	r2, [pc, #100]	; (8000454 <MX_DAC1_Init+0x7c>)
 80003ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003f0:	4817      	ldr	r0, [pc, #92]	; (8000450 <MX_DAC1_Init+0x78>)
 80003f2:	f000 fad8 	bl	80009a6 <HAL_DAC_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003fc:	f000 f888 	bl	8000510 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800040c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800041a:	463b      	mov	r3, r7
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <MX_DAC1_Init+0x78>)
 8000422:	f000 fb59 	bl	8000ad8 <HAL_DAC_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 800042c:	f000 f870 	bl	8000510 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000430:	463b      	mov	r3, r7
 8000432:	2210      	movs	r2, #16
 8000434:	4619      	mov	r1, r3
 8000436:	4806      	ldr	r0, [pc, #24]	; (8000450 <MX_DAC1_Init+0x78>)
 8000438:	f000 fb4e 	bl	8000ad8 <HAL_DAC_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000442:	f000 f865 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	3728      	adds	r7, #40	; 0x28
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000028 	.word	0x20000028
 8000454:	40007400 	.word	0x40007400

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046e:	4b25      	ldr	r3, [pc, #148]	; (8000504 <MX_GPIO_Init+0xac>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a24      	ldr	r2, [pc, #144]	; (8000504 <MX_GPIO_Init+0xac>)
 8000474:	f043 0304 	orr.w	r3, r3, #4
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b22      	ldr	r3, [pc, #136]	; (8000504 <MX_GPIO_Init+0xac>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0304 	and.w	r3, r3, #4
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_GPIO_Init+0xac>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	4a1e      	ldr	r2, [pc, #120]	; (8000504 <MX_GPIO_Init+0xac>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <MX_GPIO_Init+0xac>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <MX_GPIO_Init+0xac>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	4a18      	ldr	r2, [pc, #96]	; (8000504 <MX_GPIO_Init+0xac>)
 80004a4:	f043 0302 	orr.w	r3, r3, #2
 80004a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <MX_GPIO_Init+0xac>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	f003 0302 	and.w	r3, r3, #2
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004bc:	4812      	ldr	r0, [pc, #72]	; (8000508 <MX_GPIO_Init+0xb0>)
 80004be:	f000 fdf5 	bl	80010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : push_button_Pin */
  GPIO_InitStruct.Pin = push_button_Pin;
 80004c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(push_button_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	4619      	mov	r1, r3
 80004d6:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_GPIO_Init+0xb4>)
 80004d8:	f000 fc3e 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4619      	mov	r1, r3
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <MX_GPIO_Init+0xb0>)
 80004f6:	f000 fc2f 	bl	8000d58 <HAL_GPIO_Init>

}
 80004fa:	bf00      	nop
 80004fc:	3720      	adds	r7, #32
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	48000400 	.word	0x48000400
 800050c:	48000800 	.word	0x48000800

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6613      	str	r3, [r2, #96]	; 0x60
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	6593      	str	r3, [r2, #88]	; 0x58
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_MspInit+0x44>)
 8000548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <HAL_DAC_MspInit+0x74>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d124      	bne.n	80005d0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_DAC_MspInit+0x78>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	4a14      	ldr	r2, [pc, #80]	; (80005dc <HAL_DAC_MspInit+0x78>)
 800058c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000590:	6593      	str	r3, [r2, #88]	; 0x58
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_DAC_MspInit+0x78>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_DAC_MspInit+0x78>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_DAC_MspInit+0x78>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_DAC_MspInit+0x78>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005b6:	2330      	movs	r3, #48	; 0x30
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fbc4 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	; 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40007400 	.word	0x40007400
 80005dc:	40021000 	.word	0x40021000

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <NMI_Handler+0x4>

080005e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <MemManage_Handler+0x4>

080005f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <UsageFault_Handler+0x4>

080005fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062c:	f000 f892 	bl	8000754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SystemInit+0x20>)
 800063a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <SystemInit+0x20>)
 8000640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000690 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800065c:	f7ff ffea 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <LoopForever+0x6>)
  ldr r1, =_edata
 8000662:	490d      	ldr	r1, [pc, #52]	; (8000698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <LoopForever+0xe>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000678:	4c0a      	ldr	r4, [pc, #40]	; (80006a4 <LoopForever+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000686:	f001 fcdf 	bl	8002048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800068a:	f7ff fdb7 	bl	80001fc <main>

0800068e <LoopForever>:

LoopForever:
    b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000690:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800069c:	08002904 	.word	0x08002904
  ldr r2, =_sbss
 80006a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a4:	20000040 	.word	0x20000040

080006a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_IRQHandler>

080006aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f943 	bl	8000940 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f80e 	bl	80006dc <HAL_InitTick>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d002      	beq.n	80006cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	e001      	b.n	80006d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006cc:	f7ff ff26 	bl	800051c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006d0:	79fb      	ldrb	r3, [r7, #7]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <HAL_InitTick+0x6c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d023      	beq.n	8000738 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_InitTick+0x70>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_InitTick+0x6c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000702:	fbb2 f3f3 	udiv	r3, r2, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f941 	bl	800098e <HAL_SYSTICK_Config>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10f      	bne.n	8000732 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	d809      	bhi.n	800072c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000718:	2200      	movs	r2, #0
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000720:	f000 f919 	bl	8000956 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <HAL_InitTick+0x74>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6013      	str	r3, [r2, #0]
 800072a:	e007      	b.n	800073c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800072c:	2301      	movs	r3, #1
 800072e:	73fb      	strb	r3, [r7, #15]
 8000730:	e004      	b.n	800073c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	73fb      	strb	r3, [r7, #15]
 8000736:	e001      	b.n	800073c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000008 	.word	0x20000008
 800074c:	20000000 	.word	0x20000000
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_IncTick+0x20>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_IncTick+0x24>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_IncTick+0x24>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008
 8000778:	2000003c 	.word	0x2000003c

0800077c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <HAL_GetTick+0x14>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	2000003c 	.word	0x2000003c

08000794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800079c:	f7ff ffee 	bl	800077c <HAL_GetTick>
 80007a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007ac:	d005      	beq.n	80007ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_Delay+0x44>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4413      	add	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ba:	bf00      	nop
 80007bc:	f7ff ffde 	bl	800077c <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d8f7      	bhi.n	80007bc <HAL_Delay+0x28>
  {
  }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	; (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43da      	mvns	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43d9      	mvns	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	4313      	orrs	r3, r2
         );
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3724      	adds	r7, #36	; 0x24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800090c:	d301      	bcc.n	8000912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090e:	2301      	movs	r3, #1
 8000910:	e00f      	b.n	8000932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <SysTick_Config+0x40>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091a:	210f      	movs	r1, #15
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000920:	f7ff ff8e 	bl	8000840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <SysTick_Config+0x40>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <SysTick_Config+0x40>)
 800092c:	2207      	movs	r2, #7
 800092e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	e000e010 	.word	0xe000e010

08000940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ff47 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000968:	f7ff ff5c 	bl	8000824 <__NVIC_GetPriorityGrouping>
 800096c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff ff8e 	bl	8000894 <NVIC_EncodePriority>
 8000978:	4602      	mov	r2, r0
 800097a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff5d 	bl	8000840 <__NVIC_SetPriority>
}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffb0 	bl	80008fc <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e014      	b.n	80009e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d105      	bne.n	80009ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fdcb 	bl	8000564 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2202      	movs	r2, #2
 80009d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2201      	movs	r2, #1
 80009de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	795b      	ldrb	r3, [r3, #5]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <HAL_DAC_Start+0x16>
 80009fc:	2302      	movs	r3, #2
 80009fe:	e040      	b.n	8000a82 <HAL_DAC_Start+0x98>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2202      	movs	r2, #2
 8000a0a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6819      	ldr	r1, [r3, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	2201      	movs	r2, #1
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10f      	bne.n	8000a4a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d11d      	bne.n	8000a74 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0201 	orr.w	r2, r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	e014      	b.n	8000a74 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d107      	bne.n	8000a74 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0202 	orr.w	r2, r2, #2
 8000a72:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b087      	sub	sp, #28
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	e004      	b.n	8000ac2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	3314      	adds	r3, #20
 8000ac0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d101      	bne.n	8000af4 <HAL_DAC_ConfigChannel+0x1c>
 8000af0:	2302      	movs	r3, #2
 8000af2:	e12a      	b.n	8000d4a <HAL_DAC_ConfigChannel+0x272>
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2201      	movs	r2, #1
 8000af8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2202      	movs	r2, #2
 8000afe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	d174      	bne.n	8000bf2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000b08:	f7ff fe38 	bl	800077c <HAL_GetTick>
 8000b0c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d134      	bne.n	8000b7e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b14:	e011      	b.n	8000b3a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b16:	f7ff fe31 	bl	800077c <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d90a      	bls.n	8000b3a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	f043 0208 	orr.w	r2, r3, #8
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2203      	movs	r2, #3
 8000b34:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e107      	b.n	8000d4a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1e6      	bne.n	8000b16 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fe23 	bl	8000794 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	69d2      	ldr	r2, [r2, #28]
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
 8000b58:	e01e      	b.n	8000b98 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b5a:	f7ff fe0f 	bl	800077c <HAL_GetTick>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d90a      	bls.n	8000b7e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	f043 0208 	orr.w	r2, r3, #8
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2203      	movs	r2, #3
 8000b78:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e0e5      	b.n	8000d4a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dbe8      	blt.n	8000b5a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff fe03 	bl	8000794 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	69d2      	ldr	r2, [r2, #28]
 8000b96:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	ea02 0103 	and.w	r1, r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	6a1a      	ldr	r2, [r3, #32]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	21ff      	movs	r1, #255	; 0xff
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	ea02 0103 	and.w	r1, r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	409a      	lsls	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d11d      	bne.n	8000c36 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c00:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	221f      	movs	r2, #31
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69fa      	ldr	r2, [r7, #28]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69fa      	ldr	r2, [r7, #28]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	2207      	movs	r2, #7
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69fa      	ldr	r2, [r7, #28]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	400a      	ands	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69fa      	ldr	r2, [r7, #28]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69fa      	ldr	r2, [r7, #28]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cda:	d104      	bne.n	8000ce6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	e018      	b.n	8000d18 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d104      	bne.n	8000cf8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	e00f      	b.n	8000d18 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000cf8:	f001 f894 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8000cfc:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <HAL_DAC_ConfigChannel+0x27c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d904      	bls.n	8000d10 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	e003      	b.n	8000d18 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d16:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	22c0      	movs	r2, #192	; 0xc0
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	400a      	ands	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	04c4b400 	.word	0x04c4b400

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	e166      	b.n	8001036 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8158 	beq.w	8001030 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d005      	beq.n	8000d98 <HAL_GPIO_Init+0x40>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d130      	bne.n	8000dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 0201 	and.w	r2, r3, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d017      	beq.n	8000e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d123      	bne.n	8000e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	6939      	ldr	r1, [r7, #16]
 8000e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0203 	and.w	r2, r3, #3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80b2 	beq.w	8001030 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	4b61      	ldr	r3, [pc, #388]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed0:	4a60      	ldr	r2, [pc, #384]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed8:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee4:	4a5c      	ldr	r2, [pc, #368]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f0e:	d02b      	beq.n	8000f68 <HAL_GPIO_Init+0x210>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a52      	ldr	r2, [pc, #328]	; (800105c <HAL_GPIO_Init+0x304>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d025      	beq.n	8000f64 <HAL_GPIO_Init+0x20c>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a51      	ldr	r2, [pc, #324]	; (8001060 <HAL_GPIO_Init+0x308>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d01f      	beq.n	8000f60 <HAL_GPIO_Init+0x208>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a50      	ldr	r2, [pc, #320]	; (8001064 <HAL_GPIO_Init+0x30c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d019      	beq.n	8000f5c <HAL_GPIO_Init+0x204>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <HAL_GPIO_Init+0x310>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d013      	beq.n	8000f58 <HAL_GPIO_Init+0x200>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a4e      	ldr	r2, [pc, #312]	; (800106c <HAL_GPIO_Init+0x314>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d00d      	beq.n	8000f54 <HAL_GPIO_Init+0x1fc>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_GPIO_Init+0x318>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d007      	beq.n	8000f50 <HAL_GPIO_Init+0x1f8>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x31c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_GPIO_Init+0x1f4>
 8000f48:	2307      	movs	r3, #7
 8000f4a:	e00e      	b.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	e00c      	b.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f50:	2306      	movs	r3, #6
 8000f52:	e00a      	b.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f54:	2305      	movs	r3, #5
 8000f56:	e008      	b.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e004      	b.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	f002 0203 	and.w	r2, r2, #3
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7a:	4937      	ldr	r1, [pc, #220]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_GPIO_Init+0x320>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fac:	4a32      	ldr	r2, [pc, #200]	; (8001078 <HAL_GPIO_Init+0x320>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_GPIO_Init+0x320>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <HAL_GPIO_Init+0x320>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_GPIO_Init+0x320>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001000:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <HAL_GPIO_Init+0x320>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_GPIO_Init+0x320>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_GPIO_Init+0x320>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	f47f ae91 	bne.w	8000d68 <HAL_GPIO_Init+0x10>
  }
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00
 8001068:	48001000 	.word	0x48001000
 800106c:	48001400 	.word	0x48001400
 8001070:	48001800 	.word	0x48001800
 8001074:	48001c00 	.word	0x48001c00
 8001078:	40010400 	.word	0x40010400

0800107c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	4013      	ands	r3, r2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e001      	b.n	800109e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_PWREx_GetVoltageRange+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ec:	d102      	bne.n	80010f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80010ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f2:	e00b      	b.n	800110c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_PWREx_GetVoltageRange+0x3c>)
 80010f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001102:	d102      	bne.n	800110a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001108:	e000      	b.n	800110c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800110a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40007000 	.word	0x40007000

0800111c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d141      	bne.n	80011ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001136:	d131      	bne.n	800119c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800113e:	4a46      	ldr	r2, [pc, #280]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001148:	4b43      	ldr	r3, [pc, #268]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001150:	4a41      	ldr	r2, [pc, #260]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001158:	4b40      	ldr	r3, [pc, #256]	; (800125c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2232      	movs	r2, #50	; 0x32
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	4a3f      	ldr	r2, [pc, #252]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	0c9b      	lsrs	r3, r3, #18
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800116e:	e002      	b.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3b01      	subs	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001182:	d102      	bne.n	800118a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f2      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001196:	d158      	bne.n	800124a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e057      	b.n	800124c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011a2:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011ac:	e04d      	b.n	800124a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b4:	d141      	bne.n	800123a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c2:	d131      	bne.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ca:	4a23      	ldr	r2, [pc, #140]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011dc:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2232      	movs	r2, #50	; 0x32
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	0c9b      	lsrs	r3, r3, #18
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011fa:	e002      	b.n	8001202 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3b01      	subs	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120e:	d102      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f2      	bne.n	80011fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001222:	d112      	bne.n	800124a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e011      	b.n	800124c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001238:	e007      	b.n	800124a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001248:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40007000 	.word	0x40007000
 800125c:	20000000 	.word	0x20000000
 8001260:	431bde83 	.word	0x431bde83

08001264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	f000 bc08 	b.w	8001a88 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001278:	4b96      	ldr	r3, [pc, #600]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001282:	4b94      	ldr	r3, [pc, #592]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80e4 	beq.w	8001462 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <HAL_RCC_OscConfig+0x4c>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	f040 808b 	bne.w	80013be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	f040 8087 	bne.w	80013be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012b0:	4b88      	ldr	r3, [pc, #544]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_OscConfig+0x64>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e3df      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1a      	ldr	r2, [r3, #32]
 80012cc:	4b81      	ldr	r3, [pc, #516]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <HAL_RCC_OscConfig+0x7e>
 80012d8:	4b7e      	ldr	r3, [pc, #504]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e0:	e005      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
 80012e2:	4b7c      	ldr	r3, [pc, #496]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d223      	bcs.n	800133a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fda0 	bl	8001e3c <RCC_SetFlashLatencyFromMSIRange>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e3c0      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001306:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a72      	ldr	r2, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b70      	ldr	r3, [pc, #448]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	496d      	ldr	r1, [pc, #436]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001324:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	4968      	ldr	r1, [pc, #416]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e025      	b.n	8001386 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133a:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a65      	ldr	r2, [pc, #404]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4960      	ldr	r1, [pc, #384]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001358:	4b5e      	ldr	r3, [pc, #376]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	495b      	ldr	r1, [pc, #364]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fd60 	bl	8001e3c <RCC_SetFlashLatencyFromMSIRange>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e380      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001386:	f000 fcc1 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 800138a:	4602      	mov	r2, r0
 800138c:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	4950      	ldr	r1, [pc, #320]	; (80014d8 <HAL_RCC_OscConfig+0x274>)
 8001398:	5ccb      	ldrb	r3, [r1, r3]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	fa22 f303 	lsr.w	r3, r2, r3
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <HAL_RCC_OscConfig+0x278>)
 80013a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a6:	4b4e      	ldr	r3, [pc, #312]	; (80014e0 <HAL_RCC_OscConfig+0x27c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f996 	bl	80006dc <HAL_InitTick>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d052      	beq.n	8001460 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	e364      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d032      	beq.n	800142c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c6:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a42      	ldr	r2, [pc, #264]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d2:	f7ff f9d3 	bl	800077c <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013da:	f7ff f9cf 	bl	800077c <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e34d      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a35      	ldr	r2, [pc, #212]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4930      	ldr	r1, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001416:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	492b      	ldr	r1, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
 800142a:	e01a      	b.n	8001462 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a28      	ldr	r2, [pc, #160]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001438:	f7ff f9a0 	bl	800077c <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001440:	f7ff f99c 	bl	800077c <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e31a      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1dc>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d073      	beq.n	8001556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b08      	cmp	r3, #8
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x21c>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d10e      	bne.n	8001498 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b03      	cmp	r3, #3
 800147e:	d10b      	bne.n	8001498 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d063      	beq.n	8001554 <HAL_RCC_OscConfig+0x2f0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d15f      	bne.n	8001554 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e2f7      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x24c>
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e025      	b.n	80014fc <HAL_RCC_OscConfig+0x298>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b8:	d114      	bne.n	80014e4 <HAL_RCC_OscConfig+0x280>
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a02      	ldr	r2, [pc, #8]	; (80014d4 <HAL_RCC_OscConfig+0x270>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e013      	b.n	80014fc <HAL_RCC_OscConfig+0x298>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	080020b8 	.word	0x080020b8
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000004 	.word	0x20000004
 80014e4:	4ba0      	ldr	r3, [pc, #640]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a9f      	ldr	r2, [pc, #636]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b9d      	ldr	r3, [pc, #628]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a9c      	ldr	r2, [pc, #624]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff f93a 	bl	800077c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff f936 	bl	800077c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e2b4      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151e:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x2a8>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff f926 	bl	800077c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff f922 	bl	800077c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e2a0      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001546:	4b88      	ldr	r3, [pc, #544]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x2d0>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d060      	beq.n	8001624 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d005      	beq.n	8001574 <HAL_RCC_OscConfig+0x310>
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b0c      	cmp	r3, #12
 800156c:	d119      	bne.n	80015a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d116      	bne.n	80015a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001574:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_OscConfig+0x328>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e27d      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	061b      	lsls	r3, r3, #24
 800159a:	4973      	ldr	r1, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a0:	e040      	b.n	8001624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d023      	beq.n	80015f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015aa:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff f8e1 	bl	800077c <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff f8dd 	bl	800077c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e25b      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	4b65      	ldr	r3, [pc, #404]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b62      	ldr	r3, [pc, #392]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	061b      	lsls	r3, r3, #24
 80015ea:	495f      	ldr	r1, [pc, #380]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
 80015f0:	e018      	b.n	8001624 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a5c      	ldr	r2, [pc, #368]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80015f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff f8bd 	bl	800077c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff f8b9 	bl	800077c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e237      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001618:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d03c      	beq.n	80016aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d01c      	beq.n	8001672 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001638:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163e:	4a4a      	ldr	r2, [pc, #296]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff f898 	bl	800077c <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff f894 	bl	800077c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e212      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ef      	beq.n	8001650 <HAL_RCC_OscConfig+0x3ec>
 8001670:	e01b      	b.n	80016aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001678:	4a3b      	ldr	r2, [pc, #236]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff f87b 	bl	800077c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff f877 	bl	800077c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1f5      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ef      	bne.n	800168a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80a6 	beq.w	8001804 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10d      	bne.n	80016e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d2:	6593      	str	r3, [r2, #88]	; 0x58
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e0:	2301      	movs	r3, #1
 80016e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x508>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d118      	bne.n	8001722 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_RCC_OscConfig+0x508>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_RCC_OscConfig+0x508>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fc:	f7ff f83e 	bl	800077c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001704:	f7ff f83a 	bl	800077c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1b8      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_RCC_OscConfig+0x508>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_RCC_OscConfig+0x4d8>
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800173a:	e029      	b.n	8001790 <HAL_RCC_OscConfig+0x52c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b05      	cmp	r3, #5
 8001742:	d115      	bne.n	8001770 <HAL_RCC_OscConfig+0x50c>
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	4a03      	ldr	r2, [pc, #12]	; (8001768 <HAL_RCC_OscConfig+0x504>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x52c>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40007000 	.word	0x40007000
 8001770:	4b9d      	ldr	r3, [pc, #628]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001776:	4a9c      	ldr	r2, [pc, #624]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001780:	4b99      	ldr	r3, [pc, #612]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001786:	4a98      	ldr	r2, [pc, #608]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d016      	beq.n	80017c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7fe fff0 	bl	800077c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7fe ffec 	bl	800077c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e168      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b6:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ed      	beq.n	80017a0 <HAL_RCC_OscConfig+0x53c>
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7fe ffd9 	bl	800077c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7fe ffd5 	bl	800077c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e151      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e4:	4b80      	ldr	r3, [pc, #512]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ed      	bne.n	80017ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b7b      	ldr	r3, [pc, #492]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	4a7a      	ldr	r2, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d03c      	beq.n	800188a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01c      	beq.n	8001852 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001818:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 800181a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181e:	4a72      	ldr	r2, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7fe ffa8 	bl	800077c <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001830:	f7fe ffa4 	bl	800077c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e122      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001842:	4b69      	ldr	r3, [pc, #420]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ef      	beq.n	8001830 <HAL_RCC_OscConfig+0x5cc>
 8001850:	e01b      	b.n	800188a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001852:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001858:	4a63      	ldr	r2, [pc, #396]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7fe ff8b 	bl	800077c <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800186a:	f7fe ff87 	bl	800077c <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e105      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800187c:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 800187e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ef      	bne.n	800186a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80f9 	beq.w	8001a86 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	2b02      	cmp	r3, #2
 800189a:	f040 80cf 	bne.w	8001a3c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0203 	and.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d12c      	bne.n	800190c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	3b01      	subs	r3, #1
 80018be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d123      	bne.n	800190c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d11b      	bne.n	800190c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d113      	bne.n	800190c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	3b01      	subs	r3, #1
 80018f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d109      	bne.n	800190c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d071      	beq.n	80019f0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d068      	beq.n	80019e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001912:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d105      	bne.n	800192a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0ac      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001938:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800193a:	f7fe ff1f 	bl	800077c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7fe ff1b 	bl	800077c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e099      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_RCC_OscConfig+0x788>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001970:	3a01      	subs	r2, #1
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	4311      	orrs	r1, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001982:	0852      	lsrs	r2, r2, #1
 8001984:	3a01      	subs	r2, #1
 8001986:	0552      	lsls	r2, r2, #21
 8001988:	4311      	orrs	r1, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800198e:	0852      	lsrs	r2, r2, #1
 8001990:	3a01      	subs	r2, #1
 8001992:	0652      	lsls	r2, r2, #25
 8001994:	4311      	orrs	r1, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800199a:	06d2      	lsls	r2, r2, #27
 800199c:	430a      	orrs	r2, r1
 800199e:	4912      	ldr	r1, [pc, #72]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019bc:	f7fe fede 	bl	800077c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7fe feda 	bl	800077c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e058      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RCC_OscConfig+0x784>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e2:	e050      	b.n	8001a86 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e04f      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d144      	bne.n	8001a86 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a14:	f7fe feb2 	bl	800077c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7fe feae 	bl	800077c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e02c      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x7b8>
 8001a3a:	e024      	b.n	8001a86 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d01f      	beq.n	8001a82 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7fe fe95 	bl	800077c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7fe fe91 	bl	800077c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e00f      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4905      	ldr	r1, [pc, #20]	; (8001a90 <HAL_RCC_OscConfig+0x82c>)
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_RCC_OscConfig+0x830>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e001      	b.n	8001a86 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	feeefffc 	.word	0xfeeefffc

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e11d      	b.n	8001cec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b90      	ldr	r3, [pc, #576]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b8d      	ldr	r3, [pc, #564]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 020f 	bic.w	r2, r3, #15
 8001ac6:	498b      	ldr	r1, [pc, #556]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e105      	b.n	8001cec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d908      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b7e      	ldr	r3, [pc, #504]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	497b      	ldr	r1, [pc, #492]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d079      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d11e      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0dc      	b.n	8001cec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001b32:	f000 f9dd 	bl	8001ef0 <RCC_GetSysClockFreqFromPLLSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a70      	ldr	r2, [pc, #448]	; (8001cfc <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d946      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b3e:	4b6e      	ldr	r3, [pc, #440]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d140      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b4a:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b52:	4a69      	ldr	r2, [pc, #420]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e035      	b.n	8001bcc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b68:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d115      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b9      	b.n	8001cec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b80:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0ad      	b.n	8001cec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0a5      	b.n	8001cec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ba0:	f000 f8b4 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <HAL_RCC_ClockConfig+0x264>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d90f      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001bac:	4b52      	ldr	r3, [pc, #328]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 0203 	bic.w	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4947      	ldr	r1, [pc, #284]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bde:	f7fe fdcd 	bl	800077c <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be6:	f7fe fdc9 	bl	800077c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e077      	b.n	8001cec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfc:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 020c 	and.w	r2, r3, #12
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d1eb      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b80      	cmp	r3, #128	; 0x80
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c14:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a37      	ldr	r2, [pc, #220]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d208      	bcs.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	492b      	ldr	r1, [pc, #172]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d210      	bcs.n	8001c7e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 020f 	bic.w	r2, r3, #15
 8001c64:	4923      	ldr	r1, [pc, #140]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e036      	b.n	8001cec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	4918      	ldr	r1, [pc, #96]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4910      	ldr	r1, [pc, #64]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cbc:	f000 f826 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <HAL_RCC_ClockConfig+0x268>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x26c>)
 8001cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fcfb 	bl	80006dc <HAL_InitTick>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	73fb      	strb	r3, [r7, #15]

  return status;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	04c4b400 	.word	0x04c4b400
 8001d00:	080020b8 	.word	0x080020b8
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x34>
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d121      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d11e      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	e005      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d68:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d102      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	e004      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d134      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d003      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0xac>
 8001db0:	e005      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001db4:	617b      	str	r3, [r7, #20]
      break;
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dba:	617b      	str	r3, [r7, #20]
      break;
 8001dbc:	e002      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	617b      	str	r3, [r7, #20]
      break;
 8001dc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	fb03 f202 	mul.w	r2, r3, r2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	0e5b      	lsrs	r3, r3, #25
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	3301      	adds	r3, #1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e04:	69bb      	ldr	r3, [r7, #24]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	080020c8 	.word	0x080020c8
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	007a1200 	.word	0x007a1200

08001e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e54:	f7ff f942 	bl	80010dc <HAL_PWREx_GetVoltageRange>
 8001e58:	6178      	str	r0, [r7, #20]
 8001e5a:	e014      	b.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e74:	f7ff f932 	bl	80010dc <HAL_PWREx_GetVoltageRange>
 8001e78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8c:	d10b      	bne.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d913      	bls.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2ba0      	cmp	r3, #160	; 0xa0
 8001e98:	d902      	bls.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e00d      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	e00a      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eaa:	d902      	bls.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001eac:	2302      	movs	r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	e004      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b70      	cmp	r3, #112	; 0x70
 8001eb6:	d101      	bne.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb8:	2301      	movs	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 020f 	bic.w	r2, r3, #15
 8001ec4:	4909      	ldr	r1, [pc, #36]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40022000 	.word	0x40022000

08001ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d00b      	beq.n	8001f1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d825      	bhi.n	8001f58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d008      	beq.n	8001f24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d11f      	bne.n	8001f58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f1a:	613b      	str	r3, [r7, #16]
    break;
 8001f1c:	e01f      	b.n	8001f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001f20:	613b      	str	r3, [r7, #16]
    break;
 8001f22:	e01c      	b.n	8001f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e005      	b.n	8001f4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	613b      	str	r3, [r7, #16]
    break;
 8001f56:	e002      	b.n	8001f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
    break;
 8001f5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	fb03 f202 	mul.w	r2, r3, r2
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0e5b      	lsrs	r3, r3, #25
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001f9e:	683b      	ldr	r3, [r7, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	007a1200 	.word	0x007a1200
 8001fb8:	080020c8 	.word	0x080020c8

08001fbc <arm_sin_f32>:
 8001fbc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800203c <arm_sin_f32+0x80>
 8001fc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001fc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fcc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001fd0:	d504      	bpl.n	8001fdc <arm_sin_f32+0x20>
 8001fd2:	ee17 3a90 	vmov	r3, s15
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002040 <arm_sin_f32+0x84>
 8001fe4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001fe8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001fec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001ff0:	ee17 3a90 	vmov	r3, s15
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ffa:	d21a      	bcs.n	8002032 <arm_sin_f32+0x76>
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002004:	1c59      	adds	r1, r3, #1
 8002006:	ee30 0a67 	vsub.f32	s0, s0, s15
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <arm_sin_f32+0x88>)
 800200c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002010:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002014:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	edd2 6a00 	vldr	s13, [r2]
 8002020:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002024:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002030:	4770      	bx	lr
 8002032:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002036:	2101      	movs	r1, #1
 8002038:	2300      	movs	r3, #0
 800203a:	e7e6      	b.n	800200a <arm_sin_f32+0x4e>
 800203c:	3e22f983 	.word	0x3e22f983
 8002040:	44000000 	.word	0x44000000
 8002044:	080020f8 	.word	0x080020f8

08002048 <__libc_init_array>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	4d0d      	ldr	r5, [pc, #52]	; (8002080 <__libc_init_array+0x38>)
 800204c:	4c0d      	ldr	r4, [pc, #52]	; (8002084 <__libc_init_array+0x3c>)
 800204e:	1b64      	subs	r4, r4, r5
 8002050:	10a4      	asrs	r4, r4, #2
 8002052:	2600      	movs	r6, #0
 8002054:	42a6      	cmp	r6, r4
 8002056:	d109      	bne.n	800206c <__libc_init_array+0x24>
 8002058:	4d0b      	ldr	r5, [pc, #44]	; (8002088 <__libc_init_array+0x40>)
 800205a:	4c0c      	ldr	r4, [pc, #48]	; (800208c <__libc_init_array+0x44>)
 800205c:	f000 f820 	bl	80020a0 <_init>
 8002060:	1b64      	subs	r4, r4, r5
 8002062:	10a4      	asrs	r4, r4, #2
 8002064:	2600      	movs	r6, #0
 8002066:	42a6      	cmp	r6, r4
 8002068:	d105      	bne.n	8002076 <__libc_init_array+0x2e>
 800206a:	bd70      	pop	{r4, r5, r6, pc}
 800206c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002070:	4798      	blx	r3
 8002072:	3601      	adds	r6, #1
 8002074:	e7ee      	b.n	8002054 <__libc_init_array+0xc>
 8002076:	f855 3b04 	ldr.w	r3, [r5], #4
 800207a:	4798      	blx	r3
 800207c:	3601      	adds	r6, #1
 800207e:	e7f2      	b.n	8002066 <__libc_init_array+0x1e>
 8002080:	080028fc 	.word	0x080028fc
 8002084:	080028fc 	.word	0x080028fc
 8002088:	080028fc 	.word	0x080028fc
 800208c:	08002900 	.word	0x08002900

08002090 <memset>:
 8002090:	4402      	add	r2, r0
 8002092:	4603      	mov	r3, r0
 8002094:	4293      	cmp	r3, r2
 8002096:	d100      	bne.n	800209a <memset+0xa>
 8002098:	4770      	bx	lr
 800209a:	f803 1b01 	strb.w	r1, [r3], #1
 800209e:	e7f9      	b.n	8002094 <memset+0x4>

080020a0 <_init>:
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	bf00      	nop
 80020a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a6:	bc08      	pop	{r3}
 80020a8:	469e      	mov	lr, r3
 80020aa:	4770      	bx	lr

080020ac <_fini>:
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	bf00      	nop
 80020b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b2:	bc08      	pop	{r3}
 80020b4:	469e      	mov	lr, r3
 80020b6:	4770      	bx	lr
