
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bec  08007bec  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf4  08007bf4  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08007bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b4  200000f4  08007cf0  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012a8  08007cf0  000212a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f461  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000427d  00000000  00000000  0003f585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  00043808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  00045280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed69  00000000  00000000  00046b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002037e  00000000  00000000  00075879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ac64  00000000  00000000  00095bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b085b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e0  00000000  00000000  001b08ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007a3c 	.word	0x08007a3c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000f8 	.word	0x200000f8
 80001fc:	08007a3c 	.word	0x08007a3c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000110 	.word	0x20000110
 80005e4:	20000164 	.word	0x20000164

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f001 faed 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f85b 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f937 	bl	8000868 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005fa:	f000 f8a9 	bl	8000750 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005fe:	f000 f8e7 	bl	80007d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize I2C sensors */
  BSP_ACCELERO_Init();
 8000602:	f000 fe0b 	bl	800121c <BSP_ACCELERO_Init>
  BSP_MAGNETO_Init();
 8000606:	f000 fea7 	bl	8001358 <BSP_MAGNETO_Init>
  BSP_PSENSOR_Init();
 800060a:	f000 ff03 	bl	8001414 <BSP_PSENSOR_Init>
  BSP_HSENSOR_Init();
 800060e:	f000 fe75 	bl	80012fc <BSP_HSENSOR_Init>

  /* Set low power mode for accelerometer and magnetometer */
  BSP_ACCELERO_LowPower(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fe40 	bl	8001298 <BSP_ACCELERO_LowPower>
  BSP_MAGNETO_LowPower(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fec9 	bl	80013b0 <BSP_MAGNETO_LowPower>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of press_button */
  osThreadDef(press_button, press_button_task, osPriorityNormal, 0, 128);
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <main+0xac>)
 8000620:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  press_buttonHandle = osThreadCreate(osThread(press_button), NULL);
 8000632:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fb32 	bl	8005ca2 <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <main+0xb0>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of read_sensor */
  osThreadDef(read_sensor, read_sensor_task, osPriorityIdle, 0, 128);
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <main+0xb4>)
 8000646:	f107 0420 	add.w	r4, r7, #32
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_sensorHandle = osThreadCreate(osThread(read_sensor), NULL);
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fb1f 	bl	8005ca2 <osThreadCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <main+0xb8>)
 8000668:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmit_data */
  osThreadDef(transmit_data, transmit_data_task, osPriorityIdle, 0, 128);
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <main+0xbc>)
 800066c:	1d3c      	adds	r4, r7, #4
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmit_dataHandle = osThreadCreate(osThread(transmit_data), NULL);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f005 fb0e 	bl	8005ca2 <osThreadCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <main+0xc0>)
 800068a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800068c:	f005 fb02 	bl	8005c94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0xa8>
 8000692:	bf00      	nop
 8000694:	08007a80 	.word	0x08007a80
 8000698:	20000448 	.word	0x20000448
 800069c:	08007a9c 	.word	0x08007a9c
 80006a0:	2000044c 	.word	0x2000044c
 80006a4:	08007ab8 	.word	0x08007ab8
 80006a8:	20000450 	.word	0x20000450

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	; 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	; 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fd56 	bl	800716c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d2:	f002 fc93 	bl	8002ffc <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 fa2c 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e0:	2310      	movs	r3, #16
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ec:	2360      	movs	r3, #96	; 0x60
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f4:	2301      	movs	r3, #1
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006fc:	2328      	movs	r3, #40	; 0x28
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fd17 	bl	8003144 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800071c:	f000 fa0c 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2103      	movs	r1, #3
 8000738:	4618      	mov	r0, r3
 800073a:	f003 f91d 	bl	8003978 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000744:	f000 f9f8 	bl	8000b38 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3758      	adds	r7, #88	; 0x58
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C2_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C2_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C2_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_I2C2_Init+0x74>)
 800078c:	f001 fdec 	bl	8002368 <HAL_I2C_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 f9cf 	bl	8000b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	2100      	movs	r1, #0
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <MX_I2C2_Init+0x74>)
 800079e:	f002 fb75 	bl	8002e8c <HAL_I2CEx_ConfigAnalogFilter>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f9c6 	bl	8000b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007ac:	2100      	movs	r1, #0
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_I2C2_Init+0x74>)
 80007b0:	f002 fbb7 	bl	8002f22 <HAL_I2CEx_ConfigDigitalFilter>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f9bd 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000364 	.word	0x20000364
 80007c8:	40005800 	.word	0x40005800
 80007cc:	10909cec 	.word	0x10909cec

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_USART1_UART_Init+0x90>)
 80007d6:	4a23      	ldr	r2, [pc, #140]	; (8000864 <MX_USART1_UART_Init+0x94>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_USART1_UART_Init+0x90>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_USART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_USART1_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_USART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_USART1_UART_Init+0x90>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_USART1_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_USART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART1_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000818:	4811      	ldr	r0, [pc, #68]	; (8000860 <MX_USART1_UART_Init+0x90>)
 800081a:	f004 fb87 	bl	8004f2c <HAL_UART_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f988 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_USART1_UART_Init+0x90>)
 800082c:	f005 f950 	bl	8005ad0 <HAL_UARTEx_SetTxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 f97f 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <MX_USART1_UART_Init+0x90>)
 800083e:	f005 f985 	bl	8005b4c <HAL_UARTEx_SetRxFifoThreshold>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 f976 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_USART1_UART_Init+0x90>)
 800084e:	f005 f906 	bl	8005a5e <HAL_UARTEx_DisableFifoMode>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 f96e 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200003b8 	.word	0x200003b8
 8000864:	40013800 	.word	0x40013800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <MX_GPIO_Init+0xa4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a22      	ldr	r2, [pc, #136]	; (800090c <MX_GPIO_Init+0xa4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_GPIO_Init+0xa4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_GPIO_Init+0xa4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_GPIO_Init+0xa4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_GPIO_Init+0xa4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <MX_GPIO_Init+0xa8>)
 80008b6:	f001 fd27 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : push_button_Pin */
  GPIO_InitStruct.Pin = push_button_Pin;
 80008ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(push_button_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	4810      	ldr	r0, [pc, #64]	; (8000914 <MX_GPIO_Init+0xac>)
 80008d2:	f001 fa95 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <MX_GPIO_Init+0xa8>)
 80008f0:	f001 fa86 	bl	8001e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2105      	movs	r1, #5
 80008f8:	2028      	movs	r0, #40	; 0x28
 80008fa:	f001 fa57 	bl	8001dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008fe:	2028      	movs	r0, #40	; 0x28
 8000900:	f001 fa70 	bl	8001de4 <HAL_NVIC_EnableIRQ>

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	48000400 	.word	0x48000400
 8000914:	48000800 	.word	0x48000800

08000918 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_13){
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000928:	d10f      	bne.n	800094a <HAL_GPIO_EXTI_Callback+0x32>
		pressed=1;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_GPIO_EXTI_Callback+0x40>)
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]

		if(sensorType>=3 ){
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_GPIO_EXTI_Callback+0x44>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b02      	cmp	r3, #2
 8000936:	dd03      	ble.n	8000940 <HAL_GPIO_EXTI_Callback+0x28>
			sensorType = 0;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_GPIO_EXTI_Callback+0x44>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
		}else{
			sensorType ++;
		}
	}
}
 800093e:	e004      	b.n	800094a <HAL_GPIO_EXTI_Callback+0x32>
			sensorType ++;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_GPIO_EXTI_Callback+0x44>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <HAL_GPIO_EXTI_Callback+0x44>)
 8000948:	6013      	str	r3, [r2, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200004d0 	.word	0x200004d0
 800095c:	20000454 	.word	0x20000454

08000960 <press_button_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_press_button_task */
void press_button_task(void const * argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	for(;;){
		osDelay(30000);
 8000968:	f247 5030 	movw	r0, #30000	; 0x7530
 800096c:	f005 f9e5 	bl	8005d3a <osDelay>
		if(pressed==0){
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <press_button_task+0x3c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f7      	bne.n	8000968 <press_button_task+0x8>
			pressed=1;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <press_button_task+0x3c>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
			if(sensorType >=3 ){
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <press_button_task+0x40>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	dd03      	ble.n	800098e <press_button_task+0x2e>
				sensorType = 0;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <press_button_task+0x40>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	e7ec      	b.n	8000968 <press_button_task+0x8>
			}else{
				sensorType ++;
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <press_button_task+0x40>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a02      	ldr	r2, [pc, #8]	; (80009a0 <press_button_task+0x40>)
 8000996:	6013      	str	r3, [r2, #0]
		osDelay(30000);
 8000998:	e7e6      	b.n	8000968 <press_button_task+0x8>
 800099a:	bf00      	nop
 800099c:	200004d0 	.word	0x200004d0
 80009a0:	20000454 	.word	0x20000454

080009a4 <read_sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor_task */
void read_sensor_task(void const * argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f005 f9c4 	bl	8005d3a <osDelay>

    		  humidity = BSP_HSENSOR_ReadHumidity();
 80009b2:	f000 fcc3 	bl	800133c <BSP_HSENSOR_ReadHumidity>
 80009b6:	eef0 7a40 	vmov.f32	s15, s0
 80009ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009be:	edc7 7a00 	vstr	s15, [r7]
 80009c2:	783b      	ldrb	r3, [r7, #0]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <read_sensor_task+0x4c>)
 80009c8:	701a      	strb	r2, [r3, #0]

    		  pressure = BSP_PSENSOR_ReadPressure();
 80009ca:	f000 fd43 	bl	8001454 <BSP_PSENSOR_ReadPressure>
 80009ce:	eef0 7a40 	vmov.f32	s15, s0
 80009d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d6:	edc7 7a00 	vstr	s15, [r7]
 80009da:	783b      	ldrb	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <read_sensor_task+0x50>)
 80009e0:	701a      	strb	r2, [r3, #0]

    		  BSP_MAGNETO_GetXYZ(magneto);
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <read_sensor_task+0x54>)
 80009e4:	f000 fcfe 	bl	80013e4 <BSP_MAGNETO_GetXYZ>

    		  BSP_ACCELERO_AccGetXYZ(accelero);
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <read_sensor_task+0x58>)
 80009ea:	f000 fc6f 	bl	80012cc <BSP_ACCELERO_AccGetXYZ>
    osDelay(100);
 80009ee:	e7dd      	b.n	80009ac <read_sensor_task+0x8>
 80009f0:	20000458 	.word	0x20000458
 80009f4:	20000459 	.word	0x20000459
 80009f8:	2000045c 	.word	0x2000045c
 80009fc:	20000464 	.word	0x20000464

08000a00 <transmit_data_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_data_task */
void transmit_data_task(void const * argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_data_task */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(100);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f005 f996 	bl	8005d3a <osDelay>


	    	  if (sensorType == 0 && pressed == 1){
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <transmit_data_task+0xe4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10e      	bne.n	8000a34 <transmit_data_task+0x34>
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <transmit_data_task+0xe8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d10a      	bne.n	8000a34 <transmit_data_task+0x34>
	    		  sprintf(buffer, "Humidity: %d \n", (int) humidity);
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <transmit_data_task+0xec>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4932      	ldr	r1, [pc, #200]	; (8000af0 <transmit_data_task+0xf0>)
 8000a26:	4833      	ldr	r0, [pc, #204]	; (8000af4 <transmit_data_task+0xf4>)
 8000a28:	f006 fba8 	bl	800717c <siprintf>

				  pressed = 0;
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <transmit_data_task+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	e04b      	b.n	8000acc <transmit_data_task+0xcc>
	    	  }else if (sensorType == 1 && pressed == 1){
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <transmit_data_task+0xe4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10e      	bne.n	8000a5a <transmit_data_task+0x5a>
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <transmit_data_task+0xe8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10a      	bne.n	8000a5a <transmit_data_task+0x5a>
	    		  sprintf(buffer, "Pressure: %d \n", (int) pressure);
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <transmit_data_task+0xf8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	492c      	ldr	r1, [pc, #176]	; (8000afc <transmit_data_task+0xfc>)
 8000a4c:	4829      	ldr	r0, [pc, #164]	; (8000af4 <transmit_data_task+0xf4>)
 8000a4e:	f006 fb95 	bl	800717c <siprintf>

				  pressed = 0;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <transmit_data_task+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	e038      	b.n	8000acc <transmit_data_task+0xcc>
	    	  }else if (sensorType == 2 && pressed == 1){
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <transmit_data_task+0xe4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d118      	bne.n	8000a94 <transmit_data_task+0x94>
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <transmit_data_task+0xe8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d114      	bne.n	8000a94 <transmit_data_task+0x94>
	    		  sprintf(buffer, "Magneto X, Y, Z: %.2d, %.2d, %.2d \n", (int) magneto[0], (int) magneto[1], (int) magneto[2]);
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <transmit_data_task+0x100>)
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <transmit_data_task+0x100>)
 8000a74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <transmit_data_task+0x100>)
 8000a7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	460b      	mov	r3, r1
 8000a84:	491f      	ldr	r1, [pc, #124]	; (8000b04 <transmit_data_task+0x104>)
 8000a86:	481b      	ldr	r0, [pc, #108]	; (8000af4 <transmit_data_task+0xf4>)
 8000a88:	f006 fb78 	bl	800717c <siprintf>

				  pressed = 0;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <transmit_data_task+0xe8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e01b      	b.n	8000acc <transmit_data_task+0xcc>
	    	  }else if (sensorType == 3 && pressed == 1){
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <transmit_data_task+0xe4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d117      	bne.n	8000acc <transmit_data_task+0xcc>
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <transmit_data_task+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d113      	bne.n	8000acc <transmit_data_task+0xcc>
	    		  sprintf(buffer, "Accelero X, Y, Z: %.2d, %.2d, %.2d \n", (int) accelero[0], (int) accelero[1], (int) accelero[2]);
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <transmit_data_task+0x108>)
 8000aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <transmit_data_task+0x108>)
 8000aae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <transmit_data_task+0x108>)
 8000ab6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	460b      	mov	r3, r1
 8000abe:	4913      	ldr	r1, [pc, #76]	; (8000b0c <transmit_data_task+0x10c>)
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <transmit_data_task+0xf4>)
 8000ac2:	f006 fb5b 	bl	800717c <siprintf>

				  pressed = 0;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <transmit_data_task+0xe8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
	    	  }
	    	  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, (uint16_t) strlen(buffer), 100);
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <transmit_data_task+0xf4>)
 8000ace:	f7ff fb97 	bl	8000200 <strlen>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	4906      	ldr	r1, [pc, #24]	; (8000af4 <transmit_data_task+0xf4>)
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <transmit_data_task+0x110>)
 8000adc:	f004 fa76 	bl	8004fcc <HAL_UART_Transmit>
	    osDelay(100);
 8000ae0:	e792      	b.n	8000a08 <transmit_data_task+0x8>
 8000ae2:	bf00      	nop
 8000ae4:	20000454 	.word	0x20000454
 8000ae8:	200004d0 	.word	0x200004d0
 8000aec:	20000458 	.word	0x20000458
 8000af0:	08007ad4 	.word	0x08007ad4
 8000af4:	2000046c 	.word	0x2000046c
 8000af8:	20000459 	.word	0x20000459
 8000afc:	08007ae4 	.word	0x08007ae4
 8000b00:	2000045c 	.word	0x2000045c
 8000b04:	08007af4 	.word	0x08007af4
 8000b08:	20000464 	.word	0x20000464
 8000b0c:	08007b18 	.word	0x08007b18
 8000b10:	200003b8 	.word	0x200003b8

08000b14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b26:	f001 f869 	bl	8001bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40001000 	.word	0x40001000

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6613      	str	r3, [r2, #96]	; 0x60
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	f06f 0001 	mvn.w	r0, #1
 8000b82:	f001 f913 	bl	8001dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ae      	sub	sp, #184	; 0xb8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2294      	movs	r2, #148	; 0x94
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f006 fad9 	bl	800716c <memset>
  if(hi2c->Instance==I2C2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_I2C_MspInit+0xb0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d13b      	bne.n	8000c3c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 f9c1 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bdc:	f7ff ffac 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c00:	2312      	movs	r3, #18
 8000c02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c12:	2304      	movs	r3, #4
 8000c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <HAL_I2C_MspInit+0xb8>)
 8000c20:	f001 f8ee 	bl	8001e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	37b8      	adds	r7, #184	; 0xb8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40005800 	.word	0x40005800
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000400 	.word	0x48000400

08000c50 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <HAL_I2C_MspDeInit+0x3c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10f      	bne.n	8000c82 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_I2C_MspDeInit+0x40>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_I2C_MspDeInit+0x40>)
 8000c68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <HAL_I2C_MspDeInit+0x44>)
 8000c74:	f001 fa56 	bl	8002124 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000c78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_I2C_MspDeInit+0x44>)
 8000c7e:	f001 fa51 	bl	8002124 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40005800 	.word	0x40005800
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48000400 	.word	0x48000400

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0ae      	sub	sp, #184	; 0xb8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	2294      	movs	r2, #148	; 0x94
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 fa57 	bl	800716c <memset>
  if(huart->Instance==USART1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <HAL_UART_MspInit+0xb0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d13a      	bne.n	8000d3e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 f93f 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce0:	f7ff ff2a 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0xb4>)
 8000ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce8:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <HAL_UART_MspInit+0xb4>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_UART_MspInit+0xb4>)
 8000cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_UART_MspInit+0xb4>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <HAL_UART_MspInit+0xb4>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_UART_MspInit+0xb4>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000d3a:	f001 f861 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	37b8      	adds	r7, #184	; 0xb8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40013800 	.word	0x40013800
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000400 	.word	0x48000400

08000d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	; 0x38
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d62:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <HAL_InitTick+0xe0>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a33      	ldr	r2, [pc, #204]	; (8000e34 <HAL_InitTick+0xe0>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <HAL_InitTick+0xe0>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d7a:	f107 0210 	add.w	r2, r7, #16
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fff5 	bl	8003d74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d103      	bne.n	8000d9c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d94:	f002 ffc2 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8000d98:	6378      	str	r0, [r7, #52]	; 0x34
 8000d9a:	e004      	b.n	8000da6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d9c:	f002 ffbe 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8000da0:	4603      	mov	r3, r0
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da8:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <HAL_InitTick+0xe4>)
 8000daa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dae:	0c9b      	lsrs	r3, r3, #18
 8000db0:	3b01      	subs	r3, #1
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <HAL_InitTick+0xe8>)
 8000db6:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <HAL_InitTick+0xec>)
 8000db8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_InitTick+0xe8>)
 8000dbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dc2:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <HAL_InitTick+0xe8>)
 8000dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_InitTick+0xe8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_InitTick+0xe8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_InitTick+0xe8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dda:	4818      	ldr	r0, [pc, #96]	; (8000e3c <HAL_InitTick+0xe8>)
 8000ddc:	f003 fdd4 	bl	8004988 <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000de6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d11b      	bne.n	8000e26 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <HAL_InitTick+0xe8>)
 8000df0:	f003 fe2c 	bl	8004a4c <HAL_TIM_Base_Start_IT>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d111      	bne.n	8000e26 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e02:	2036      	movs	r0, #54	; 0x36
 8000e04:	f000 ffee 	bl	8001de4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b0f      	cmp	r3, #15
 8000e0c:	d808      	bhi.n	8000e20 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	2036      	movs	r0, #54	; 0x36
 8000e14:	f000 ffca 	bl	8001dac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_InitTick+0xf0>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e002      	b.n	8000e26 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3738      	adds	r7, #56	; 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	431bde83 	.word	0x431bde83
 8000e3c:	200004d4 	.word	0x200004d4
 8000e40:	40001000 	.word	0x40001000
 8000e44:	20000084 	.word	0x20000084

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(push_button_Pin);
 8000e78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e7c:	f001 fa5c 	bl	8002338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <TIM6_DAC_IRQHandler+0x10>)
 8000e8a:	f003 fe4f 	bl	8004b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200004d4 	.word	0x200004d4

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f006 f918 	bl	80070fc <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200a0000 	.word	0x200a0000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	20000520 	.word	0x20000520
 8000f00:	200012a8 	.word	0x200012a8

08000f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f2c:	f7ff ffea 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f32:	490d      	ldr	r1, [pc, #52]	; (8000f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <LoopForever+0xe>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f48:	4c0a      	ldr	r4, [pc, #40]	; (8000f74 <LoopForever+0x16>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f006 f8d7 	bl	8007108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f5a:	f7ff fb45 	bl	80005e8 <main>

08000f5e <LoopForever>:

LoopForever:
    b LoopForever
 8000f5e:	e7fe      	b.n	8000f5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f60:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000f6c:	08007bfc 	.word	0x08007bfc
  ldr r2, =_sbss
 8000f70:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000f74:	200012a8 	.word	0x200012a8

08000f78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC1_IRQHandler>
	...

08000f7c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a26      	ldr	r2, [pc, #152]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000f9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fa0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000fa2:	2312      	movs	r3, #18
 8000fa4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <I2Cx_MspInit+0xac>)
 8000fba:	f000 ff21 	bl	8001e00 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4818      	ldr	r0, [pc, #96]	; (8001028 <I2Cx_MspInit+0xac>)
 8000fc6:	f000 ff1b 	bl	8001e00 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fec:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff2:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <I2Cx_MspInit+0xa8>)
 8000ff4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ff8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	2021      	movs	r0, #33	; 0x21
 8001000:	f000 fed4 	bl	8001dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001004:	2021      	movs	r0, #33	; 0x21
 8001006:	f000 feed 	bl	8001de4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	210f      	movs	r1, #15
 800100e:	2022      	movs	r0, #34	; 0x22
 8001010:	f000 fecc 	bl	8001dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001014:	2022      	movs	r0, #34	; 0x22
 8001016:	f000 fee5 	bl	8001de4 <HAL_NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400

0800102c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <I2Cx_Init+0x54>)
 8001038:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a11      	ldr	r2, [pc, #68]	; (8001084 <I2Cx_Init+0x58>)
 800103e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff89 	bl	8000f7c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 f97c 	bl	8002368 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001070:	2100      	movs	r1, #0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f001 ff0a 	bl	8002e8c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005800 	.word	0x40005800
 8001084:	00702681 	.word	0x00702681

08001088 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af04      	add	r7, sp, #16
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4603      	mov	r3, r0
 8001098:	72fb      	strb	r3, [r7, #11]
 800109a:	460b      	mov	r3, r1
 800109c:	813b      	strh	r3, [r7, #8]
 800109e:	4613      	mov	r3, r2
 80010a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010a6:	7afb      	ldrb	r3, [r7, #11]
 80010a8:	b299      	uxth	r1, r3
 80010aa:	88f8      	ldrh	r0, [r7, #6]
 80010ac:	893a      	ldrh	r2, [r7, #8]
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4603      	mov	r3, r0
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f001 fb24 	bl	800270c <HAL_I2C_Mem_Read>
 80010c4:	4603      	mov	r3, r0
 80010c6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	4619      	mov	r1, r3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 f832 	bl	800113c <I2Cx_Error>
  }
  return status;
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b08a      	sub	sp, #40	; 0x28
 80010e6:	af04      	add	r7, sp, #16
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	4608      	mov	r0, r1
 80010ec:	4611      	mov	r1, r2
 80010ee:	461a      	mov	r2, r3
 80010f0:	4603      	mov	r3, r0
 80010f2:	72fb      	strb	r3, [r7, #11]
 80010f4:	460b      	mov	r3, r1
 80010f6:	813b      	strh	r3, [r7, #8]
 80010f8:	4613      	mov	r3, r2
 80010fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001100:	7afb      	ldrb	r3, [r7, #11]
 8001102:	b299      	uxth	r1, r3
 8001104:	88f8      	ldrh	r0, [r7, #6]
 8001106:	893a      	ldrh	r2, [r7, #8]
 8001108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4603      	mov	r3, r0
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f001 f9e3 	bl	80024e4 <HAL_I2C_Mem_Write>
 800111e:	4603      	mov	r3, r0
 8001120:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	4619      	mov	r1, r3
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f805 	bl	800113c <I2Cx_Error>
  }
  return status;
 8001132:	7dfb      	ldrb	r3, [r7, #23]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f001 f99c 	bl	8002486 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff6c 	bl	800102c <I2Cx_Init>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <SENSOR_IO_Init+0x10>)
 8001162:	f7ff ff63 	bl	800102c <I2Cx_Init>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000524 	.word	0x20000524

08001170 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af02      	add	r7, sp, #8
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	460b      	mov	r3, r1
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	4613      	mov	r3, r2
 8001180:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	b29a      	uxth	r2, r3
 8001186:	79f9      	ldrb	r1, [r7, #7]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	1d7b      	adds	r3, r7, #5
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <SENSOR_IO_Write+0x30>)
 8001194:	f7ff ffa5 	bl	80010e2 <I2Cx_WriteMultiple>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000524 	.word	0x20000524

080011a4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	79f9      	ldrb	r1, [r7, #7]
 80011be:	2301      	movs	r3, #1
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	f107 030f 	add.w	r3, r7, #15
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <SENSOR_IO_Read+0x38>)
 80011cc:	f7ff ff5c 	bl	8001088 <I2Cx_ReadMultiple>

  return read_value;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000524 	.word	0x20000524

080011e0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	603a      	str	r2, [r7, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	460b      	mov	r3, r1
 80011f0:	71bb      	strb	r3, [r7, #6]
 80011f2:	4613      	mov	r3, r2
 80011f4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	79f9      	ldrb	r1, [r7, #7]
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <SENSOR_IO_ReadMultiple+0x38>)
 8001208:	f7ff ff3e 	bl	8001088 <I2Cx_ReadMultiple>
 800120c:	4603      	mov	r3, r0
 800120e:	b29b      	uxth	r3, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000524 	.word	0x20000524

0800121c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001226:	2300      	movs	r3, #0
 8001228:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <BSP_ACCELERO_Init+0x74>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	4798      	blx	r3
 8001230:	4603      	mov	r3, r0
 8001232:	2b6a      	cmp	r3, #106	; 0x6a
 8001234:	d002      	beq.n	800123c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e024      	b.n	8001286 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <BSP_ACCELERO_Init+0x78>)
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <BSP_ACCELERO_Init+0x74>)
 8001240:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001242:	2330      	movs	r3, #48	; 0x30
 8001244:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800124a:	2300      	movs	r3, #0
 800124c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800124e:	2340      	movs	r3, #64	; 0x40
 8001250:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800125a:	797a      	ldrb	r2, [r7, #5]
 800125c:	7abb      	ldrb	r3, [r7, #10]
 800125e:	4313      	orrs	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001264:	7a3b      	ldrb	r3, [r7, #8]
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	b2db      	uxtb	r3, r3
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <BSP_ACCELERO_Init+0x78>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
  }  

  return ret;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000050 	.word	0x20000050
 8001294:	20000578 	.word	0x20000578

08001298 <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <BSP_ACCELERO_LowPower+0x30>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00a      	beq.n	80012c0 <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <BSP_ACCELERO_LowPower+0x30>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <BSP_ACCELERO_LowPower+0x30>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	4610      	mov	r0, r2
 80012be:	4798      	blx	r3
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000578 	.word	0x20000578

080012cc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
    }
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000578 	.word	0x20000578

080012fc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <BSP_HSENSOR_Init+0x38>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	20be      	movs	r0, #190	; 0xbe
 8001308:	4798      	blx	r3
 800130a:	4603      	mov	r3, r0
 800130c:	2bbc      	cmp	r3, #188	; 0xbc
 800130e:	d002      	beq.n	8001316 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	e009      	b.n	800132a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <BSP_HSENSOR_Init+0x3c>)
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <BSP_HSENSOR_Init+0x38>)
 800131a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <BSP_HSENSOR_Init+0x3c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	20be      	movs	r0, #190	; 0xbe
 8001324:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800132a:	687b      	ldr	r3, [r7, #4]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000004 	.word	0x20000004
 8001338:	2000057c 	.word	0x2000057c

0800133c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	20be      	movs	r0, #190	; 0xbe
 8001348:	4798      	blx	r3
 800134a:	eef0 7a40 	vmov.f32	s15, s0
}
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000057c 	.word	0x2000057c

08001358 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <BSP_MAGNETO_Init+0x50>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	4798      	blx	r3
 8001368:	4603      	mov	r3, r0
 800136a:	2b3d      	cmp	r3, #61	; 0x3d
 800136c:	d002      	beq.n	8001374 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e013      	b.n	800139c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <BSP_MAGNETO_Init+0x54>)
 8001376:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <BSP_MAGNETO_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800137a:	2358      	movs	r3, #88	; 0x58
 800137c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800137e:	2300      	movs	r3, #0
 8001380:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001382:	2300      	movs	r3, #0
 8001384:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001386:	2308      	movs	r3, #8
 8001388:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800138a:	2340      	movs	r3, #64	; 0x40
 800138c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <BSP_MAGNETO_Init+0x54>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	463a      	mov	r2, r7
 8001396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800139a:	4798      	blx	r3
  } 

  return ret;  
 800139c:	79fb      	ldrb	r3, [r7, #7]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000010 	.word	0x20000010
 80013ac:	20000580 	.word	0x20000580

080013b0 <BSP_MAGNETO_LowPower>:

/**
  * @brief  Set/Unset the MAGNETO in low power mode.
  */
void BSP_MAGNETO_LowPower(uint16_t status)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
  /* Put the magnetometer in low power mode */
  if(MagnetoDrv != NULL)
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <BSP_MAGNETO_LowPower+0x30>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00a      	beq.n	80013d8 <BSP_MAGNETO_LowPower+0x28>
  {
    if(MagnetoDrv->LowPower != NULL)
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <BSP_MAGNETO_LowPower+0x30>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <BSP_MAGNETO_LowPower+0x28>
    {
      MagnetoDrv->LowPower(status);
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <BSP_MAGNETO_LowPower+0x30>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	88fa      	ldrh	r2, [r7, #6]
 80013d4:	4610      	mov	r0, r2
 80013d6:	4798      	blx	r3
    }
  }
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000580 	.word	0x20000580

080013e4 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <BSP_MAGNETO_GetXYZ+0x2c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d009      	beq.n	8001408 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <BSP_MAGNETO_GetXYZ+0x2c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	4798      	blx	r3
    }
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000580 	.word	0x20000580

08001414 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <BSP_PSENSOR_Init+0x38>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	20ba      	movs	r0, #186	; 0xba
 8001420:	4798      	blx	r3
 8001422:	4603      	mov	r3, r0
 8001424:	2bb1      	cmp	r3, #177	; 0xb1
 8001426:	d002      	beq.n	800142e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e009      	b.n	8001442 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <BSP_PSENSOR_Init+0x3c>)
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <BSP_PSENSOR_Init+0x38>)
 8001432:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <BSP_PSENSOR_Init+0x3c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	20ba      	movs	r0, #186	; 0xba
 800143c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001442:	687b      	ldr	r3, [r7, #4]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000044 	.word	0x20000044
 8001450:	20000584 	.word	0x20000584

08001454 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <BSP_PSENSOR_ReadPressure+0x18>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	20ba      	movs	r0, #186	; 0xba
 8001460:	4798      	blx	r3
 8001462:	eef0 7a40 	vmov.f32	s15, s0
}
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000584 	.word	0x20000584

08001470 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2120      	movs	r1, #32
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe8f 	bl	80011a4 <SENSOR_IO_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f023 0303 	bic.w	r3, r3, #3
 80014a0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014b0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	2120      	movs	r1, #32
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe58 	bl	8001170 <SENSOR_IO_Write>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80014d6:	f7ff fe41 	bl	800115c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	210f      	movs	r1, #15
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe5f 	bl	80011a4 <SENSOR_IO_Read>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2d8      	uxtb	r0, r3
 8001502:	f107 020c 	add.w	r2, r7, #12
 8001506:	2302      	movs	r3, #2
 8001508:	21b0      	movs	r1, #176	; 0xb0
 800150a:	f7ff fe69 	bl	80011e0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800150e:	7b3b      	ldrb	r3, [r7, #12]
 8001510:	085b      	lsrs	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001516:	7b7b      	ldrb	r3, [r7, #13]
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2d8      	uxtb	r0, r3
 8001522:	f107 020c 	add.w	r2, r7, #12
 8001526:	2302      	movs	r3, #2
 8001528:	21b6      	movs	r1, #182	; 0xb6
 800152a:	f7ff fe59 	bl	80011e0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	b2d8      	uxtb	r0, r3
 8001540:	f107 020c 	add.w	r2, r7, #12
 8001544:	2302      	movs	r3, #2
 8001546:	21ba      	movs	r1, #186	; 0xba
 8001548:	f7ff fe4a 	bl	80011e0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800154c:	7b7b      	ldrb	r3, [r7, #13]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	7b3b      	ldrb	r3, [r7, #12]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	b2d8      	uxtb	r0, r3
 800155e:	f107 020c 	add.w	r2, r7, #12
 8001562:	2302      	movs	r3, #2
 8001564:	21a8      	movs	r1, #168	; 0xa8
 8001566:	f7ff fe3b 	bl	80011e0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	7b3b      	ldrb	r3, [r7, #12]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001578:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800157c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800158e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015a0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80015a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80015ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80015da:	edd7 7a04 	vldr	s15, [r7, #16]
 80015de:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001624 <HTS221_H_ReadHumidity+0x130>
 80015e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	dd01      	ble.n	80015f0 <HTS221_H_ReadHumidity+0xfc>
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HTS221_H_ReadHumidity+0x134>)
 80015ee:	e00a      	b.n	8001606 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80015f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	d502      	bpl.n	8001604 <HTS221_H_ReadHumidity+0x110>
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e000      	b.n	8001606 <HTS221_H_ReadHumidity+0x112>
 8001604:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001606:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001608:	edd7 7a04 	vldr	s15, [r7, #16]
 800160c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001610:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001614:	eef0 7a66 	vmov.f32	s15, s13
}
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	447a0000 	.word	0x447a0000
 8001628:	447a0000 	.word	0x447a0000

0800162c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	463b      	mov	r3, r7
 8001634:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001638:	783b      	ldrb	r3, [r7, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	2120      	movs	r1, #32
 800163e:	203c      	movs	r0, #60	; 0x3c
 8001640:	f7ff fd96 	bl	8001170 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	461a      	mov	r2, r3
 8001648:	2121      	movs	r1, #33	; 0x21
 800164a:	203c      	movs	r0, #60	; 0x3c
 800164c:	f7ff fd90 	bl	8001170 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001650:	78bb      	ldrb	r3, [r7, #2]
 8001652:	461a      	mov	r2, r3
 8001654:	2122      	movs	r1, #34	; 0x22
 8001656:	203c      	movs	r0, #60	; 0x3c
 8001658:	f7ff fd8a 	bl	8001170 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	461a      	mov	r2, r3
 8001660:	2123      	movs	r1, #35	; 0x23
 8001662:	203c      	movs	r0, #60	; 0x3c
 8001664:	f7ff fd84 	bl	8001170 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001668:	793b      	ldrb	r3, [r7, #4]
 800166a:	461a      	mov	r2, r3
 800166c:	2124      	movs	r1, #36	; 0x24
 800166e:	203c      	movs	r0, #60	; 0x3c
 8001670:	f7ff fd7e 	bl	8001170 <SENSOR_IO_Write>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001686:	2122      	movs	r1, #34	; 0x22
 8001688:	203c      	movs	r0, #60	; 0x3c
 800168a:	f7ff fd8b 	bl	80011a4 <SENSOR_IO_Read>
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f023 0303 	bic.w	r3, r3, #3
 8001698:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f043 0303 	orr.w	r3, r3, #3
 80016a0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	461a      	mov	r2, r3
 80016a6:	2122      	movs	r1, #34	; 0x22
 80016a8:	203c      	movs	r0, #60	; 0x3c
 80016aa:	f7ff fd61 	bl	8001170 <SENSOR_IO_Write>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80016ba:	f7ff fd4f 	bl	800115c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80016be:	210f      	movs	r1, #15
 80016c0:	203c      	movs	r0, #60	; 0x3c
 80016c2:	f7ff fd6f 	bl	80011a4 <SENSOR_IO_Read>
 80016c6:	4603      	mov	r3, r0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}

080016cc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80016da:	2122      	movs	r1, #34	; 0x22
 80016dc:	203c      	movs	r0, #60	; 0x3c
 80016de:	f7ff fd61 	bl	80011a4 <SENSOR_IO_Read>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	f023 0320 	bic.w	r3, r3, #32
 80016ec:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	461a      	mov	r2, r3
 8001700:	2122      	movs	r1, #34	; 0x22
 8001702:	203c      	movs	r0, #60	; 0x3c
 8001704:	f7ff fd34 	bl	8001170 <SENSOR_IO_Write>
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001718:	2300      	movs	r3, #0
 800171a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001726:	2121      	movs	r1, #33	; 0x21
 8001728:	203c      	movs	r0, #60	; 0x3c
 800172a:	f7ff fd3b 	bl	80011a4 <SENSOR_IO_Read>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001732:	f107 0208 	add.w	r2, r7, #8
 8001736:	2306      	movs	r3, #6
 8001738:	21a8      	movs	r1, #168	; 0xa8
 800173a:	203c      	movs	r0, #60	; 0x3c
 800173c:	f7ff fd50 	bl	80011e0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
 8001744:	e01c      	b.n	8001780 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	3301      	adds	r3, #1
 800174c:	3320      	adds	r3, #32
 800174e:	443b      	add	r3, r7
 8001750:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001754:	b29b      	uxth	r3, r3
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b29a      	uxth	r2, r3
 800175a:	7ffb      	ldrb	r3, [r7, #31]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	3320      	adds	r3, #32
 8001760:	443b      	add	r3, r7
 8001762:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4413      	add	r3, r2
 800176a:	b29a      	uxth	r2, r3
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	b212      	sxth	r2, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	3320      	adds	r3, #32
 8001774:	443b      	add	r3, r7
 8001776:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	3301      	adds	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d9df      	bls.n	8001746 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800178c:	2b60      	cmp	r3, #96	; 0x60
 800178e:	d013      	beq.n	80017b8 <LIS3MDL_MagReadXYZ+0xa8>
 8001790:	2b60      	cmp	r3, #96	; 0x60
 8001792:	dc14      	bgt.n	80017be <LIS3MDL_MagReadXYZ+0xae>
 8001794:	2b40      	cmp	r3, #64	; 0x40
 8001796:	d00c      	beq.n	80017b2 <LIS3MDL_MagReadXYZ+0xa2>
 8001798:	2b40      	cmp	r3, #64	; 0x40
 800179a:	dc10      	bgt.n	80017be <LIS3MDL_MagReadXYZ+0xae>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <LIS3MDL_MagReadXYZ+0x96>
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d003      	beq.n	80017ac <LIS3MDL_MagReadXYZ+0x9c>
 80017a4:	e00b      	b.n	80017be <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <LIS3MDL_MagReadXYZ+0xfc>)
 80017a8:	61bb      	str	r3, [r7, #24]
    break;
 80017aa:	e008      	b.n	80017be <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <LIS3MDL_MagReadXYZ+0x100>)
 80017ae:	61bb      	str	r3, [r7, #24]
    break;
 80017b0:	e005      	b.n	80017be <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <LIS3MDL_MagReadXYZ+0x104>)
 80017b4:	61bb      	str	r3, [r7, #24]
    break;
 80017b6:	e002      	b.n	80017be <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <LIS3MDL_MagReadXYZ+0x108>)
 80017ba:	61bb      	str	r3, [r7, #24]
    break;    
 80017bc:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	77fb      	strb	r3, [r7, #31]
 80017c2:	e01a      	b.n	80017fa <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	3320      	adds	r3, #32
 80017ca:	443b      	add	r3, r7
 80017cc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e0:	7ffb      	ldrb	r3, [r7, #31]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ec:	ee17 2a90 	vmov	r2, s15
 80017f0:	b212      	sxth	r2, r2
 80017f2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80017f4:	7ffb      	ldrb	r3, [r7, #31]
 80017f6:	3301      	adds	r3, #1
 80017f8:	77fb      	strb	r3, [r7, #31]
 80017fa:	7ffb      	ldrb	r3, [r7, #31]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d9e1      	bls.n	80017c4 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	3e0f5c29 	.word	0x3e0f5c29
 8001810:	3e947ae1 	.word	0x3e947ae1
 8001814:	3edc28f6 	.word	0x3edc28f6
 8001818:	3f147ae1 	.word	0x3f147ae1

0800181c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f879 	bl	8001920 <LPS22HB_Init>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001844:	f7ff fc8a 	bl	800115c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	210f      	movs	r1, #15
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fca8 	bl	80011a4 <SENSOR_IO_Read>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	74fb      	strb	r3, [r7, #19]
 8001876:	e013      	b.n	80018a0 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	7cfb      	ldrb	r3, [r7, #19]
 800187e:	3328      	adds	r3, #40	; 0x28
 8001880:	b2db      	uxtb	r3, r3
 8001882:	7cfc      	ldrb	r4, [r7, #19]
 8001884:	4619      	mov	r1, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f7ff fc8c 	bl	80011a4 <SENSOR_IO_Read>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	f104 0318 	add.w	r3, r4, #24
 8001894:	443b      	add	r3, r7
 8001896:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800189a:	7cfb      	ldrb	r3, [r7, #19]
 800189c:	3301      	adds	r3, #1
 800189e:	74fb      	strb	r3, [r7, #19]
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d9e8      	bls.n	8001878 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	74fb      	strb	r3, [r7, #19]
 80018aa:	e00f      	b.n	80018cc <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	3318      	adds	r3, #24
 80018b0:	443b      	add	r3, r7
 80018b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80018b6:	461a      	mov	r2, r3
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80018c6:	7cfb      	ldrb	r3, [r7, #19]
 80018c8:	3301      	adds	r3, #1
 80018ca:	74fb      	strb	r3, [r7, #19]
 80018cc:	7cfb      	ldrb	r3, [r7, #19]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d9ec      	bls.n	80018ac <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018e2:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2264      	movs	r2, #100	; 0x64
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da01      	bge.n	80018f8 <LPS22HB_P_ReadPressure+0x94>
 80018f4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80018f8:	131b      	asrs	r3, r3, #12
 80018fa:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001906:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800191c <LPS22HB_P_ReadPressure+0xb8>
 800190a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800190e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	42c80000 	.word	0x42c80000

08001920 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	211a      	movs	r1, #26
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc37 	bl	80011a4 <SENSOR_IO_Read>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	211a      	movs	r1, #26
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fc0c 	bl	8001170 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2110      	movs	r1, #16
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fc20 	bl	80011a4 <SENSOR_IO_Read>
 8001964:	4603      	mov	r3, r0
 8001966:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800196e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001976:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	f023 0302 	bic.w	r3, r3, #2
 800197e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	2110      	movs	r1, #16
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fbed 	bl	8001170 <SENSOR_IO_Write>
}  
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80019ac:	2110      	movs	r1, #16
 80019ae:	20d4      	movs	r0, #212	; 0xd4
 80019b0:	f7ff fbf8 	bl	80011a4 <SENSOR_IO_Read>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80019bc:	7bbb      	ldrb	r3, [r7, #14]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80019c4:	7bba      	ldrb	r2, [r7, #14]
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	461a      	mov	r2, r3
 80019d0:	2110      	movs	r1, #16
 80019d2:	20d4      	movs	r0, #212	; 0xd4
 80019d4:	f7ff fbcc 	bl	8001170 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80019d8:	2112      	movs	r1, #18
 80019da:	20d4      	movs	r0, #212	; 0xd4
 80019dc:	f7ff fbe2 	bl	80011a4 <SENSOR_IO_Read>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80019f2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80019f4:	7bba      	ldrb	r2, [r7, #14]
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
 80019fe:	461a      	mov	r2, r3
 8001a00:	2112      	movs	r1, #18
 8001a02:	20d4      	movs	r0, #212	; 0xd4
 8001a04:	f7ff fbb4 	bl	8001170 <SENSOR_IO_Write>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	20d4      	movs	r0, #212	; 0xd4
 8001a1e:	f7ff fbc1 	bl	80011a4 <SENSOR_IO_Read>
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	461a      	mov	r2, r3
 8001a32:	2110      	movs	r1, #16
 8001a34:	20d4      	movs	r0, #212	; 0xd4
 8001a36:	f7ff fb9b 	bl	8001170 <SENSOR_IO_Write>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001a46:	f7ff fb89 	bl	800115c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	20d4      	movs	r0, #212	; 0xd4
 8001a4e:	f7ff fba9 	bl	80011a4 <SENSOR_IO_Read>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001a66:	2115      	movs	r1, #21
 8001a68:	20d4      	movs	r0, #212	; 0xd4
 8001a6a:	f7ff fb9b 	bl	80011a4 <SENSOR_IO_Read>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	f023 0310 	bic.w	r3, r3, #16
 8001a78:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2115      	movs	r1, #21
 8001a8e:	20d4      	movs	r0, #212	; 0xd4
 8001a90:	f7ff fb6e 	bl	8001170 <SENSOR_IO_Write>
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	20d4      	movs	r0, #212	; 0xd4
 8001ab6:	f7ff fb75 	bl	80011a4 <SENSOR_IO_Read>
 8001aba:	4603      	mov	r3, r0
 8001abc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001abe:	f107 0208 	add.w	r2, r7, #8
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	2128      	movs	r1, #40	; 0x28
 8001ac6:	20d4      	movs	r0, #212	; 0xd4
 8001ac8:	f7ff fb8a 	bl	80011e0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	77fb      	strb	r3, [r7, #31]
 8001ad0:	e01c      	b.n	8001b0c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001ad2:	7ffb      	ldrb	r3, [r7, #31]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	3320      	adds	r3, #32
 8001ada:	443b      	add	r3, r7
 8001adc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	3320      	adds	r3, #32
 8001aec:	443b      	add	r3, r7
 8001aee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	b212      	sxth	r2, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	3320      	adds	r3, #32
 8001b00:	443b      	add	r3, r7
 8001b02:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001b06:	7ffb      	ldrb	r3, [r7, #31]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	77fb      	strb	r3, [r7, #31]
 8001b0c:	7ffb      	ldrb	r3, [r7, #31]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d9df      	bls.n	8001ad2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d829      	bhi.n	8001b70 <LSM6DSL_AccReadXYZ+0xd4>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <LSM6DSL_AccReadXYZ+0x88>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b59 	.word	0x08001b59
 8001b28:	08001b71 	.word	0x08001b71
 8001b2c:	08001b71 	.word	0x08001b71
 8001b30:	08001b71 	.word	0x08001b71
 8001b34:	08001b6b 	.word	0x08001b6b
 8001b38:	08001b71 	.word	0x08001b71
 8001b3c:	08001b71 	.word	0x08001b71
 8001b40:	08001b71 	.word	0x08001b71
 8001b44:	08001b5f 	.word	0x08001b5f
 8001b48:	08001b71 	.word	0x08001b71
 8001b4c:	08001b71 	.word	0x08001b71
 8001b50:	08001b71 	.word	0x08001b71
 8001b54:	08001b65 	.word	0x08001b65
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <LSM6DSL_AccReadXYZ+0x120>)
 8001b5a:	61bb      	str	r3, [r7, #24]
    break;
 8001b5c:	e008      	b.n	8001b70 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <LSM6DSL_AccReadXYZ+0x124>)
 8001b60:	61bb      	str	r3, [r7, #24]
    break;
 8001b62:	e005      	b.n	8001b70 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <LSM6DSL_AccReadXYZ+0x128>)
 8001b66:	61bb      	str	r3, [r7, #24]
    break;
 8001b68:	e002      	b.n	8001b70 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <LSM6DSL_AccReadXYZ+0x12c>)
 8001b6c:	61bb      	str	r3, [r7, #24]
    break;    
 8001b6e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	77fb      	strb	r3, [r7, #31]
 8001b74:	e01a      	b.n	8001bac <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	3320      	adds	r3, #32
 8001b7c:	443b      	add	r3, r7
 8001b7e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9e:	ee17 2a90 	vmov	r2, s15
 8001ba2:	b212      	sxth	r2, r2
 8001ba4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
 8001bac:	7ffb      	ldrb	r3, [r7, #31]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d9e1      	bls.n	8001b76 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	3720      	adds	r7, #32
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	3d79db23 	.word	0x3d79db23
 8001bc0:	3df9db23 	.word	0x3df9db23
 8001bc4:	3e79db23 	.word	0x3e79db23
 8001bc8:	3ef9db23 	.word	0x3ef9db23

08001bcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	f000 f8dd 	bl	8001d96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bdc:	200f      	movs	r0, #15
 8001bde:	f7ff f8b9 	bl	8000d54 <HAL_InitTick>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	e001      	b.n	8001bf2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bee:	f7fe ffa9 	bl	8000b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000088 	.word	0x20000088
 8001c20:	20000588 	.word	0x20000588

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000588 	.word	0x20000588

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ff4c 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbe:	f7ff ff61 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001dc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	6978      	ldr	r0, [r7, #20]
 8001dca:	f7ff ffb1 	bl	8001d30 <NVIC_EncodePriority>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff80 	bl	8001cdc <__NVIC_SetPriority>
}
 8001ddc:	bf00      	nop
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff54 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	e166      	b.n	80020de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8158 	beq.w	80020d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d005      	beq.n	8001e40 <HAL_GPIO_Init+0x40>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d130      	bne.n	8001ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e76:	2201      	movs	r2, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 0201 	and.w	r2, r3, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d017      	beq.n	8001ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d123      	bne.n	8001f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	6939      	ldr	r1, [r7, #16]
 8001f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0203 	and.w	r2, r3, #3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80b2 	beq.w	80020d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f74:	4b61      	ldr	r3, [pc, #388]	; (80020fc <HAL_GPIO_Init+0x2fc>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	4a60      	ldr	r2, [pc, #384]	; (80020fc <HAL_GPIO_Init+0x2fc>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f80:	4b5e      	ldr	r3, [pc, #376]	; (80020fc <HAL_GPIO_Init+0x2fc>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f8c:	4a5c      	ldr	r2, [pc, #368]	; (8002100 <HAL_GPIO_Init+0x300>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb6:	d02b      	beq.n	8002010 <HAL_GPIO_Init+0x210>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_GPIO_Init+0x304>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d025      	beq.n	800200c <HAL_GPIO_Init+0x20c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a51      	ldr	r2, [pc, #324]	; (8002108 <HAL_GPIO_Init+0x308>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d01f      	beq.n	8002008 <HAL_GPIO_Init+0x208>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a50      	ldr	r2, [pc, #320]	; (800210c <HAL_GPIO_Init+0x30c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d019      	beq.n	8002004 <HAL_GPIO_Init+0x204>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a4f      	ldr	r2, [pc, #316]	; (8002110 <HAL_GPIO_Init+0x310>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_GPIO_Init+0x200>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a4e      	ldr	r2, [pc, #312]	; (8002114 <HAL_GPIO_Init+0x314>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00d      	beq.n	8001ffc <HAL_GPIO_Init+0x1fc>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a4d      	ldr	r2, [pc, #308]	; (8002118 <HAL_GPIO_Init+0x318>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <HAL_GPIO_Init+0x1f8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a4c      	ldr	r2, [pc, #304]	; (800211c <HAL_GPIO_Init+0x31c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_GPIO_Init+0x1f4>
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	e00e      	b.n	8002012 <HAL_GPIO_Init+0x212>
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	e00c      	b.n	8002012 <HAL_GPIO_Init+0x212>
 8001ff8:	2306      	movs	r3, #6
 8001ffa:	e00a      	b.n	8002012 <HAL_GPIO_Init+0x212>
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	e008      	b.n	8002012 <HAL_GPIO_Init+0x212>
 8002000:	2304      	movs	r3, #4
 8002002:	e006      	b.n	8002012 <HAL_GPIO_Init+0x212>
 8002004:	2303      	movs	r3, #3
 8002006:	e004      	b.n	8002012 <HAL_GPIO_Init+0x212>
 8002008:	2302      	movs	r3, #2
 800200a:	e002      	b.n	8002012 <HAL_GPIO_Init+0x212>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_GPIO_Init+0x212>
 8002010:	2300      	movs	r3, #0
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	f002 0203 	and.w	r2, r2, #3
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	4093      	lsls	r3, r2
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002022:	4937      	ldr	r1, [pc, #220]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002030:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_GPIO_Init+0x320>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002054:	4a32      	ldr	r2, [pc, #200]	; (8002120 <HAL_GPIO_Init+0x320>)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_GPIO_Init+0x320>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_GPIO_Init+0x320>)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_GPIO_Init+0x320>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_GPIO_Init+0x320>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_GPIO_Init+0x320>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020d2:	4a13      	ldr	r2, [pc, #76]	; (8002120 <HAL_GPIO_Init+0x320>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f ae91 	bne.w	8001e10 <HAL_GPIO_Init+0x10>
  }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000
 8002104:	48000400 	.word	0x48000400
 8002108:	48000800 	.word	0x48000800
 800210c:	48000c00 	.word	0x48000c00
 8002110:	48001000 	.word	0x48001000
 8002114:	48001400 	.word	0x48001400
 8002118:	48001800 	.word	0x48001800
 800211c:	48001c00 	.word	0x48001c00
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002132:	e0c9      	b.n	80022c8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002134:	2201      	movs	r2, #1
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80bc 	beq.w	80022c2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800214a:	4a66      	ldr	r2, [pc, #408]	; (80022e4 <HAL_GPIO_DeInit+0x1c0>)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002172:	d02b      	beq.n	80021cc <HAL_GPIO_DeInit+0xa8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_GPIO_DeInit+0x1c4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d025      	beq.n	80021c8 <HAL_GPIO_DeInit+0xa4>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a5b      	ldr	r2, [pc, #364]	; (80022ec <HAL_GPIO_DeInit+0x1c8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d01f      	beq.n	80021c4 <HAL_GPIO_DeInit+0xa0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a5a      	ldr	r2, [pc, #360]	; (80022f0 <HAL_GPIO_DeInit+0x1cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d019      	beq.n	80021c0 <HAL_GPIO_DeInit+0x9c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a59      	ldr	r2, [pc, #356]	; (80022f4 <HAL_GPIO_DeInit+0x1d0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d013      	beq.n	80021bc <HAL_GPIO_DeInit+0x98>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_GPIO_DeInit+0x1d4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00d      	beq.n	80021b8 <HAL_GPIO_DeInit+0x94>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_GPIO_DeInit+0x1d8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d007      	beq.n	80021b4 <HAL_GPIO_DeInit+0x90>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_GPIO_DeInit+0x1dc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d101      	bne.n	80021b0 <HAL_GPIO_DeInit+0x8c>
 80021ac:	2307      	movs	r3, #7
 80021ae:	e00e      	b.n	80021ce <HAL_GPIO_DeInit+0xaa>
 80021b0:	2308      	movs	r3, #8
 80021b2:	e00c      	b.n	80021ce <HAL_GPIO_DeInit+0xaa>
 80021b4:	2306      	movs	r3, #6
 80021b6:	e00a      	b.n	80021ce <HAL_GPIO_DeInit+0xaa>
 80021b8:	2305      	movs	r3, #5
 80021ba:	e008      	b.n	80021ce <HAL_GPIO_DeInit+0xaa>
 80021bc:	2304      	movs	r3, #4
 80021be:	e006      	b.n	80021ce <HAL_GPIO_DeInit+0xaa>
 80021c0:	2303      	movs	r3, #3
 80021c2:	e004      	b.n	80021ce <HAL_GPIO_DeInit+0xaa>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e002      	b.n	80021ce <HAL_GPIO_DeInit+0xaa>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_GPIO_DeInit+0xaa>
 80021cc:	2300      	movs	r3, #0
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	f002 0203 	and.w	r2, r2, #3
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	4093      	lsls	r3, r2
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d132      	bne.n	8002244 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80021de:	4b49      	ldr	r3, [pc, #292]	; (8002304 <HAL_GPIO_DeInit+0x1e0>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4947      	ldr	r1, [pc, #284]	; (8002304 <HAL_GPIO_DeInit+0x1e0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80021ec:	4b45      	ldr	r3, [pc, #276]	; (8002304 <HAL_GPIO_DeInit+0x1e0>)
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	4943      	ldr	r1, [pc, #268]	; (8002304 <HAL_GPIO_DeInit+0x1e0>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80021fa:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_GPIO_DeInit+0x1e0>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	4940      	ldr	r1, [pc, #256]	; (8002304 <HAL_GPIO_DeInit+0x1e0>)
 8002204:	4013      	ands	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002208:	4b3e      	ldr	r3, [pc, #248]	; (8002304 <HAL_GPIO_DeInit+0x1e0>)
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	493c      	ldr	r1, [pc, #240]	; (8002304 <HAL_GPIO_DeInit+0x1e0>)
 8002212:	4013      	ands	r3, r2
 8002214:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	220f      	movs	r2, #15
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002226:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <HAL_GPIO_DeInit+0x1c0>)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43da      	mvns	r2, r3
 8002236:	482b      	ldr	r0, [pc, #172]	; (80022e4 <HAL_GPIO_DeInit+0x1c0>)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	400a      	ands	r2, r1
 800223e:	3302      	adds	r3, #2
 8002240:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2103      	movs	r1, #3
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	08d2      	lsrs	r2, r2, #3
 8002278:	4019      	ands	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2103      	movs	r1, #3
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	2101      	movs	r1, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	401a      	ands	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2103      	movs	r1, #3
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	401a      	ands	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f47f af2f 	bne.w	8002134 <HAL_GPIO_DeInit+0x10>
  }
}
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40010000 	.word	0x40010000
 80022e8:	48000400 	.word	0x48000400
 80022ec:	48000800 	.word	0x48000800
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	48001000 	.word	0x48001000
 80022f8:	48001400 	.word	0x48001400
 80022fc:	48001800 	.word	0x48001800
 8002300:	48001c00 	.word	0x48001c00
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002324:	e002      	b.n	800232c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fade 	bl	8000918 <HAL_GPIO_EXTI_Callback>
  }
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40010400 	.word	0x40010400

08002368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e081      	b.n	800247e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fc00 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e006      	b.n	80023f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d104      	bne.n	8002402 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002400:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69d9      	ldr	r1, [r3, #28]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e021      	b.n	80024dc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fbcd 	bl	8000c50 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 80f9 	bne.w	80026fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_I2C_Mem_Write+0x34>
 8002512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0ed      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Mem_Write+0x4e>
 800252e:	2302      	movs	r3, #2
 8002530:	e0e6      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800253a:	f7ff fb73 	bl	8001c24 <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2319      	movs	r3, #25
 8002546:	2201      	movs	r2, #1
 8002548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fac3 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0d1      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2221      	movs	r2, #33	; 0x21
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002584:	88f8      	ldrh	r0, [r7, #6]
 8002586:	893a      	ldrh	r2, [r7, #8]
 8002588:	8979      	ldrh	r1, [r7, #10]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4603      	mov	r3, r0
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f9d3 	bl	8002940 <I2C_RequestMemoryWrite>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0a9      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	d90e      	bls.n	80025d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	8979      	ldrh	r1, [r7, #10]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fc2b 	bl	8002e28 <I2C_TransferConfig>
 80025d2:	e00f      	b.n	80025f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	8979      	ldrh	r1, [r7, #10]
 80025e6:	2300      	movs	r3, #0
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fc1a 	bl	8002e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 faad 	bl	8002b58 <I2C_WaitOnTXISFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e07b      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d034      	beq.n	80026ac <HAL_I2C_Mem_Write+0x1c8>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	d130      	bne.n	80026ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	2200      	movs	r2, #0
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa3f 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04d      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2bff      	cmp	r3, #255	; 0xff
 800266c:	d90e      	bls.n	800268c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	22ff      	movs	r2, #255	; 0xff
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	b2da      	uxtb	r2, r3
 800267a:	8979      	ldrh	r1, [r7, #10]
 800267c:	2300      	movs	r3, #0
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fbcf 	bl	8002e28 <I2C_TransferConfig>
 800268a:	e00f      	b.n	80026ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	b2da      	uxtb	r2, r3
 800269c:	8979      	ldrh	r1, [r7, #10]
 800269e:	2300      	movs	r3, #0
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fbbe 	bl	8002e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d19e      	bne.n	80025f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fa8c 	bl	8002bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e01a      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2220      	movs	r2, #32
 80026d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_I2C_Mem_Write+0x224>)
 80026de:	400b      	ands	r3, r1
 80026e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
  }
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	fe00e800 	.word	0xfe00e800

0800270c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	4608      	mov	r0, r1
 8002716:	4611      	mov	r1, r2
 8002718:	461a      	mov	r2, r3
 800271a:	4603      	mov	r3, r0
 800271c:	817b      	strh	r3, [r7, #10]
 800271e:	460b      	mov	r3, r1
 8002720:	813b      	strh	r3, [r7, #8]
 8002722:	4613      	mov	r3, r2
 8002724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	f040 80fd 	bne.w	800292e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_I2C_Mem_Read+0x34>
 800273a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0f1      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2C_Mem_Read+0x4e>
 8002756:	2302      	movs	r3, #2
 8002758:	e0ea      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002762:	f7ff fa5f 	bl	8001c24 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2319      	movs	r3, #25
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f9af 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d5      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2222      	movs	r2, #34	; 0x22
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ac:	88f8      	ldrh	r0, [r7, #6]
 80027ae:	893a      	ldrh	r2, [r7, #8]
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f913 	bl	80029e8 <I2C_RequestMemoryRead>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0ad      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2bff      	cmp	r3, #255	; 0xff
 80027dc:	d90e      	bls.n	80027fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	22ff      	movs	r2, #255	; 0xff
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	4b52      	ldr	r3, [pc, #328]	; (8002938 <HAL_I2C_Mem_Read+0x22c>)
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fb17 	bl	8002e28 <I2C_TransferConfig>
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	b2da      	uxtb	r2, r3
 800280c:	8979      	ldrh	r1, [r7, #10]
 800280e:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <HAL_I2C_Mem_Read+0x22c>)
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fb06 	bl	8002e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	2200      	movs	r2, #0
 8002824:	2104      	movs	r1, #4
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f956 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07c      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d034      	beq.n	80028dc <HAL_I2C_Mem_Read+0x1d0>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d130      	bne.n	80028dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	2200      	movs	r2, #0
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f927 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e04d      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	2bff      	cmp	r3, #255	; 0xff
 800289c:	d90e      	bls.n	80028bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	22ff      	movs	r2, #255	; 0xff
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	2300      	movs	r3, #0
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fab7 	bl	8002e28 <I2C_TransferConfig>
 80028ba:	e00f      	b.n	80028dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	2300      	movs	r3, #0
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 faa6 	bl	8002e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d19a      	bne.n	800281c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f974 	bl	8002bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e01a      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2220      	movs	r2, #32
 8002900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_I2C_Mem_Read+0x230>)
 800290e:	400b      	ands	r3, r1
 8002910:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	80002400 	.word	0x80002400
 800293c:	fe00e800 	.word	0xfe00e800

08002940 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4603      	mov	r3, r0
 8002950:	817b      	strh	r3, [r7, #10]
 8002952:	460b      	mov	r3, r1
 8002954:	813b      	strh	r3, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	8979      	ldrh	r1, [r7, #10]
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <I2C_RequestMemoryWrite+0xa4>)
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fa5d 	bl	8002e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	69b9      	ldr	r1, [r7, #24]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f8f0 	bl	8002b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e02c      	b.n	80029dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002988:	893b      	ldrh	r3, [r7, #8]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
 8002992:	e015      	b.n	80029c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002994:	893b      	ldrh	r3, [r7, #8]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	b29b      	uxth	r3, r3
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	69b9      	ldr	r1, [r7, #24]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8d6 	bl	8002b58 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e012      	b.n	80029dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029b6:	893b      	ldrh	r3, [r7, #8]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f884 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	80002000 	.word	0x80002000

080029e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	460b      	mov	r3, r1
 80029fc:	813b      	strh	r3, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <I2C_RequestMemoryRead+0xa4>)
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fa0a 	bl	8002e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f89d 	bl	8002b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e02c      	b.n	8002a82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a2e:	893b      	ldrh	r3, [r7, #8]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
 8002a38:	e015      	b.n	8002a66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a3a:	893b      	ldrh	r3, [r7, #8]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f883 	bl	8002b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e012      	b.n	8002a82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f831 	bl	8002ad8 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	80002000 	.word	0x80002000

08002a90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d103      	bne.n	8002aae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d007      	beq.n	8002acc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	619a      	str	r2, [r3, #24]
  }
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae8:	e022      	b.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af0:	d01e      	beq.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7ff f897 	bl	8001c24 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d113      	bne.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e00f      	b.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d0cd      	beq.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b64:	e02c      	b.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f870 	bl	8002c50 <I2C_IsErrorOccurred>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e02a      	b.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b80:	d01e      	beq.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b82:	f7ff f84f 	bl	8001c24 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d113      	bne.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e007      	b.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d1cb      	bne.n	8002b66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be4:	e028      	b.n	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f830 	bl	8002c50 <I2C_IsErrorOccurred>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e026      	b.n	8002c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfa:	f7ff f813 	bl	8001c24 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d113      	bne.n	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e007      	b.n	8002c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d1cf      	bne.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d075      	beq.n	8002d68 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2210      	movs	r2, #16
 8002c82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c84:	e056      	b.n	8002d34 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c8c:	d052      	beq.n	8002d34 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7fe ffc9 	bl	8001c24 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <I2C_IsErrorOccurred+0x54>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d147      	bne.n	8002d34 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc6:	d12e      	bne.n	8002d26 <I2C_IsErrorOccurred+0xd6>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cce:	d02a      	beq.n	8002d26 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d027      	beq.n	8002d26 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ce6:	f7fe ff9d 	bl	8001c24 <HAL_GetTick>
 8002cea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cec:	e01b      	b.n	8002d26 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cee:	f7fe ff99 	bl	8001c24 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b19      	cmp	r3, #25
 8002cfa:	d914      	bls.n	8002d26 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d1dc      	bne.n	8002cee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d003      	beq.n	8002d4a <I2C_IsErrorOccurred+0xfa>
 8002d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d09d      	beq.n	8002c86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2220      	movs	r2, #32
 8002d58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f043 0308 	orr.w	r3, r3, #8
 8002da2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01c      	beq.n	8002e18 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff fe56 	bl	8002a90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <I2C_IsErrorOccurred+0x1d4>)
 8002df0:	400b      	ands	r3, r1
 8002df2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3728      	adds	r7, #40	; 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	fe00e800 	.word	0xfe00e800

08002e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	817b      	strh	r3, [r7, #10]
 8002e36:	4613      	mov	r3, r2
 8002e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e40:	7a7b      	ldrb	r3, [r7, #9]
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	0d5b      	lsrs	r3, r3, #21
 8002e62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <I2C_TransferConfig+0x60>)
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	ea02 0103 	and.w	r1, r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	03ff63ff 	.word	0x03ff63ff

08002e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d138      	bne.n	8002f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e032      	b.n	8002f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6819      	ldr	r1, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d139      	bne.n	8002fac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e033      	b.n	8002fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2224      	movs	r2, #36	; 0x24
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d102      	bne.n	8002fd4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd2:	e00b      	b.n	8002fec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe2:	d102      	bne.n	8002fea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe8:	e000      	b.n	8002fec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002fea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40007000 	.word	0x40007000

08002ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d141      	bne.n	800308e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	d131      	bne.n	800307c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003018:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301e:	4a46      	ldr	r2, [pc, #280]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003024:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003028:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003030:	4a41      	ldr	r2, [pc, #260]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003036:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003038:	4b40      	ldr	r3, [pc, #256]	; (800313c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2232      	movs	r2, #50	; 0x32
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	4a3f      	ldr	r2, [pc, #252]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	0c9b      	lsrs	r3, r3, #18
 800304a:	3301      	adds	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800304e:	e002      	b.n	8003056 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3b01      	subs	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003056:	4b38      	ldr	r3, [pc, #224]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003062:	d102      	bne.n	800306a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f2      	bne.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800306a:	4b33      	ldr	r3, [pc, #204]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d158      	bne.n	800312a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e057      	b.n	800312c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003082:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800308c:	e04d      	b.n	800312a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003094:	d141      	bne.n	800311a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	d131      	bne.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030aa:	4a23      	ldr	r2, [pc, #140]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030bc:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2232      	movs	r2, #50	; 0x32
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	0c9b      	lsrs	r3, r3, #18
 80030d6:	3301      	adds	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030da:	e002      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3b01      	subs	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d102      	bne.n	80030f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f2      	bne.n	80030dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003102:	d112      	bne.n	800312a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e011      	b.n	800312c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003118:	e007      	b.n	800312a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003128:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40007000 	.word	0x40007000
 800313c:	20000000 	.word	0x20000000
 8003140:	431bde83 	.word	0x431bde83

08003144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f000 bc08 	b.w	8003968 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003158:	4b96      	ldr	r3, [pc, #600]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003162:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80e4 	beq.w	8003342 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_RCC_OscConfig+0x4c>
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b0c      	cmp	r3, #12
 8003184:	f040 808b 	bne.w	800329e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b01      	cmp	r3, #1
 800318c:	f040 8087 	bne.w	800329e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003190:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_OscConfig+0x64>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e3df      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <HAL_RCC_OscConfig+0x7e>
 80031b8:	4b7e      	ldr	r3, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c0:	e005      	b.n	80031ce <HAL_RCC_OscConfig+0x8a>
 80031c2:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d223      	bcs.n	800321a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fdfe 	bl	8003dd8 <RCC_SetFlashLatencyFromMSIRange>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e3c0      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e6:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a72      	ldr	r2, [pc, #456]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b70      	ldr	r3, [pc, #448]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	496d      	ldr	r1, [pc, #436]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003204:	4b6b      	ldr	r3, [pc, #428]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	4968      	ldr	r1, [pc, #416]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
 8003218:	e025      	b.n	8003266 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321a:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003220:	f043 0308 	orr.w	r3, r3, #8
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b63      	ldr	r3, [pc, #396]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4960      	ldr	r1, [pc, #384]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003238:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	495b      	ldr	r1, [pc, #364]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fdbe 	bl	8003dd8 <RCC_SetFlashLatencyFromMSIRange>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e380      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003266:	f000 fcc1 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	4950      	ldr	r1, [pc, #320]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	4a4e      	ldr	r2, [pc, #312]	; (80033bc <HAL_RCC_OscConfig+0x278>)
 8003284:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <HAL_RCC_OscConfig+0x27c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd fd62 	bl	8000d54 <HAL_InitTick>
 8003290:	4603      	mov	r3, r0
 8003292:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d052      	beq.n	8003340 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	e364      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d032      	beq.n	800330c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032a6:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a42      	ldr	r2, [pc, #264]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032b2:	f7fe fcb7 	bl	8001c24 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ba:	f7fe fcb3 	bl	8001c24 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e34d      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032cc:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a35      	ldr	r2, [pc, #212]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032de:	f043 0308 	orr.w	r3, r3, #8
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	4930      	ldr	r1, [pc, #192]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f6:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	492b      	ldr	r1, [pc, #172]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
 800330a:	e01a      	b.n	8003342 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800330c:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a28      	ldr	r2, [pc, #160]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003318:	f7fe fc84 	bl	8001c24 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003320:	f7fe fc80 	bl	8001c24 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e31a      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1dc>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d073      	beq.n	8003436 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x21c>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d10e      	bne.n	8003378 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d10b      	bne.n	8003378 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d063      	beq.n	8003434 <HAL_RCC_OscConfig+0x2f0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d15f      	bne.n	8003434 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e2f7      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x24c>
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e025      	b.n	80033dc <HAL_RCC_OscConfig+0x298>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003398:	d114      	bne.n	80033c4 <HAL_RCC_OscConfig+0x280>
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a05      	ldr	r2, [pc, #20]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80033a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a02      	ldr	r2, [pc, #8]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e013      	b.n	80033dc <HAL_RCC_OscConfig+0x298>
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08007b48 	.word	0x08007b48
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000084 	.word	0x20000084
 80033c4:	4ba0      	ldr	r3, [pc, #640]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a9f      	ldr	r2, [pc, #636]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b9d      	ldr	r3, [pc, #628]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a9c      	ldr	r2, [pc, #624]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe fc1e 	bl	8001c24 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fc1a 	bl	8001c24 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e2b4      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	4b92      	ldr	r3, [pc, #584]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x2a8>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe fc0a 	bl	8001c24 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fc06 	bl	8001c24 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e2a0      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003426:	4b88      	ldr	r3, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x2d0>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d060      	beq.n	8003504 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d005      	beq.n	8003454 <HAL_RCC_OscConfig+0x310>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d119      	bne.n	8003482 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d116      	bne.n	8003482 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003454:	4b7c      	ldr	r3, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_OscConfig+0x328>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e27d      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	4973      	ldr	r1, [pc, #460]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003480:	e040      	b.n	8003504 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d023      	beq.n	80034d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348a:	4b6f      	ldr	r3, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a6e      	ldr	r2, [pc, #440]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe fbc5 	bl	8001c24 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7fe fbc1 	bl	8001c24 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e25b      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b0:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b62      	ldr	r3, [pc, #392]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	061b      	lsls	r3, r3, #24
 80034ca:	495f      	ldr	r1, [pc, #380]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
 80034d0:	e018      	b.n	8003504 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	4b5d      	ldr	r3, [pc, #372]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a5c      	ldr	r2, [pc, #368]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80034d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fe fba1 	bl	8001c24 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fe fb9d 	bl	8001c24 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e237      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d03c      	beq.n	800358a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01c      	beq.n	8003552 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003518:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351e:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe fb7c 	bl	8001c24 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003530:	f7fe fb78 	bl	8001c24 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e212      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ef      	beq.n	8003530 <HAL_RCC_OscConfig+0x3ec>
 8003550:	e01b      	b.n	800358a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003558:	4a3b      	ldr	r2, [pc, #236]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fe fb5f 	bl	8001c24 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356a:	f7fe fb5b 	bl	8001c24 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e1f5      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800357e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ef      	bne.n	800356a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80a6 	beq.w	80036e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003598:	2300      	movs	r3, #0
 800359a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800359c:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10d      	bne.n	80035c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	4a26      	ldr	r2, [pc, #152]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	; 0x58
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c4:	4b21      	ldr	r3, [pc, #132]	; (800364c <HAL_RCC_OscConfig+0x508>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d118      	bne.n	8003602 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d0:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_RCC_OscConfig+0x508>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_RCC_OscConfig+0x508>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035dc:	f7fe fb22 	bl	8001c24 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fe fb1e 	bl	8001c24 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1b8      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_RCC_OscConfig+0x508>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d108      	bne.n	800361c <HAL_RCC_OscConfig+0x4d8>
 800360a:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	4a0d      	ldr	r2, [pc, #52]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800361a:	e029      	b.n	8003670 <HAL_RCC_OscConfig+0x52c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b05      	cmp	r3, #5
 8003622:	d115      	bne.n	8003650 <HAL_RCC_OscConfig+0x50c>
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800362c:	f043 0304 	orr.w	r3, r3, #4
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	4a03      	ldr	r2, [pc, #12]	; (8003648 <HAL_RCC_OscConfig+0x504>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003644:	e014      	b.n	8003670 <HAL_RCC_OscConfig+0x52c>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	40007000 	.word	0x40007000
 8003650:	4b9d      	ldr	r3, [pc, #628]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a9c      	ldr	r2, [pc, #624]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003660:	4b99      	ldr	r3, [pc, #612]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a98      	ldr	r2, [pc, #608]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d016      	beq.n	80036a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fe fad4 	bl	8001c24 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fe fad0 	bl	8001c24 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e168      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003696:	4b8c      	ldr	r3, [pc, #560]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ed      	beq.n	8003680 <HAL_RCC_OscConfig+0x53c>
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fe fabd 	bl	8001c24 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe fab9 	bl	8001c24 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e151      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c4:	4b80      	ldr	r3, [pc, #512]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ed      	bne.n	80036ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d2:	7ffb      	ldrb	r3, [r7, #31]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d8:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	4a7a      	ldr	r2, [pc, #488]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 80036de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d03c      	beq.n	800376a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01c      	beq.n	8003732 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036f8:	4b73      	ldr	r3, [pc, #460]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 80036fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036fe:	4a72      	ldr	r2, [pc, #456]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fe fa8c 	bl	8001c24 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003710:	f7fe fa88 	bl	8001c24 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e122      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003722:	4b69      	ldr	r3, [pc, #420]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ef      	beq.n	8003710 <HAL_RCC_OscConfig+0x5cc>
 8003730:	e01b      	b.n	800376a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003732:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003738:	4a63      	ldr	r2, [pc, #396]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fe fa6f 	bl	8001c24 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800374a:	f7fe fa6b 	bl	8001c24 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e105      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800375c:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 800375e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ef      	bne.n	800374a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80f9 	beq.w	8003966 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2b02      	cmp	r3, #2
 800377a:	f040 80cf 	bne.w	800391c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800377e:	4b52      	ldr	r3, [pc, #328]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0203 	and.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	429a      	cmp	r2, r3
 8003790:	d12c      	bne.n	80037ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	3b01      	subs	r3, #1
 800379e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d123      	bne.n	80037ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d11b      	bne.n	80037ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d113      	bne.n	80037ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	3b01      	subs	r3, #1
 80037d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d109      	bne.n	80037ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	3b01      	subs	r3, #1
 80037e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d071      	beq.n	80038d0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d068      	beq.n	80038c4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037f2:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d105      	bne.n	800380a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037fe:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0ac      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800380e:	4b2e      	ldr	r3, [pc, #184]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2d      	ldr	r2, [pc, #180]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003818:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800381a:	f7fe fa03 	bl	8001c24 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003822:	f7fe f9ff 	bl	8001c24 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e099      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003834:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_RCC_OscConfig+0x788>)
 8003846:	4013      	ands	r3, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003850:	3a01      	subs	r2, #1
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800385a:	0212      	lsls	r2, r2, #8
 800385c:	4311      	orrs	r1, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003862:	0852      	lsrs	r2, r2, #1
 8003864:	3a01      	subs	r2, #1
 8003866:	0552      	lsls	r2, r2, #21
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800386e:	0852      	lsrs	r2, r2, #1
 8003870:	3a01      	subs	r2, #1
 8003872:	0652      	lsls	r2, r2, #25
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800387a:	06d2      	lsls	r2, r2, #27
 800387c:	430a      	orrs	r2, r1
 800387e:	4912      	ldr	r1, [pc, #72]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003880:	4313      	orrs	r3, r2
 8003882:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800389c:	f7fe f9c2 	bl	8001c24 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe f9be 	bl	8001c24 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e058      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <HAL_RCC_OscConfig+0x784>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c2:	e050      	b.n	8003966 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04f      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
 80038c8:	40021000 	.word	0x40021000
 80038cc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d0:	4b27      	ldr	r3, [pc, #156]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d144      	bne.n	8003966 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038dc:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 80038e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a20      	ldr	r2, [pc, #128]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038f4:	f7fe f996 	bl	8001c24 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fe f992 	bl	8001c24 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e02c      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x7b8>
 800391a:	e024      	b.n	8003966 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d01f      	beq.n	8003962 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 8003928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe f979 	bl	8001c24 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7fe f975 	bl	8001c24 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e00f      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	4905      	ldr	r1, [pc, #20]	; (8003970 <HAL_RCC_OscConfig+0x82c>)
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_OscConfig+0x830>)
 800395c:	4013      	ands	r3, r2
 800395e:	60cb      	str	r3, [r1, #12]
 8003960:	e001      	b.n	8003966 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	feeefffc 	.word	0xfeeefffc

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e11d      	b.n	8003bcc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b90      	ldr	r3, [pc, #576]	; (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d910      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b8d      	ldr	r3, [pc, #564]	; (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 020f 	bic.w	r2, r3, #15
 80039a6:	498b      	ldr	r1, [pc, #556]	; (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b89      	ldr	r3, [pc, #548]	; (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e105      	b.n	8003bcc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	4b81      	ldr	r3, [pc, #516]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d8:	429a      	cmp	r2, r3
 80039da:	d908      	bls.n	80039ee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b7e      	ldr	r3, [pc, #504]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	497b      	ldr	r1, [pc, #492]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d079      	beq.n	8003aee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d11e      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	4b75      	ldr	r3, [pc, #468]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0dc      	b.n	8003bcc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003a12:	f000 fa3b 	bl	8003e8c <RCC_GetSysClockFreqFromPLLSource>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4a70      	ldr	r2, [pc, #448]	; (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d946      	bls.n	8003aac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a1e:	4b6e      	ldr	r3, [pc, #440]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d140      	bne.n	8003aac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a2a:	4b6b      	ldr	r3, [pc, #428]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a32:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e035      	b.n	8003aac <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d115      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b9      	b.n	8003bcc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d107      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a60:	4b5d      	ldr	r3, [pc, #372]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0ad      	b.n	8003bcc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0a5      	b.n	8003bcc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a80:	f000 f8b4 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4a55      	ldr	r2, [pc, #340]	; (8003bdc <HAL_RCC_ClockConfig+0x264>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d90f      	bls.n	8003aac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a8c:	4b52      	ldr	r3, [pc, #328]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d109      	bne.n	8003aac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a98:	4b4f      	ldr	r3, [pc, #316]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa0:	4a4d      	ldr	r2, [pc, #308]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aac:	4b4a      	ldr	r3, [pc, #296]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f023 0203 	bic.w	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4947      	ldr	r1, [pc, #284]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abe:	f7fe f8b1 	bl	8001c24 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac6:	f7fe f8ad 	bl	8001c24 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e077      	b.n	8003bcc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003adc:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 020c 	and.w	r2, r3, #12
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d1eb      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d105      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003af4:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a37      	ldr	r2, [pc, #220]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d208      	bcs.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b2e      	ldr	r3, [pc, #184]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	492b      	ldr	r1, [pc, #172]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2e:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d210      	bcs.n	8003b5e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 020f 	bic.w	r2, r3, #15
 8003b44:	4923      	ldr	r1, [pc, #140]	; (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e036      	b.n	8003bcc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	4918      	ldr	r1, [pc, #96]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4910      	ldr	r1, [pc, #64]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b9c:	f000 f826 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	490c      	ldr	r1, [pc, #48]	; (8003be0 <HAL_RCC_ClockConfig+0x268>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <HAL_RCC_ClockConfig+0x26c>)
 8003bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_ClockConfig+0x270>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd f8c7 	bl	8000d54 <HAL_InitTick>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	04c4b400 	.word	0x04c4b400
 8003be0:	08007b48 	.word	0x08007b48
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000084 	.word	0x20000084

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfa:	4b3e      	ldr	r3, [pc, #248]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c04:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x34>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d121      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d11e      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c20:	4b34      	ldr	r3, [pc, #208]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c2c:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	e005      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c48:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d102      	bne.n	8003c6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e004      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	d134      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xac>
 8003c90:	e005      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c94:	617b      	str	r3, [r7, #20]
      break;
 8003c96:	e005      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c9a:	617b      	str	r3, [r7, #20]
      break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	617b      	str	r3, [r7, #20]
      break;
 8003ca2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3301      	adds	r3, #1
 8003cb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	fb03 f202 	mul.w	r2, r3, r2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	0e5b      	lsrs	r3, r3, #25
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08007b60 	.word	0x08007b60
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	007a1200 	.word	0x007a1200

08003d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000000 	.word	0x20000000

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d20:	f7ff fff0 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4904      	ldr	r1, [pc, #16]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08007b58 	.word	0x08007b58

08003d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d4c:	f7ff ffda 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0adb      	lsrs	r3, r3, #11
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4904      	ldr	r1, [pc, #16]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	08007b58 	.word	0x08007b58

08003d74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	220f      	movs	r2, #15
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	08db      	lsrs	r3, r3, #3
 8003dae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003db6:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <HAL_RCC_GetClockConfig+0x60>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	601a      	str	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003df0:	f7ff f8e4 	bl	8002fbc <HAL_PWREx_GetVoltageRange>
 8003df4:	6178      	str	r0, [r7, #20]
 8003df6:	e014      	b.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6593      	str	r3, [r2, #88]	; 0x58
 8003e04:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e10:	f7ff f8d4 	bl	8002fbc <HAL_PWREx_GetVoltageRange>
 8003e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d10b      	bne.n	8003e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b80      	cmp	r3, #128	; 0x80
 8003e2e:	d913      	bls.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2ba0      	cmp	r3, #160	; 0xa0
 8003e34:	d902      	bls.n	8003e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e36:	2302      	movs	r3, #2
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	e00d      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	e00a      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b7f      	cmp	r3, #127	; 0x7f
 8003e46:	d902      	bls.n	8003e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003e48:	2302      	movs	r3, #2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e004      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d101      	bne.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e54:	2301      	movs	r3, #1
 8003e56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 020f 	bic.w	r2, r3, #15
 8003e60:	4909      	ldr	r1, [pc, #36]	; (8003e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d001      	beq.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40022000 	.word	0x40022000

08003e8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e92:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d00b      	beq.n	8003eba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d825      	bhi.n	8003ef4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d008      	beq.n	8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d11f      	bne.n	8003ef4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003eb6:	613b      	str	r3, [r7, #16]
    break;
 8003eb8:	e01f      	b.n	8003efa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003eba:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ebc:	613b      	str	r3, [r7, #16]
    break;
 8003ebe:	e01c      	b.n	8003efa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e005      	b.n	8003ee8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef0:	613b      	str	r3, [r7, #16]
    break;
 8003ef2:	e002      	b.n	8003efa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
    break;
 8003ef8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	3301      	adds	r3, #1
 8003f06:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	fb03 f202 	mul.w	r2, r3, r2
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	0e5b      	lsrs	r3, r3, #25
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f3a:	683b      	ldr	r3, [r7, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200
 8003f54:	08007b60 	.word	0x08007b60

08003f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f60:	2300      	movs	r3, #0
 8003f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f64:	2300      	movs	r3, #0
 8003f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d040      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f78:	2b80      	cmp	r3, #128	; 0x80
 8003f7a:	d02a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f7c:	2b80      	cmp	r3, #128	; 0x80
 8003f7e:	d825      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f80:	2b60      	cmp	r3, #96	; 0x60
 8003f82:	d026      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f84:	2b60      	cmp	r3, #96	; 0x60
 8003f86:	d821      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d006      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d81d      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d010      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003f98:	e018      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f9a:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4a88      	ldr	r2, [pc, #544]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fa6:	e015      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fb02 	bl	80045b8 <RCCEx_PLLSAI1_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fb8:	e00c      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3320      	adds	r3, #32
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fbed 	bl	80047a0 <RCCEx_PLLSAI2_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fca:	e003      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	74fb      	strb	r3, [r7, #19]
      break;
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fda:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fe0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe8:	4975      	ldr	r1, [pc, #468]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ff0:	e001      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d047      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400a:	d030      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004010:	d82a      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004016:	d02a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800401c:	d824      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800401e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004022:	d008      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004028:	d81e      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d010      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004034:	e018      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004036:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4a61      	ldr	r2, [pc, #388]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004042:	e015      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fab4 	bl	80045b8 <RCCEx_PLLSAI1_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004054:	e00c      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3320      	adds	r3, #32
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fb9f 	bl	80047a0 <RCCEx_PLLSAI2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	74fb      	strb	r3, [r7, #19]
      break;
 800406c:	e000      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800406e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004076:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800407c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	494e      	ldr	r1, [pc, #312]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800408c:	e001      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 809f 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a4:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	4a40      	ldr	r2, [pc, #256]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	; 0x58
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d6:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e2:	f7fd fd9f 	bl	8001c24 <HAL_GetTick>
 80040e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040e8:	e009      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ea:	f7fd fd9b 	bl	8001c24 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d902      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	74fb      	strb	r3, [r7, #19]
        break;
 80040fc:	e005      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040fe:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ef      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d15b      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01f      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	429a      	cmp	r2, r3
 800412c:	d019      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004138:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800413a:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800415a:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d016      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd fd5a 	bl	8001c24 <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	e00b      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fd fd56 	bl	8001c24 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d902      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	74fb      	strb	r3, [r7, #19]
            break;
 800418a:	e006      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ec      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10c      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041b8:	e008      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ba:	7cfb      	ldrb	r3, [r7, #19]
 80041bc:	74bb      	strb	r3, [r7, #18]
 80041be:	e005      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041cc:	7c7b      	ldrb	r3, [r7, #17]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4ba0      	ldr	r3, [pc, #640]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	4a9f      	ldr	r2, [pc, #636]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ea:	4b9a      	ldr	r3, [pc, #616]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f023 0203 	bic.w	r2, r3, #3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f8:	4996      	ldr	r1, [pc, #600]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800420c:	4b91      	ldr	r3, [pc, #580]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f023 020c 	bic.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	498e      	ldr	r1, [pc, #568]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800422e:	4b89      	ldr	r3, [pc, #548]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	4985      	ldr	r1, [pc, #532]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004250:	4b80      	ldr	r3, [pc, #512]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	497d      	ldr	r1, [pc, #500]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004272:	4b78      	ldr	r3, [pc, #480]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	4974      	ldr	r1, [pc, #464]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	496c      	ldr	r1, [pc, #432]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042b6:	4b67      	ldr	r3, [pc, #412]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c4:	4963      	ldr	r1, [pc, #396]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d8:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e6:	495b      	ldr	r1, [pc, #364]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fa:	4b56      	ldr	r3, [pc, #344]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	4952      	ldr	r1, [pc, #328]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	494a      	ldr	r1, [pc, #296]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800433e:	4b45      	ldr	r3, [pc, #276]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	4941      	ldr	r1, [pc, #260]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004360:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436e:	4939      	ldr	r1, [pc, #228]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d028      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004390:	4930      	ldr	r1, [pc, #192]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a2:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ac:	60d3      	str	r3, [r2, #12]
 80043ae:	e011      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	2101      	movs	r1, #1
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f8f9 	bl	80045b8 <RCCEx_PLLSAI1_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043ca:	7cfb      	ldrb	r3, [r7, #19]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d04d      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e8:	d108      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f0:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80043fa:	e012      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80043fc:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004402:	4a14      	ldr	r2, [pc, #80]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004408:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441a:	490e      	ldr	r1, [pc, #56]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800442a:	d106      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004436:	60d3      	str	r3, [r2, #12]
 8004438:	e020      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004442:	d109      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4a02      	ldr	r2, [pc, #8]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444e:	60d3      	str	r3, [r2, #12]
 8004450:	e014      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800445c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004460:	d10c      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	2101      	movs	r1, #1
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f8a5 	bl	80045b8 <RCCEx_PLLSAI1_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d028      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004488:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004496:	4947      	ldr	r1, [pc, #284]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a6:	d106      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a8:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a41      	ldr	r2, [pc, #260]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b2:	60d3      	str	r3, [r2, #12]
 80044b4:	e011      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044be:	d10c      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f876 	bl	80045b8 <RCCEx_PLLSAI1_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01e      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e6:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f6:	492f      	ldr	r1, [pc, #188]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004508:	d10c      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f851 	bl	80045b8 <RCCEx_PLLSAI1_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004530:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004536:	f023 0204 	bic.w	r2, r3, #4
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004540:	491c      	ldr	r1, [pc, #112]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004554:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800455a:	f023 0218 	bic.w	r2, r3, #24
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	4913      	ldr	r1, [pc, #76]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d017      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800457e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	490a      	ldr	r1, [pc, #40]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800459a:	d105      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000

080045b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045c6:	4b72      	ldr	r3, [pc, #456]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00e      	beq.n	80045f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045d2:	4b6f      	ldr	r3, [pc, #444]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0203 	and.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d103      	bne.n	80045ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
       ||
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d142      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e03f      	b.n	8004670 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d018      	beq.n	800462a <RCCEx_PLLSAI1_Config+0x72>
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d825      	bhi.n	8004648 <RCCEx_PLLSAI1_Config+0x90>
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d002      	beq.n	8004606 <RCCEx_PLLSAI1_Config+0x4e>
 8004600:	2b02      	cmp	r3, #2
 8004602:	d009      	beq.n	8004618 <RCCEx_PLLSAI1_Config+0x60>
 8004604:	e020      	b.n	8004648 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004606:	4b62      	ldr	r3, [pc, #392]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d11d      	bne.n	800464e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004616:	e01a      	b.n	800464e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004618:	4b5d      	ldr	r3, [pc, #372]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d116      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004628:	e013      	b.n	8004652 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800462a:	4b59      	ldr	r3, [pc, #356]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004636:	4b56      	ldr	r3, [pc, #344]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004646:	e006      	b.n	8004656 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e004      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004656:	bf00      	nop
    }

    if(status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800465e:	4b4c      	ldr	r3, [pc, #304]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4949      	ldr	r1, [pc, #292]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800466c:	4313      	orrs	r3, r2
 800466e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 8086 	bne.w	8004784 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004678:	4b45      	ldr	r3, [pc, #276]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a44      	ldr	r2, [pc, #272]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800467e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fd face 	bl	8001c24 <HAL_GetTick>
 8004688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800468a:	e009      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800468c:	f7fd faca 	bl	8001c24 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d902      	bls.n	80046a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	73fb      	strb	r3, [r7, #15]
        break;
 800469e:	e005      	b.n	80046ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046a0:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1ef      	bne.n	800468c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d168      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d113      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046b8:	4b35      	ldr	r3, [pc, #212]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	4b35      	ldr	r3, [pc, #212]	; (8004794 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046be:	4013      	ands	r3, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6892      	ldr	r2, [r2, #8]
 80046c4:	0211      	lsls	r1, r2, #8
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	06d2      	lsls	r2, r2, #27
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6852      	ldr	r2, [r2, #4]
 80046d2:	3a01      	subs	r2, #1
 80046d4:	0112      	lsls	r2, r2, #4
 80046d6:	430a      	orrs	r2, r1
 80046d8:	492d      	ldr	r1, [pc, #180]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	610b      	str	r3, [r1, #16]
 80046de:	e02d      	b.n	800473c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d115      	bne.n	8004712 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6892      	ldr	r2, [r2, #8]
 80046f2:	0211      	lsls	r1, r2, #8
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6912      	ldr	r2, [r2, #16]
 80046f8:	0852      	lsrs	r2, r2, #1
 80046fa:	3a01      	subs	r2, #1
 80046fc:	0552      	lsls	r2, r2, #21
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6852      	ldr	r2, [r2, #4]
 8004704:	3a01      	subs	r2, #1
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	430a      	orrs	r2, r1
 800470a:	4921      	ldr	r1, [pc, #132]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800470c:	4313      	orrs	r3, r2
 800470e:	610b      	str	r3, [r1, #16]
 8004710:	e014      	b.n	800473c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004712:	4b1f      	ldr	r3, [pc, #124]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	4b21      	ldr	r3, [pc, #132]	; (800479c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004718:	4013      	ands	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6892      	ldr	r2, [r2, #8]
 800471e:	0211      	lsls	r1, r2, #8
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6952      	ldr	r2, [r2, #20]
 8004724:	0852      	lsrs	r2, r2, #1
 8004726:	3a01      	subs	r2, #1
 8004728:	0652      	lsls	r2, r2, #25
 800472a:	4311      	orrs	r1, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6852      	ldr	r2, [r2, #4]
 8004730:	3a01      	subs	r2, #1
 8004732:	0112      	lsls	r2, r2, #4
 8004734:	430a      	orrs	r2, r1
 8004736:	4916      	ldr	r1, [pc, #88]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fd fa6c 	bl	8001c24 <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800474e:	e009      	b.n	8004764 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004750:	f7fd fa68 	bl	8001c24 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
          break;
 8004762:	e005      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ef      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	07ff800f 	.word	0x07ff800f
 8004798:	ff9f800f 	.word	0xff9f800f
 800479c:	f9ff800f 	.word	0xf9ff800f

080047a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ae:	4b72      	ldr	r3, [pc, #456]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047ba:	4b6f      	ldr	r3, [pc, #444]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0203 	and.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d103      	bne.n	80047d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
       ||
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d142      	bne.n	8004858 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
 80047d6:	e03f      	b.n	8004858 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d018      	beq.n	8004812 <RCCEx_PLLSAI2_Config+0x72>
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d825      	bhi.n	8004830 <RCCEx_PLLSAI2_Config+0x90>
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d002      	beq.n	80047ee <RCCEx_PLLSAI2_Config+0x4e>
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d009      	beq.n	8004800 <RCCEx_PLLSAI2_Config+0x60>
 80047ec:	e020      	b.n	8004830 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ee:	4b62      	ldr	r3, [pc, #392]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11d      	bne.n	8004836 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fe:	e01a      	b.n	8004836 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004800:	4b5d      	ldr	r3, [pc, #372]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d116      	bne.n	800483a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004810:	e013      	b.n	800483a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004812:	4b59      	ldr	r3, [pc, #356]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10f      	bne.n	800483e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800481e:	4b56      	ldr	r3, [pc, #344]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800482e:	e006      	b.n	800483e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
      break;
 8004834:	e004      	b.n	8004840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800483e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004846:	4b4c      	ldr	r3, [pc, #304]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4949      	ldr	r1, [pc, #292]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 8086 	bne.w	800496c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004860:	4b45      	ldr	r3, [pc, #276]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a44      	ldr	r2, [pc, #272]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486c:	f7fd f9da 	bl	8001c24 <HAL_GetTick>
 8004870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004872:	e009      	b.n	8004888 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004874:	f7fd f9d6 	bl	8001c24 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d902      	bls.n	8004888 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	73fb      	strb	r3, [r7, #15]
        break;
 8004886:	e005      	b.n	8004894 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004888:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ef      	bne.n	8004874 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d168      	bne.n	800496c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d113      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048a0:	4b35      	ldr	r3, [pc, #212]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	4b35      	ldr	r3, [pc, #212]	; (800497c <RCCEx_PLLSAI2_Config+0x1dc>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	0211      	lsls	r1, r2, #8
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	06d2      	lsls	r2, r2, #27
 80048b4:	4311      	orrs	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6852      	ldr	r2, [r2, #4]
 80048ba:	3a01      	subs	r2, #1
 80048bc:	0112      	lsls	r2, r2, #4
 80048be:	430a      	orrs	r2, r1
 80048c0:	492d      	ldr	r1, [pc, #180]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	614b      	str	r3, [r1, #20]
 80048c6:	e02d      	b.n	8004924 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d115      	bne.n	80048fa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048ce:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <RCCEx_PLLSAI2_Config+0x1e0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6892      	ldr	r2, [r2, #8]
 80048da:	0211      	lsls	r1, r2, #8
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6912      	ldr	r2, [r2, #16]
 80048e0:	0852      	lsrs	r2, r2, #1
 80048e2:	3a01      	subs	r2, #1
 80048e4:	0552      	lsls	r2, r2, #21
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6852      	ldr	r2, [r2, #4]
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0112      	lsls	r2, r2, #4
 80048f0:	430a      	orrs	r2, r1
 80048f2:	4921      	ldr	r1, [pc, #132]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	614b      	str	r3, [r1, #20]
 80048f8:	e014      	b.n	8004924 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048fa:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6892      	ldr	r2, [r2, #8]
 8004906:	0211      	lsls	r1, r2, #8
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6952      	ldr	r2, [r2, #20]
 800490c:	0852      	lsrs	r2, r2, #1
 800490e:	3a01      	subs	r2, #1
 8004910:	0652      	lsls	r2, r2, #25
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6852      	ldr	r2, [r2, #4]
 8004918:	3a01      	subs	r2, #1
 800491a:	0112      	lsls	r2, r2, #4
 800491c:	430a      	orrs	r2, r1
 800491e:	4916      	ldr	r1, [pc, #88]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004920:	4313      	orrs	r3, r2
 8004922:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a13      	ldr	r2, [pc, #76]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004930:	f7fd f978 	bl	8001c24 <HAL_GetTick>
 8004934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004936:	e009      	b.n	800494c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004938:	f7fd f974 	bl	8001c24 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d902      	bls.n	800494c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	73fb      	strb	r3, [r7, #15]
          break;
 800494a:	e005      	b.n	8004958 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ef      	beq.n	8004938 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	4904      	ldr	r1, [pc, #16]	; (8004978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004968:	4313      	orrs	r3, r2
 800496a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
 800497c:	07ff800f 	.word	0x07ff800f
 8004980:	ff9f800f 	.word	0xff9f800f
 8004984:	f9ff800f 	.word	0xf9ff800f

08004988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e049      	b.n	8004a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f841 	bl	8004a36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f000 f9f8 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d001      	beq.n	8004a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e04f      	b.n	8004b04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a23      	ldr	r2, [pc, #140]	; (8004b10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01d      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x76>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d018      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x76>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x76>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <HAL_TIM_Base_Start_IT+0xcc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x76>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x76>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x76>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d115      	bne.n	8004aee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d015      	beq.n	8004b00 <HAL_TIM_Base_Start_IT+0xb4>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d011      	beq.n	8004b00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e008      	b.n	8004b00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e000      	b.n	8004b02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	00010007 	.word	0x00010007

08004b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0202 	mvn.w	r2, #2
 8004b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f905 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8f7 	bl	8004d6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f908 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d122      	bne.n	8004bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d11b      	bne.n	8004bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0204 	mvn.w	r2, #4
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8db 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f8cd 	bl	8004d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f8de 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d122      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0208 	mvn.w	r2, #8
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2204      	movs	r2, #4
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8b1 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8a3 	bl	8004d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8b4 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d122      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d11b      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0210 	mvn.w	r2, #16
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f887 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f879 	bl	8004d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f88a 	bl	8004d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10e      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d107      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0201 	mvn.w	r2, #1
 8004ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fb ff32 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f914 	bl	8004f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cea:	d10e      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b80      	cmp	r3, #128	; 0x80
 8004cf8:	d107      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f907 	bl	8004f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d10e      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d107      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f838 	bl	8004da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d10e      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0220 	mvn.w	r2, #32
 8004d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8c7 	bl	8004ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a40      	ldr	r2, [pc, #256]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3d      	ldr	r2, [pc, #244]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3b      	ldr	r2, [pc, #236]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3a      	ldr	r2, [pc, #232]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2f      	ldr	r2, [pc, #188]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01f      	beq.n	8004e56 <TIM_Base_SetConfig+0x9a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d01b      	beq.n	8004e56 <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d017      	beq.n	8004e56 <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <TIM_Base_SetConfig+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a27      	ldr	r2, [pc, #156]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a26      	ldr	r2, [pc, #152]	; (8004eec <TIM_Base_SetConfig+0x130>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00f      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <TIM_Base_SetConfig+0x128>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0f      	ldr	r2, [pc, #60]	; (8004eec <TIM_Base_SetConfig+0x130>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800

08004ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e042      	b.n	8004fc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fb fea1 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2224      	movs	r2, #36	; 0x24
 8004f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8c4 	bl	80050fc <UART_SetConfig>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e022      	b.n	8004fc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fbb4 	bl	80056f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fc3b 	bl	8005838 <UART_CheckIdleState>
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	f040 8084 	bne.w	80050f0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_UART_Transmit+0x28>
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e07c      	b.n	80050f2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_UART_Transmit+0x3a>
 8005002:	2302      	movs	r3, #2
 8005004:	e075      	b.n	80050f2 <HAL_UART_Transmit+0x126>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2221      	movs	r2, #33	; 0x21
 800501a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800501e:	f7fc fe01 	bl	8001c24 <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d108      	bne.n	8005050 <HAL_UART_Transmit+0x84>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e003      	b.n	8005058 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005060:	e02d      	b.n	80050be <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fc2e 	bl	80058ce <UART_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e03a      	b.n	80050f2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	881a      	ldrh	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508e:	b292      	uxth	r2, r2
 8005090:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3302      	adds	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e008      	b.n	80050ac <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	b292      	uxth	r2, r2
 80050a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3301      	adds	r3, #1
 80050aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1cb      	bne.n	8005062 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	2140      	movs	r1, #64	; 0x40
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fbfa 	bl	80058ce <UART_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e006      	b.n	80050f2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005100:	b08c      	sub	sp, #48	; 0x30
 8005102:	af00      	add	r7, sp, #0
 8005104:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	431a      	orrs	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	431a      	orrs	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4313      	orrs	r3, r2
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4baa      	ldr	r3, [pc, #680]	; (80053d4 <UART_SetConfig+0x2d8>)
 800512c:	4013      	ands	r3, r2
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005134:	430b      	orrs	r3, r1
 8005136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a9f      	ldr	r2, [pc, #636]	; (80053d8 <UART_SetConfig+0x2dc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005164:	4313      	orrs	r3, r2
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800517c:	430b      	orrs	r3, r1
 800517e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	f023 010f 	bic.w	r1, r3, #15
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a90      	ldr	r2, [pc, #576]	; (80053dc <UART_SetConfig+0x2e0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d125      	bne.n	80051ec <UART_SetConfig+0xf0>
 80051a0:	4b8f      	ldr	r3, [pc, #572]	; (80053e0 <UART_SetConfig+0x2e4>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d81a      	bhi.n	80051e4 <UART_SetConfig+0xe8>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0xb8>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	080051cd 	.word	0x080051cd
 80051c0:	080051dd 	.word	0x080051dd
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ca:	e116      	b.n	80053fa <UART_SetConfig+0x2fe>
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051d2:	e112      	b.n	80053fa <UART_SetConfig+0x2fe>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051da:	e10e      	b.n	80053fa <UART_SetConfig+0x2fe>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051e2:	e10a      	b.n	80053fa <UART_SetConfig+0x2fe>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ea:	e106      	b.n	80053fa <UART_SetConfig+0x2fe>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a7c      	ldr	r2, [pc, #496]	; (80053e4 <UART_SetConfig+0x2e8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d138      	bne.n	8005268 <UART_SetConfig+0x16c>
 80051f6:	4b7a      	ldr	r3, [pc, #488]	; (80053e0 <UART_SetConfig+0x2e4>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f003 030c 	and.w	r3, r3, #12
 8005200:	2b0c      	cmp	r3, #12
 8005202:	d82d      	bhi.n	8005260 <UART_SetConfig+0x164>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0x110>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	08005241 	.word	0x08005241
 8005210:	08005261 	.word	0x08005261
 8005214:	08005261 	.word	0x08005261
 8005218:	08005261 	.word	0x08005261
 800521c:	08005251 	.word	0x08005251
 8005220:	08005261 	.word	0x08005261
 8005224:	08005261 	.word	0x08005261
 8005228:	08005261 	.word	0x08005261
 800522c:	08005249 	.word	0x08005249
 8005230:	08005261 	.word	0x08005261
 8005234:	08005261 	.word	0x08005261
 8005238:	08005261 	.word	0x08005261
 800523c:	08005259 	.word	0x08005259
 8005240:	2300      	movs	r3, #0
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005246:	e0d8      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005248:	2302      	movs	r3, #2
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524e:	e0d4      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005250:	2304      	movs	r3, #4
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005256:	e0d0      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005258:	2308      	movs	r3, #8
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525e:	e0cc      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005260:	2310      	movs	r3, #16
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005266:	e0c8      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a5e      	ldr	r2, [pc, #376]	; (80053e8 <UART_SetConfig+0x2ec>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d125      	bne.n	80052be <UART_SetConfig+0x1c2>
 8005272:	4b5b      	ldr	r3, [pc, #364]	; (80053e0 <UART_SetConfig+0x2e4>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800527c:	2b30      	cmp	r3, #48	; 0x30
 800527e:	d016      	beq.n	80052ae <UART_SetConfig+0x1b2>
 8005280:	2b30      	cmp	r3, #48	; 0x30
 8005282:	d818      	bhi.n	80052b6 <UART_SetConfig+0x1ba>
 8005284:	2b20      	cmp	r3, #32
 8005286:	d00a      	beq.n	800529e <UART_SetConfig+0x1a2>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d814      	bhi.n	80052b6 <UART_SetConfig+0x1ba>
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <UART_SetConfig+0x19a>
 8005290:	2b10      	cmp	r3, #16
 8005292:	d008      	beq.n	80052a6 <UART_SetConfig+0x1aa>
 8005294:	e00f      	b.n	80052b6 <UART_SetConfig+0x1ba>
 8005296:	2300      	movs	r3, #0
 8005298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529c:	e0ad      	b.n	80053fa <UART_SetConfig+0x2fe>
 800529e:	2302      	movs	r3, #2
 80052a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a4:	e0a9      	b.n	80053fa <UART_SetConfig+0x2fe>
 80052a6:	2304      	movs	r3, #4
 80052a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ac:	e0a5      	b.n	80053fa <UART_SetConfig+0x2fe>
 80052ae:	2308      	movs	r3, #8
 80052b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b4:	e0a1      	b.n	80053fa <UART_SetConfig+0x2fe>
 80052b6:	2310      	movs	r3, #16
 80052b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052bc:	e09d      	b.n	80053fa <UART_SetConfig+0x2fe>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a4a      	ldr	r2, [pc, #296]	; (80053ec <UART_SetConfig+0x2f0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d125      	bne.n	8005314 <UART_SetConfig+0x218>
 80052c8:	4b45      	ldr	r3, [pc, #276]	; (80053e0 <UART_SetConfig+0x2e4>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052d2:	2bc0      	cmp	r3, #192	; 0xc0
 80052d4:	d016      	beq.n	8005304 <UART_SetConfig+0x208>
 80052d6:	2bc0      	cmp	r3, #192	; 0xc0
 80052d8:	d818      	bhi.n	800530c <UART_SetConfig+0x210>
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d00a      	beq.n	80052f4 <UART_SetConfig+0x1f8>
 80052de:	2b80      	cmp	r3, #128	; 0x80
 80052e0:	d814      	bhi.n	800530c <UART_SetConfig+0x210>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <UART_SetConfig+0x1f0>
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d008      	beq.n	80052fc <UART_SetConfig+0x200>
 80052ea:	e00f      	b.n	800530c <UART_SetConfig+0x210>
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052f2:	e082      	b.n	80053fa <UART_SetConfig+0x2fe>
 80052f4:	2302      	movs	r3, #2
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fa:	e07e      	b.n	80053fa <UART_SetConfig+0x2fe>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005302:	e07a      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530a:	e076      	b.n	80053fa <UART_SetConfig+0x2fe>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005312:	e072      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a35      	ldr	r2, [pc, #212]	; (80053f0 <UART_SetConfig+0x2f4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d12a      	bne.n	8005374 <UART_SetConfig+0x278>
 800531e:	4b30      	ldr	r3, [pc, #192]	; (80053e0 <UART_SetConfig+0x2e4>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532c:	d01a      	beq.n	8005364 <UART_SetConfig+0x268>
 800532e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005332:	d81b      	bhi.n	800536c <UART_SetConfig+0x270>
 8005334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005338:	d00c      	beq.n	8005354 <UART_SetConfig+0x258>
 800533a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533e:	d815      	bhi.n	800536c <UART_SetConfig+0x270>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <UART_SetConfig+0x250>
 8005344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005348:	d008      	beq.n	800535c <UART_SetConfig+0x260>
 800534a:	e00f      	b.n	800536c <UART_SetConfig+0x270>
 800534c:	2300      	movs	r3, #0
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005352:	e052      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005354:	2302      	movs	r3, #2
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800535a:	e04e      	b.n	80053fa <UART_SetConfig+0x2fe>
 800535c:	2304      	movs	r3, #4
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005362:	e04a      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005364:	2308      	movs	r3, #8
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536a:	e046      	b.n	80053fa <UART_SetConfig+0x2fe>
 800536c:	2310      	movs	r3, #16
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005372:	e042      	b.n	80053fa <UART_SetConfig+0x2fe>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <UART_SetConfig+0x2dc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d13a      	bne.n	80053f4 <UART_SetConfig+0x2f8>
 800537e:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <UART_SetConfig+0x2e4>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800538c:	d01a      	beq.n	80053c4 <UART_SetConfig+0x2c8>
 800538e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005392:	d81b      	bhi.n	80053cc <UART_SetConfig+0x2d0>
 8005394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005398:	d00c      	beq.n	80053b4 <UART_SetConfig+0x2b8>
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539e:	d815      	bhi.n	80053cc <UART_SetConfig+0x2d0>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <UART_SetConfig+0x2b0>
 80053a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a8:	d008      	beq.n	80053bc <UART_SetConfig+0x2c0>
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x2d0>
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b2:	e022      	b.n	80053fa <UART_SetConfig+0x2fe>
 80053b4:	2302      	movs	r3, #2
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ba:	e01e      	b.n	80053fa <UART_SetConfig+0x2fe>
 80053bc:	2304      	movs	r3, #4
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c2:	e01a      	b.n	80053fa <UART_SetConfig+0x2fe>
 80053c4:	2308      	movs	r3, #8
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ca:	e016      	b.n	80053fa <UART_SetConfig+0x2fe>
 80053cc:	2310      	movs	r3, #16
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d2:	e012      	b.n	80053fa <UART_SetConfig+0x2fe>
 80053d4:	cfff69f3 	.word	0xcfff69f3
 80053d8:	40008000 	.word	0x40008000
 80053dc:	40013800 	.word	0x40013800
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40004400 	.word	0x40004400
 80053e8:	40004800 	.word	0x40004800
 80053ec:	40004c00 	.word	0x40004c00
 80053f0:	40005000 	.word	0x40005000
 80053f4:	2310      	movs	r3, #16
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4aae      	ldr	r2, [pc, #696]	; (80056b8 <UART_SetConfig+0x5bc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	f040 8097 	bne.w	8005534 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800540a:	2b08      	cmp	r3, #8
 800540c:	d823      	bhi.n	8005456 <UART_SetConfig+0x35a>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <UART_SetConfig+0x318>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005439 	.word	0x08005439
 8005418:	08005457 	.word	0x08005457
 800541c:	08005441 	.word	0x08005441
 8005420:	08005457 	.word	0x08005457
 8005424:	08005447 	.word	0x08005447
 8005428:	08005457 	.word	0x08005457
 800542c:	08005457 	.word	0x08005457
 8005430:	08005457 	.word	0x08005457
 8005434:	0800544f 	.word	0x0800544f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005438:	f7fe fc70 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800543e:	e010      	b.n	8005462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005440:	4b9e      	ldr	r3, [pc, #632]	; (80056bc <UART_SetConfig+0x5c0>)
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005444:	e00d      	b.n	8005462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005446:	f7fe fbd1 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 800544a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800544c:	e009      	b.n	8005462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005454:	e005      	b.n	8005462 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8130 	beq.w	80056ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	4a94      	ldr	r2, [pc, #592]	; (80056c0 <UART_SetConfig+0x5c4>)
 8005470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005474:	461a      	mov	r2, r3
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	fbb3 f3f2 	udiv	r3, r3, r2
 800547c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4413      	add	r3, r2
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	429a      	cmp	r2, r3
 800548c:	d305      	bcc.n	800549a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	429a      	cmp	r2, r3
 8005498:	d903      	bls.n	80054a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054a0:	e113      	b.n	80056ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	2200      	movs	r2, #0
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	60fa      	str	r2, [r7, #12]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	4a84      	ldr	r2, [pc, #528]	; (80056c0 <UART_SetConfig+0x5c4>)
 80054b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054c4:	f7fa fef4 	bl	80002b0 <__aeabi_uldivmod>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	020b      	lsls	r3, r1, #8
 80054da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054de:	0202      	lsls	r2, r0, #8
 80054e0:	6979      	ldr	r1, [r7, #20]
 80054e2:	6849      	ldr	r1, [r1, #4]
 80054e4:	0849      	lsrs	r1, r1, #1
 80054e6:	2000      	movs	r0, #0
 80054e8:	460c      	mov	r4, r1
 80054ea:	4605      	mov	r5, r0
 80054ec:	eb12 0804 	adds.w	r8, r2, r4
 80054f0:	eb43 0905 	adc.w	r9, r3, r5
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	469a      	mov	sl, r3
 80054fc:	4693      	mov	fp, r2
 80054fe:	4652      	mov	r2, sl
 8005500:	465b      	mov	r3, fp
 8005502:	4640      	mov	r0, r8
 8005504:	4649      	mov	r1, r9
 8005506:	f7fa fed3 	bl	80002b0 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4613      	mov	r3, r2
 8005510:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005518:	d308      	bcc.n	800552c <UART_SetConfig+0x430>
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005520:	d204      	bcs.n	800552c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	e0ce      	b.n	80056ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005532:	e0ca      	b.n	80056ca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553c:	d166      	bne.n	800560c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800553e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005542:	2b08      	cmp	r3, #8
 8005544:	d827      	bhi.n	8005596 <UART_SetConfig+0x49a>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x450>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	08005597 	.word	0x08005597
 800555c:	08005587 	.word	0x08005587
 8005560:	08005597 	.word	0x08005597
 8005564:	08005597 	.word	0x08005597
 8005568:	08005597 	.word	0x08005597
 800556c:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005570:	f7fe fbd4 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005576:	e014      	b.n	80055a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fe fbe6 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 800557c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b4e      	ldr	r3, [pc, #312]	; (80056bc <UART_SetConfig+0x5c0>)
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fe fb31 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 800558a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8090 	beq.w	80056ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	4a44      	ldr	r2, [pc, #272]	; (80056c0 <UART_SetConfig+0x5c4>)
 80055b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055bc:	005a      	lsls	r2, r3, #1
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	441a      	add	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	d916      	bls.n	8005604 <UART_SetConfig+0x508>
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055dc:	d212      	bcs.n	8005604 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f023 030f 	bic.w	r3, r3, #15
 80055e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	8bfb      	ldrh	r3, [r7, #30]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	8bfa      	ldrh	r2, [r7, #30]
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	e062      	b.n	80056ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800560a:	e05e      	b.n	80056ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800560c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005610:	2b08      	cmp	r3, #8
 8005612:	d828      	bhi.n	8005666 <UART_SetConfig+0x56a>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <UART_SetConfig+0x520>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	08005641 	.word	0x08005641
 8005620:	08005649 	.word	0x08005649
 8005624:	08005651 	.word	0x08005651
 8005628:	08005667 	.word	0x08005667
 800562c:	08005657 	.word	0x08005657
 8005630:	08005667 	.word	0x08005667
 8005634:	08005667 	.word	0x08005667
 8005638:	08005667 	.word	0x08005667
 800563c:	0800565f 	.word	0x0800565f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005640:	f7fe fb6c 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005644:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005646:	e014      	b.n	8005672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7fe fb7e 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 800564c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800564e:	e010      	b.n	8005672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <UART_SetConfig+0x5c0>)
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005654:	e00d      	b.n	8005672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005656:	f7fe fac9 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 800565a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800565c:	e009      	b.n	8005672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005664:	e005      	b.n	8005672 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005670:	bf00      	nop
    }

    if (pclk != 0U)
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	d028      	beq.n	80056ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <UART_SetConfig+0x5c4>)
 800567e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005682:	461a      	mov	r2, r3
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	fbb3 f2f2 	udiv	r2, r3, r2
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	441a      	add	r2, r3
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	fbb2 f3f3 	udiv	r3, r2, r3
 800569a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2b0f      	cmp	r3, #15
 80056a0:	d910      	bls.n	80056c4 <UART_SetConfig+0x5c8>
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a8:	d20c      	bcs.n	80056c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60da      	str	r2, [r3, #12]
 80056b4:	e009      	b.n	80056ca <UART_SetConfig+0x5ce>
 80056b6:	bf00      	nop
 80056b8:	40008000 	.word	0x40008000
 80056bc:	00f42400 	.word	0x00f42400
 80056c0:	08007b90 	.word	0x08007b90
      }
      else
      {
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80056e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3730      	adds	r7, #48	; 0x30
 80056ee:	46bd      	mov	sp, r7
 80056f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080056f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01a      	beq.n	800580a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f2:	d10a      	bne.n	800580a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af02      	add	r7, sp, #8
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005848:	f7fc f9ec 	bl	8001c24 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b08      	cmp	r3, #8
 800585a:	d10e      	bne.n	800587a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800585c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f82f 	bl	80058ce <UART_WaitOnFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e025      	b.n	80058c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b04      	cmp	r3, #4
 8005886:	d10e      	bne.n	80058a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f819 	bl	80058ce <UART_WaitOnFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e00f      	b.n	80058c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b09c      	sub	sp, #112	; 0x70
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058de:	e0a9      	b.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e6:	f000 80a5 	beq.w	8005a34 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ea:	f7fc f99b 	bl	8001c24 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d302      	bcc.n	8005900 <UART_WaitOnFlagUntilTimeout+0x32>
 80058fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d140      	bne.n	8005982 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800590e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005910:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005914:	667b      	str	r3, [r7, #100]	; 0x64
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800591e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005920:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800592c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e6      	bne.n	8005900 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3308      	adds	r3, #8
 8005938:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	f023 0301 	bic.w	r3, r3, #1
 8005948:	663b      	str	r3, [r7, #96]	; 0x60
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3308      	adds	r3, #8
 8005950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005952:	64ba      	str	r2, [r7, #72]	; 0x48
 8005954:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2220      	movs	r2, #32
 800596a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e069      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d051      	beq.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599e:	d149      	bne.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	613b      	str	r3, [r7, #16]
   return(result);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059fc:	623a      	str	r2, [r7, #32]
 80059fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	69f9      	ldr	r1, [r7, #28]
 8005a02:	6a3a      	ldr	r2, [r7, #32]
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e010      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	f43f af46 	beq.w	80058e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3770      	adds	r7, #112	; 0x70
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e027      	b.n	8005ac4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2224      	movs	r2, #36	; 0x24
 8005a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005aa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e02d      	b.n	8005b44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2224      	movs	r2, #36	; 0x24
 8005af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0201 	bic.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f84f 	bl	8005bc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e02d      	b.n	8005bc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	; 0x24
 8005b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f811 	bl	8005bc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d108      	bne.n	8005bea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005be8:	e031      	b.n	8005c4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bea:	2308      	movs	r3, #8
 8005bec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bee:	2308      	movs	r3, #8
 8005bf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	0e5b      	lsrs	r3, r3, #25
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	0f5b      	lsrs	r3, r3, #29
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c12:	7bbb      	ldrb	r3, [r7, #14]
 8005c14:	7b3a      	ldrb	r2, [r7, #12]
 8005c16:	4911      	ldr	r1, [pc, #68]	; (8005c5c <UARTEx_SetNbDataToProcess+0x94>)
 8005c18:	5c8a      	ldrb	r2, [r1, r2]
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c1e:	7b3a      	ldrb	r2, [r7, #12]
 8005c20:	490f      	ldr	r1, [pc, #60]	; (8005c60 <UARTEx_SetNbDataToProcess+0x98>)
 8005c22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c24:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	7b7a      	ldrb	r2, [r7, #13]
 8005c34:	4909      	ldr	r1, [pc, #36]	; (8005c5c <UARTEx_SetNbDataToProcess+0x94>)
 8005c36:	5c8a      	ldrb	r2, [r1, r2]
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c3c:	7b7a      	ldrb	r2, [r7, #13]
 8005c3e:	4908      	ldr	r1, [pc, #32]	; (8005c60 <UARTEx_SetNbDataToProcess+0x98>)
 8005c40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c42:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	08007ba8 	.word	0x08007ba8
 8005c60:	08007bb0 	.word	0x08007bb0

08005c64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c76:	2b84      	cmp	r3, #132	; 0x84
 8005c78:	d005      	beq.n	8005c86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	3303      	adds	r3, #3
 8005c84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c98:	f000 fade 	bl	8006258 <vTaskStartScheduler>
  
  return osOK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca4:	b089      	sub	sp, #36	; 0x24
 8005ca6:	af04      	add	r7, sp, #16
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d020      	beq.n	8005cf6 <osThreadCreate+0x54>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01c      	beq.n	8005cf6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685c      	ldr	r4, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681d      	ldr	r5, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691e      	ldr	r6, [r3, #16]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff ffc8 	bl	8005c64 <makeFreeRtosPriority>
 8005cd4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cde:	9202      	str	r2, [sp, #8]
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	9100      	str	r1, [sp, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 f8ed 	bl	8005eca <xTaskCreateStatic>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e01c      	b.n	8005d30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685c      	ldr	r4, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d02:	b29e      	uxth	r6, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff ffaa 	bl	8005c64 <makeFreeRtosPriority>
 8005d10:	4602      	mov	r2, r0
 8005d12:	f107 030c 	add.w	r3, r7, #12
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	9200      	str	r2, [sp, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	4629      	mov	r1, r5
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 f92f 	bl	8005f84 <xTaskCreate>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d30:	68fb      	ldr	r3, [r7, #12]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <osDelay+0x16>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	e000      	b.n	8005d52 <osDelay+0x18>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fa4c 	bl	80061f0 <vTaskDelay>
  
  return osOK;
 8005d58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f103 0208 	add.w	r2, r3, #8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f103 0208 	add.w	r2, r3, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f103 0208 	add.w	r2, r3, #8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e1a:	d103      	bne.n	8005e24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e00c      	b.n	8005e3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3308      	adds	r3, #8
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e002      	b.n	8005e32 <vListInsert+0x2e>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d2f6      	bcs.n	8005e2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6892      	ldr	r2, [r2, #8]
 8005e8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6852      	ldr	r2, [r2, #4]
 8005e96:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d103      	bne.n	8005eaa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b08e      	sub	sp, #56	; 0x38
 8005ece:	af04      	add	r7, sp, #16
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <xTaskCreateStatic+0x46>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	61fb      	str	r3, [r7, #28]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f10:	2354      	movs	r3, #84	; 0x54
 8005f12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b54      	cmp	r3, #84	; 0x54
 8005f18:	d00a      	beq.n	8005f30 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	61bb      	str	r3, [r7, #24]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01e      	beq.n	8005f76 <xTaskCreateStatic+0xac>
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d01b      	beq.n	8005f76 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f50:	2300      	movs	r3, #0
 8005f52:	9303      	str	r3, [sp, #12]
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	f107 0314 	add.w	r3, r7, #20
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f850 	bl	800600e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f70:	f000 f8d4 	bl	800611c <prvAddNewTaskToReadyList>
 8005f74:	e001      	b.n	8005f7a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f7a:	697b      	ldr	r3, [r7, #20]
	}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3728      	adds	r7, #40	; 0x28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af04      	add	r7, sp, #16
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fec5 	bl	8006d28 <pvPortMalloc>
 8005f9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00e      	beq.n	8005fc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fa6:	2054      	movs	r0, #84	; 0x54
 8005fa8:	f000 febe 	bl	8006d28 <pvPortMalloc>
 8005fac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8005fba:	e005      	b.n	8005fc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fbc:	6978      	ldr	r0, [r7, #20]
 8005fbe:	f000 ff7f 	bl	8006ec0 <vPortFree>
 8005fc2:	e001      	b.n	8005fc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d017      	beq.n	8005ffe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9303      	str	r3, [sp, #12]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	9302      	str	r3, [sp, #8]
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f80e 	bl	800600e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ff2:	69f8      	ldr	r0, [r7, #28]
 8005ff4:	f000 f892 	bl	800611c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e002      	b.n	8006004 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006002:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006004:	69bb      	ldr	r3, [r7, #24]
	}
 8006006:	4618      	mov	r0, r3
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b088      	sub	sp, #32
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006026:	3b01      	subs	r3, #1
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f023 0307 	bic.w	r3, r3, #7
 8006034:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	617b      	str	r3, [r7, #20]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01f      	beq.n	800609c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800605c:	2300      	movs	r3, #0
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	e012      	b.n	8006088 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	7819      	ldrb	r1, [r3, #0]
 800606a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	3334      	adds	r3, #52	; 0x34
 8006072:	460a      	mov	r2, r1
 8006074:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d006      	beq.n	8006090 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	d9e9      	bls.n	8006062 <prvInitialiseNewTask+0x54>
 800608e:	e000      	b.n	8006092 <prvInitialiseNewTask+0x84>
			{
				break;
 8006090:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800609a:	e003      	b.n	80060a4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d901      	bls.n	80060ae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060aa:	2306      	movs	r3, #6
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	2200      	movs	r2, #0
 80060be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fe6c 	bl	8005da2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	3318      	adds	r3, #24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff fe67 	bl	8005da2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	f1c3 0207 	rsb	r2, r3, #7
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	2200      	movs	r2, #0
 80060ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	69b8      	ldr	r0, [r7, #24]
 80060fe:	f000 fc05 	bl	800690c <pxPortInitialiseStack>
 8006102:	4602      	mov	r2, r0
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006112:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006114:	bf00      	nop
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006124:	f000 fd1e 	bl	8006b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006128:	4b2a      	ldr	r3, [pc, #168]	; (80061d4 <prvAddNewTaskToReadyList+0xb8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	4a29      	ldr	r2, [pc, #164]	; (80061d4 <prvAddNewTaskToReadyList+0xb8>)
 8006130:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006132:	4b29      	ldr	r3, [pc, #164]	; (80061d8 <prvAddNewTaskToReadyList+0xbc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800613a:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <prvAddNewTaskToReadyList+0xbc>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006140:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <prvAddNewTaskToReadyList+0xb8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d110      	bne.n	800616a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006148:	f000 fabc 	bl	80066c4 <prvInitialiseTaskLists>
 800614c:	e00d      	b.n	800616a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800614e:	4b23      	ldr	r3, [pc, #140]	; (80061dc <prvAddNewTaskToReadyList+0xc0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006156:	4b20      	ldr	r3, [pc, #128]	; (80061d8 <prvAddNewTaskToReadyList+0xbc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	429a      	cmp	r2, r3
 8006162:	d802      	bhi.n	800616a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006164:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <prvAddNewTaskToReadyList+0xbc>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800616a:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <prvAddNewTaskToReadyList+0xc4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3301      	adds	r3, #1
 8006170:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <prvAddNewTaskToReadyList+0xc4>)
 8006172:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	2201      	movs	r2, #1
 800617a:	409a      	lsls	r2, r3
 800617c:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <prvAddNewTaskToReadyList+0xc8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4313      	orrs	r3, r2
 8006182:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <prvAddNewTaskToReadyList+0xc8>)
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <prvAddNewTaskToReadyList+0xcc>)
 8006194:	441a      	add	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f7ff fe0d 	bl	8005dbc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061a2:	f000 fd0f 	bl	8006bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <prvAddNewTaskToReadyList+0xc0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00e      	beq.n	80061cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061ae:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvAddNewTaskToReadyList+0xbc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d207      	bcs.n	80061cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <prvAddNewTaskToReadyList+0xd0>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	2000068c 	.word	0x2000068c
 80061d8:	2000058c 	.word	0x2000058c
 80061dc:	20000698 	.word	0x20000698
 80061e0:	200006a8 	.word	0x200006a8
 80061e4:	20000694 	.word	0x20000694
 80061e8:	20000590 	.word	0x20000590
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d017      	beq.n	8006232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006202:	4b13      	ldr	r3, [pc, #76]	; (8006250 <vTaskDelay+0x60>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <vTaskDelay+0x30>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	60bb      	str	r3, [r7, #8]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006220:	f000 f87a 	bl	8006318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006224:	2100      	movs	r1, #0
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fb0a 	bl	8006840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800622c:	f000 f882 	bl	8006334 <xTaskResumeAll>
 8006230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <vTaskDelay+0x64>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006248:	bf00      	nop
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	200006b4 	.word	0x200006b4
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006266:	463a      	mov	r2, r7
 8006268:	1d39      	adds	r1, r7, #4
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f7fa f9a0 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	2300      	movs	r3, #0
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	460a      	mov	r2, r1
 8006286:	491e      	ldr	r1, [pc, #120]	; (8006300 <vTaskStartScheduler+0xa8>)
 8006288:	481e      	ldr	r0, [pc, #120]	; (8006304 <vTaskStartScheduler+0xac>)
 800628a:	f7ff fe1e 	bl	8005eca <xTaskCreateStatic>
 800628e:	4603      	mov	r3, r0
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <vTaskStartScheduler+0xb0>)
 8006292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006294:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <vTaskStartScheduler+0xb0>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800629c:	2301      	movs	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e001      	b.n	80062a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d116      	bne.n	80062da <vTaskStartScheduler+0x82>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	613b      	str	r3, [r7, #16]
}
 80062be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <vTaskStartScheduler+0xb4>)
 80062c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062c8:	4b11      	ldr	r3, [pc, #68]	; (8006310 <vTaskStartScheduler+0xb8>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <vTaskStartScheduler+0xbc>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062d4:	f000 fba4 	bl	8006a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062d8:	e00e      	b.n	80062f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e0:	d10a      	bne.n	80062f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	60fb      	str	r3, [r7, #12]
}
 80062f4:	bf00      	nop
 80062f6:	e7fe      	b.n	80062f6 <vTaskStartScheduler+0x9e>
}
 80062f8:	bf00      	nop
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	08007b40 	.word	0x08007b40
 8006304:	08006695 	.word	0x08006695
 8006308:	200006b0 	.word	0x200006b0
 800630c:	200006ac 	.word	0x200006ac
 8006310:	20000698 	.word	0x20000698
 8006314:	20000690 	.word	0x20000690

08006318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800631c:	4b04      	ldr	r3, [pc, #16]	; (8006330 <vTaskSuspendAll+0x18>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3301      	adds	r3, #1
 8006322:	4a03      	ldr	r2, [pc, #12]	; (8006330 <vTaskSuspendAll+0x18>)
 8006324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006326:	bf00      	nop
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	200006b4 	.word	0x200006b4

08006334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800633e:	2300      	movs	r3, #0
 8006340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006342:	4b41      	ldr	r3, [pc, #260]	; (8006448 <xTaskResumeAll+0x114>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <xTaskResumeAll+0x2c>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	603b      	str	r3, [r7, #0]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006360:	f000 fc00 	bl	8006b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006364:	4b38      	ldr	r3, [pc, #224]	; (8006448 <xTaskResumeAll+0x114>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3b01      	subs	r3, #1
 800636a:	4a37      	ldr	r2, [pc, #220]	; (8006448 <xTaskResumeAll+0x114>)
 800636c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636e:	4b36      	ldr	r3, [pc, #216]	; (8006448 <xTaskResumeAll+0x114>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d161      	bne.n	800643a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006376:	4b35      	ldr	r3, [pc, #212]	; (800644c <xTaskResumeAll+0x118>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d05d      	beq.n	800643a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800637e:	e02e      	b.n	80063de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006380:	4b33      	ldr	r3, [pc, #204]	; (8006450 <xTaskResumeAll+0x11c>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3318      	adds	r3, #24
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fd72 	bl	8005e76 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3304      	adds	r3, #4
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fd6d 	bl	8005e76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	2201      	movs	r2, #1
 80063a2:	409a      	lsls	r2, r3
 80063a4:	4b2b      	ldr	r3, [pc, #172]	; (8006454 <xTaskResumeAll+0x120>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	4a2a      	ldr	r2, [pc, #168]	; (8006454 <xTaskResumeAll+0x120>)
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4a27      	ldr	r2, [pc, #156]	; (8006458 <xTaskResumeAll+0x124>)
 80063bc:	441a      	add	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f7ff fcf9 	bl	8005dbc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	4b23      	ldr	r3, [pc, #140]	; (800645c <xTaskResumeAll+0x128>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d302      	bcc.n	80063de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80063d8:	4b21      	ldr	r3, [pc, #132]	; (8006460 <xTaskResumeAll+0x12c>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063de:	4b1c      	ldr	r3, [pc, #112]	; (8006450 <xTaskResumeAll+0x11c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1cc      	bne.n	8006380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063ec:	f000 fa08 	bl	8006800 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063f0:	4b1c      	ldr	r3, [pc, #112]	; (8006464 <xTaskResumeAll+0x130>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d010      	beq.n	800641e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063fc:	f000 f836 	bl	800646c <xTaskIncrementTick>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006406:	4b16      	ldr	r3, [pc, #88]	; (8006460 <xTaskResumeAll+0x12c>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3b01      	subs	r3, #1
 8006410:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f1      	bne.n	80063fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006418:	4b12      	ldr	r3, [pc, #72]	; (8006464 <xTaskResumeAll+0x130>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <xTaskResumeAll+0x12c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006426:	2301      	movs	r3, #1
 8006428:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800642a:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <xTaskResumeAll+0x134>)
 800642c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800643a:	f000 fbc3 	bl	8006bc4 <vPortExitCritical>

	return xAlreadyYielded;
 800643e:	68bb      	ldr	r3, [r7, #8]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	200006b4 	.word	0x200006b4
 800644c:	2000068c 	.word	0x2000068c
 8006450:	2000064c 	.word	0x2000064c
 8006454:	20000694 	.word	0x20000694
 8006458:	20000590 	.word	0x20000590
 800645c:	2000058c 	.word	0x2000058c
 8006460:	200006a0 	.word	0x200006a0
 8006464:	2000069c 	.word	0x2000069c
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006476:	4b4e      	ldr	r3, [pc, #312]	; (80065b0 <xTaskIncrementTick+0x144>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 808e 	bne.w	800659c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006480:	4b4c      	ldr	r3, [pc, #304]	; (80065b4 <xTaskIncrementTick+0x148>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006488:	4a4a      	ldr	r2, [pc, #296]	; (80065b4 <xTaskIncrementTick+0x148>)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d120      	bne.n	80064d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006494:	4b48      	ldr	r3, [pc, #288]	; (80065b8 <xTaskIncrementTick+0x14c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	603b      	str	r3, [r7, #0]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xTaskIncrementTick+0x46>
 80064b4:	4b40      	ldr	r3, [pc, #256]	; (80065b8 <xTaskIncrementTick+0x14c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	4b40      	ldr	r3, [pc, #256]	; (80065bc <xTaskIncrementTick+0x150>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <xTaskIncrementTick+0x14c>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4a3e      	ldr	r2, [pc, #248]	; (80065bc <xTaskIncrementTick+0x150>)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <xTaskIncrementTick+0x154>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	4a3c      	ldr	r2, [pc, #240]	; (80065c0 <xTaskIncrementTick+0x154>)
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	f000 f995 	bl	8006800 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064d6:	4b3b      	ldr	r3, [pc, #236]	; (80065c4 <xTaskIncrementTick+0x158>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d348      	bcc.n	8006572 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064e0:	4b35      	ldr	r3, [pc, #212]	; (80065b8 <xTaskIncrementTick+0x14c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ea:	4b36      	ldr	r3, [pc, #216]	; (80065c4 <xTaskIncrementTick+0x158>)
 80064ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f0:	601a      	str	r2, [r3, #0]
					break;
 80064f2:	e03e      	b.n	8006572 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f4:	4b30      	ldr	r3, [pc, #192]	; (80065b8 <xTaskIncrementTick+0x14c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d203      	bcs.n	8006514 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800650c:	4a2d      	ldr	r2, [pc, #180]	; (80065c4 <xTaskIncrementTick+0x158>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006512:	e02e      	b.n	8006572 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fcac 	bl	8005e76 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	3318      	adds	r3, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fca3 	bl	8005e76 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	2201      	movs	r2, #1
 8006536:	409a      	lsls	r2, r3
 8006538:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <xTaskIncrementTick+0x15c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4313      	orrs	r3, r2
 800653e:	4a22      	ldr	r2, [pc, #136]	; (80065c8 <xTaskIncrementTick+0x15c>)
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <xTaskIncrementTick+0x160>)
 8006550:	441a      	add	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7ff fc2f 	bl	8005dbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <xTaskIncrementTick+0x164>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	429a      	cmp	r2, r3
 800656a:	d3b9      	bcc.n	80064e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800656c:	2301      	movs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006570:	e7b6      	b.n	80064e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006572:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <xTaskIncrementTick+0x164>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	4914      	ldr	r1, [pc, #80]	; (80065cc <xTaskIncrementTick+0x160>)
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d901      	bls.n	800658e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800658a:	2301      	movs	r3, #1
 800658c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <xTaskIncrementTick+0x168>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006596:	2301      	movs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	e004      	b.n	80065a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800659c:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <xTaskIncrementTick+0x16c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	4a0d      	ldr	r2, [pc, #52]	; (80065d8 <xTaskIncrementTick+0x16c>)
 80065a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065a6:	697b      	ldr	r3, [r7, #20]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	200006b4 	.word	0x200006b4
 80065b4:	20000690 	.word	0x20000690
 80065b8:	20000644 	.word	0x20000644
 80065bc:	20000648 	.word	0x20000648
 80065c0:	200006a4 	.word	0x200006a4
 80065c4:	200006ac 	.word	0x200006ac
 80065c8:	20000694 	.word	0x20000694
 80065cc:	20000590 	.word	0x20000590
 80065d0:	2000058c 	.word	0x2000058c
 80065d4:	200006a0 	.word	0x200006a0
 80065d8:	2000069c 	.word	0x2000069c

080065dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065e2:	4b27      	ldr	r3, [pc, #156]	; (8006680 <vTaskSwitchContext+0xa4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065ea:	4b26      	ldr	r3, [pc, #152]	; (8006684 <vTaskSwitchContext+0xa8>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065f0:	e03f      	b.n	8006672 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80065f2:	4b24      	ldr	r3, [pc, #144]	; (8006684 <vTaskSwitchContext+0xa8>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f8:	4b23      	ldr	r3, [pc, #140]	; (8006688 <vTaskSwitchContext+0xac>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	fab3 f383 	clz	r3, r3
 8006604:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	f1c3 031f 	rsb	r3, r3, #31
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	491f      	ldr	r1, [pc, #124]	; (800668c <vTaskSwitchContext+0xb0>)
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vTaskSwitchContext+0x5a>
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4a12      	ldr	r2, [pc, #72]	; (800668c <vTaskSwitchContext+0xb0>)
 8006644:	4413      	add	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3308      	adds	r3, #8
 800665a:	429a      	cmp	r2, r3
 800665c:	d104      	bne.n	8006668 <vTaskSwitchContext+0x8c>
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	4a08      	ldr	r2, [pc, #32]	; (8006690 <vTaskSwitchContext+0xb4>)
 8006670:	6013      	str	r3, [r2, #0]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	200006b4 	.word	0x200006b4
 8006684:	200006a0 	.word	0x200006a0
 8006688:	20000694 	.word	0x20000694
 800668c:	20000590 	.word	0x20000590
 8006690:	2000058c 	.word	0x2000058c

08006694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800669c:	f000 f852 	bl	8006744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <prvIdleTask+0x28>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d9f9      	bls.n	800669c <prvIdleTask+0x8>
			{
				taskYIELD();
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <prvIdleTask+0x2c>)
 80066aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066b8:	e7f0      	b.n	800669c <prvIdleTask+0x8>
 80066ba:	bf00      	nop
 80066bc:	20000590 	.word	0x20000590
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	e00c      	b.n	80066ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4a12      	ldr	r2, [pc, #72]	; (8006724 <prvInitialiseTaskLists+0x60>)
 80066dc:	4413      	add	r3, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fb3f 	bl	8005d62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3301      	adds	r3, #1
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b06      	cmp	r3, #6
 80066ee:	d9ef      	bls.n	80066d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066f0:	480d      	ldr	r0, [pc, #52]	; (8006728 <prvInitialiseTaskLists+0x64>)
 80066f2:	f7ff fb36 	bl	8005d62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066f6:	480d      	ldr	r0, [pc, #52]	; (800672c <prvInitialiseTaskLists+0x68>)
 80066f8:	f7ff fb33 	bl	8005d62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066fc:	480c      	ldr	r0, [pc, #48]	; (8006730 <prvInitialiseTaskLists+0x6c>)
 80066fe:	f7ff fb30 	bl	8005d62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006702:	480c      	ldr	r0, [pc, #48]	; (8006734 <prvInitialiseTaskLists+0x70>)
 8006704:	f7ff fb2d 	bl	8005d62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006708:	480b      	ldr	r0, [pc, #44]	; (8006738 <prvInitialiseTaskLists+0x74>)
 800670a:	f7ff fb2a 	bl	8005d62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800670e:	4b0b      	ldr	r3, [pc, #44]	; (800673c <prvInitialiseTaskLists+0x78>)
 8006710:	4a05      	ldr	r2, [pc, #20]	; (8006728 <prvInitialiseTaskLists+0x64>)
 8006712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <prvInitialiseTaskLists+0x7c>)
 8006716:	4a05      	ldr	r2, [pc, #20]	; (800672c <prvInitialiseTaskLists+0x68>)
 8006718:	601a      	str	r2, [r3, #0]
}
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20000590 	.word	0x20000590
 8006728:	2000061c 	.word	0x2000061c
 800672c:	20000630 	.word	0x20000630
 8006730:	2000064c 	.word	0x2000064c
 8006734:	20000660 	.word	0x20000660
 8006738:	20000678 	.word	0x20000678
 800673c:	20000644 	.word	0x20000644
 8006740:	20000648 	.word	0x20000648

08006744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800674a:	e019      	b.n	8006780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800674c:	f000 fa0a 	bl	8006b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006750:	4b10      	ldr	r3, [pc, #64]	; (8006794 <prvCheckTasksWaitingTermination+0x50>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fb8a 	bl	8005e76 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006762:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <prvCheckTasksWaitingTermination+0x54>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3b01      	subs	r3, #1
 8006768:	4a0b      	ldr	r2, [pc, #44]	; (8006798 <prvCheckTasksWaitingTermination+0x54>)
 800676a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800676c:	4b0b      	ldr	r3, [pc, #44]	; (800679c <prvCheckTasksWaitingTermination+0x58>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	4a0a      	ldr	r2, [pc, #40]	; (800679c <prvCheckTasksWaitingTermination+0x58>)
 8006774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006776:	f000 fa25 	bl	8006bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f810 	bl	80067a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <prvCheckTasksWaitingTermination+0x58>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e1      	bne.n	800674c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000660 	.word	0x20000660
 8006798:	2000068c 	.word	0x2000068c
 800679c:	20000674 	.word	0x20000674

080067a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d108      	bne.n	80067c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fb82 	bl	8006ec0 <vPortFree>
				vPortFree( pxTCB );
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fb7f 	bl	8006ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067c2:	e018      	b.n	80067f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d103      	bne.n	80067d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fb76 	bl	8006ec0 <vPortFree>
	}
 80067d4:	e00f      	b.n	80067f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d00a      	beq.n	80067f6 <prvDeleteTCB+0x56>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	60fb      	str	r3, [r7, #12]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <prvDeleteTCB+0x54>
	}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <prvResetNextTaskUnblockTime+0x38>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006810:	4b0a      	ldr	r3, [pc, #40]	; (800683c <prvResetNextTaskUnblockTime+0x3c>)
 8006812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006816:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006818:	e008      	b.n	800682c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <prvResetNextTaskUnblockTime+0x38>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	4a04      	ldr	r2, [pc, #16]	; (800683c <prvResetNextTaskUnblockTime+0x3c>)
 800682a:	6013      	str	r3, [r2, #0]
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	20000644 	.word	0x20000644
 800683c:	200006ac 	.word	0x200006ac

08006840 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800684a:	4b29      	ldr	r3, [pc, #164]	; (80068f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006850:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fb0d 	bl	8005e76 <uxListRemove>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10b      	bne.n	800687a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006862:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	2201      	movs	r2, #1
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43da      	mvns	r2, r3
 8006870:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4013      	ands	r3, r2
 8006876:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006878:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006880:	d10a      	bne.n	8006898 <prvAddCurrentTaskToDelayedList+0x58>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d007      	beq.n	8006898 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006888:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3304      	adds	r3, #4
 800688e:	4619      	mov	r1, r3
 8006890:	481a      	ldr	r0, [pc, #104]	; (80068fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006892:	f7ff fa93 	bl	8005dbc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006896:	e026      	b.n	80068e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068a0:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d209      	bcs.n	80068c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068b0:	4b13      	ldr	r3, [pc, #76]	; (8006900 <prvAddCurrentTaskToDelayedList+0xc0>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3304      	adds	r3, #4
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f7ff faa1 	bl	8005e04 <vListInsert>
}
 80068c2:	e010      	b.n	80068e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068c4:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <prvAddCurrentTaskToDelayedList+0xc4>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3304      	adds	r3, #4
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f7ff fa97 	bl	8005e04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d202      	bcs.n	80068e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068e0:	4a09      	ldr	r2, [pc, #36]	; (8006908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6013      	str	r3, [r2, #0]
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000690 	.word	0x20000690
 80068f4:	2000058c 	.word	0x2000058c
 80068f8:	20000694 	.word	0x20000694
 80068fc:	20000678 	.word	0x20000678
 8006900:	20000648 	.word	0x20000648
 8006904:	20000644 	.word	0x20000644
 8006908:	200006ac 	.word	0x200006ac

0800690c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3b04      	subs	r3, #4
 800691c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3b04      	subs	r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 0201 	bic.w	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3b04      	subs	r3, #4
 800693a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800693c:	4a0c      	ldr	r2, [pc, #48]	; (8006970 <pxPortInitialiseStack+0x64>)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3b14      	subs	r3, #20
 8006946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b04      	subs	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f06f 0202 	mvn.w	r2, #2
 800695a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3b20      	subs	r3, #32
 8006960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	08006975 	.word	0x08006975

08006974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800697e:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <prvTaskExitError+0x54>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006986:	d00a      	beq.n	800699e <prvTaskExitError+0x2a>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <prvTaskExitError+0x28>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	60bb      	str	r3, [r7, #8]
}
 80069b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069b2:	bf00      	nop
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0fc      	beq.n	80069b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	2000008c 	.word	0x2000008c
 80069cc:	00000000 	.word	0x00000000

080069d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <pxCurrentTCBConst2>)
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	6808      	ldr	r0, [r1, #0]
 80069d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069da:	f380 8809 	msr	PSP, r0
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f380 8811 	msr	BASEPRI, r0
 80069ea:	4770      	bx	lr
 80069ec:	f3af 8000 	nop.w

080069f0 <pxCurrentTCBConst2>:
 80069f0:	2000058c 	.word	0x2000058c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop

080069f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069f8:	4808      	ldr	r0, [pc, #32]	; (8006a1c <prvPortStartFirstTask+0x24>)
 80069fa:	6800      	ldr	r0, [r0, #0]
 80069fc:	6800      	ldr	r0, [r0, #0]
 80069fe:	f380 8808 	msr	MSP, r0
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f380 8814 	msr	CONTROL, r0
 8006a0a:	b662      	cpsie	i
 8006a0c:	b661      	cpsie	f
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	df00      	svc	0
 8006a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a1a:	bf00      	nop
 8006a1c:	e000ed08 	.word	0xe000ed08

08006a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a26:	4b46      	ldr	r3, [pc, #280]	; (8006b40 <xPortStartScheduler+0x120>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a46      	ldr	r2, [pc, #280]	; (8006b44 <xPortStartScheduler+0x124>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10a      	bne.n	8006a46 <xPortStartScheduler+0x26>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	613b      	str	r3, [r7, #16]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a46:	4b3e      	ldr	r3, [pc, #248]	; (8006b40 <xPortStartScheduler+0x120>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a3f      	ldr	r2, [pc, #252]	; (8006b48 <xPortStartScheduler+0x128>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10a      	bne.n	8006a66 <xPortStartScheduler+0x46>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	60fb      	str	r3, [r7, #12]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a66:	4b39      	ldr	r3, [pc, #228]	; (8006b4c <xPortStartScheduler+0x12c>)
 8006a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <xPortStartScheduler+0x130>)
 8006a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a8e:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <xPortStartScheduler+0x134>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a94:	e009      	b.n	8006aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a96:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <xPortStartScheduler+0x134>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	4a2d      	ldr	r2, [pc, #180]	; (8006b54 <xPortStartScheduler+0x134>)
 8006a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d0ef      	beq.n	8006a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ab6:	4b27      	ldr	r3, [pc, #156]	; (8006b54 <xPortStartScheduler+0x134>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f1c3 0307 	rsb	r3, r3, #7
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d00a      	beq.n	8006ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	60bb      	str	r3, [r7, #8]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ad8:	4b1e      	ldr	r3, [pc, #120]	; (8006b54 <xPortStartScheduler+0x134>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <xPortStartScheduler+0x134>)
 8006ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ae2:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <xPortStartScheduler+0x134>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006aea:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <xPortStartScheduler+0x134>)
 8006aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006af6:	4b18      	ldr	r3, [pc, #96]	; (8006b58 <xPortStartScheduler+0x138>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a17      	ldr	r2, [pc, #92]	; (8006b58 <xPortStartScheduler+0x138>)
 8006afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <xPortStartScheduler+0x138>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a14      	ldr	r2, [pc, #80]	; (8006b58 <xPortStartScheduler+0x138>)
 8006b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b0e:	f000 f8dd 	bl	8006ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <xPortStartScheduler+0x13c>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b18:	f000 f8fc 	bl	8006d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b1c:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <xPortStartScheduler+0x140>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0f      	ldr	r2, [pc, #60]	; (8006b60 <xPortStartScheduler+0x140>)
 8006b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b28:	f7ff ff66 	bl	80069f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b2c:	f7ff fd56 	bl	80065dc <vTaskSwitchContext>
	prvTaskExitError();
 8006b30:	f7ff ff20 	bl	8006974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	e000ed00 	.word	0xe000ed00
 8006b44:	410fc271 	.word	0x410fc271
 8006b48:	410fc270 	.word	0x410fc270
 8006b4c:	e000e400 	.word	0xe000e400
 8006b50:	200006b8 	.word	0x200006b8
 8006b54:	200006bc 	.word	0x200006bc
 8006b58:	e000ed20 	.word	0xe000ed20
 8006b5c:	2000008c 	.word	0x2000008c
 8006b60:	e000ef34 	.word	0xe000ef34

08006b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	607b      	str	r3, [r7, #4]
}
 8006b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <vPortEnterCritical+0x58>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	4a0d      	ldr	r2, [pc, #52]	; (8006bbc <vPortEnterCritical+0x58>)
 8006b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <vPortEnterCritical+0x58>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d10f      	bne.n	8006bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <vPortEnterCritical+0x5c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	603b      	str	r3, [r7, #0]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <vPortEnterCritical+0x4a>
	}
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	2000008c 	.word	0x2000008c
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <vPortExitCritical+0x50>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <vPortExitCritical+0x24>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	607b      	str	r3, [r7, #4]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <vPortExitCritical+0x50>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <vPortExitCritical+0x50>)
 8006bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bf2:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <vPortExitCritical+0x50>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <vPortExitCritical+0x42>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	2000008c 	.word	0x2000008c
	...

08006c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c20:	f3ef 8009 	mrs	r0, PSP
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <pxCurrentTCBConst>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	f01e 0f10 	tst.w	lr, #16
 8006c30:	bf08      	it	eq
 8006c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3a:	6010      	str	r0, [r2, #0]
 8006c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c44:	f380 8811 	msr	BASEPRI, r0
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f7ff fcc4 	bl	80065dc <vTaskSwitchContext>
 8006c54:	f04f 0000 	mov.w	r0, #0
 8006c58:	f380 8811 	msr	BASEPRI, r0
 8006c5c:	bc09      	pop	{r0, r3}
 8006c5e:	6819      	ldr	r1, [r3, #0]
 8006c60:	6808      	ldr	r0, [r1, #0]
 8006c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c66:	f01e 0f10 	tst.w	lr, #16
 8006c6a:	bf08      	it	eq
 8006c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c70:	f380 8809 	msr	PSP, r0
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	f3af 8000 	nop.w

08006c80 <pxCurrentTCBConst>:
 8006c80:	2000058c 	.word	0x2000058c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	607b      	str	r3, [r7, #4]
}
 8006ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ca2:	f7ff fbe3 	bl	800646c <xTaskIncrementTick>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <SysTick_Handler+0x40>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f383 8811 	msr	BASEPRI, r3
}
 8006cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <vPortSetupTimerInterrupt+0x34>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <vPortSetupTimerInterrupt+0x38>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <vPortSetupTimerInterrupt+0x3c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <vPortSetupTimerInterrupt+0x40>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	099b      	lsrs	r3, r3, #6
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <vPortSetupTimerInterrupt+0x44>)
 8006cea:	3b01      	subs	r3, #1
 8006cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cee:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <vPortSetupTimerInterrupt+0x34>)
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	e000e010 	.word	0xe000e010
 8006d04:	e000e018 	.word	0xe000e018
 8006d08:	20000000 	.word	0x20000000
 8006d0c:	10624dd3 	.word	0x10624dd3
 8006d10:	e000e014 	.word	0xe000e014

08006d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d24 <vPortEnableVFP+0x10>
 8006d18:	6801      	ldr	r1, [r0, #0]
 8006d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d1e:	6001      	str	r1, [r0, #0]
 8006d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d22:	bf00      	nop
 8006d24:	e000ed88 	.word	0xe000ed88

08006d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d34:	f7ff faf0 	bl	8006318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d38:	4b5b      	ldr	r3, [pc, #364]	; (8006ea8 <pvPortMalloc+0x180>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d40:	f000 f920 	bl	8006f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d44:	4b59      	ldr	r3, [pc, #356]	; (8006eac <pvPortMalloc+0x184>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f040 8093 	bne.w	8006e78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01d      	beq.n	8006d94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d58:	2208      	movs	r2, #8
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d014      	beq.n	8006d94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f023 0307 	bic.w	r3, r3, #7
 8006d70:	3308      	adds	r3, #8
 8006d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <pvPortMalloc+0x6c>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	617b      	str	r3, [r7, #20]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d06e      	beq.n	8006e78 <pvPortMalloc+0x150>
 8006d9a:	4b45      	ldr	r3, [pc, #276]	; (8006eb0 <pvPortMalloc+0x188>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d869      	bhi.n	8006e78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006da4:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <pvPortMalloc+0x18c>)
 8006da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006da8:	4b42      	ldr	r3, [pc, #264]	; (8006eb4 <pvPortMalloc+0x18c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dae:	e004      	b.n	8006dba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d903      	bls.n	8006dcc <pvPortMalloc+0xa4>
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f1      	bne.n	8006db0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dcc:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <pvPortMalloc+0x180>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d050      	beq.n	8006e78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2208      	movs	r2, #8
 8006ddc:	4413      	add	r3, r2
 8006dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	2308      	movs	r3, #8
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d91f      	bls.n	8006e38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <pvPortMalloc+0xf8>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	613b      	str	r3, [r7, #16]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e32:	69b8      	ldr	r0, [r7, #24]
 8006e34:	f000 f908 	bl	8007048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e38:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <pvPortMalloc+0x188>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	4a1b      	ldr	r2, [pc, #108]	; (8006eb0 <pvPortMalloc+0x188>)
 8006e44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e46:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <pvPortMalloc+0x188>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <pvPortMalloc+0x190>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d203      	bcs.n	8006e5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e52:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <pvPortMalloc+0x188>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <pvPortMalloc+0x190>)
 8006e58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <pvPortMalloc+0x184>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e6e:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <pvPortMalloc+0x194>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3301      	adds	r3, #1
 8006e74:	4a11      	ldr	r2, [pc, #68]	; (8006ebc <pvPortMalloc+0x194>)
 8006e76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e78:	f7ff fa5c 	bl	8006334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <pvPortMalloc+0x174>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60fb      	str	r3, [r7, #12]
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <pvPortMalloc+0x172>
	return pvReturn;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3728      	adds	r7, #40	; 0x28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20001280 	.word	0x20001280
 8006eac:	20001294 	.word	0x20001294
 8006eb0:	20001284 	.word	0x20001284
 8006eb4:	20001278 	.word	0x20001278
 8006eb8:	20001288 	.word	0x20001288
 8006ebc:	2000128c 	.word	0x2000128c

08006ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d04d      	beq.n	8006f6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	425b      	negs	r3, r3
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4413      	add	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <vPortFree+0xb8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <vPortFree+0x44>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	60fb      	str	r3, [r7, #12]
}
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <vPortFree+0x62>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	60bb      	str	r3, [r7, #8]
}
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <vPortFree+0xb8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01e      	beq.n	8006f6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d11a      	bne.n	8006f6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <vPortFree+0xb8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	43db      	mvns	r3, r3
 8006f42:	401a      	ands	r2, r3
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f48:	f7ff f9e6 	bl	8006318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <vPortFree+0xbc>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4413      	add	r3, r2
 8006f56:	4a09      	ldr	r2, [pc, #36]	; (8006f7c <vPortFree+0xbc>)
 8006f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f000 f874 	bl	8007048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <vPortFree+0xc0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3301      	adds	r3, #1
 8006f66:	4a06      	ldr	r2, [pc, #24]	; (8006f80 <vPortFree+0xc0>)
 8006f68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f6a:	f7ff f9e3 	bl	8006334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f6e:	bf00      	nop
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20001294 	.word	0x20001294
 8006f7c:	20001284 	.word	0x20001284
 8006f80:	20001290 	.word	0x20001290

08006f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <prvHeapInit+0xac>)
 8006f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3307      	adds	r3, #7
 8006fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0307 	bic.w	r3, r3, #7
 8006faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	4a1f      	ldr	r2, [pc, #124]	; (8007030 <prvHeapInit+0xac>)
 8006fb4:	4413      	add	r3, r2
 8006fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fbc:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <prvHeapInit+0xb0>)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fc2:	4b1c      	ldr	r3, [pc, #112]	; (8007034 <prvHeapInit+0xb0>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	4413      	add	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	1a9b      	subs	r3, r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0307 	bic.w	r3, r3, #7
 8006fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4a15      	ldr	r2, [pc, #84]	; (8007038 <prvHeapInit+0xb4>)
 8006fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <prvHeapInit+0xb4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2200      	movs	r2, #0
 8006fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fee:	4b12      	ldr	r3, [pc, #72]	; (8007038 <prvHeapInit+0xb4>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007004:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <prvHeapInit+0xb4>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	4a0a      	ldr	r2, [pc, #40]	; (800703c <prvHeapInit+0xb8>)
 8007012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	4a09      	ldr	r2, [pc, #36]	; (8007040 <prvHeapInit+0xbc>)
 800701a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <prvHeapInit+0xc0>)
 800701e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007022:	601a      	str	r2, [r3, #0]
}
 8007024:	bf00      	nop
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	200006c0 	.word	0x200006c0
 8007034:	20001278 	.word	0x20001278
 8007038:	20001280 	.word	0x20001280
 800703c:	20001288 	.word	0x20001288
 8007040:	20001284 	.word	0x20001284
 8007044:	20001294 	.word	0x20001294

08007048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007050:	4b28      	ldr	r3, [pc, #160]	; (80070f4 <prvInsertBlockIntoFreeList+0xac>)
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e002      	b.n	800705c <prvInsertBlockIntoFreeList+0x14>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d8f7      	bhi.n	8007056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	4413      	add	r3, r2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	429a      	cmp	r2, r3
 8007076:	d108      	bne.n	800708a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	441a      	add	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	441a      	add	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d118      	bne.n	80070d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <prvInsertBlockIntoFreeList+0xb0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d00d      	beq.n	80070c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	441a      	add	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	e008      	b.n	80070d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <prvInsertBlockIntoFreeList+0xb0>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	e003      	b.n	80070d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d002      	beq.n	80070e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20001278 	.word	0x20001278
 80070f8:	20001280 	.word	0x20001280

080070fc <__errno>:
 80070fc:	4b01      	ldr	r3, [pc, #4]	; (8007104 <__errno+0x8>)
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000090 	.word	0x20000090

08007108 <__libc_init_array>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4d0d      	ldr	r5, [pc, #52]	; (8007140 <__libc_init_array+0x38>)
 800710c:	4c0d      	ldr	r4, [pc, #52]	; (8007144 <__libc_init_array+0x3c>)
 800710e:	1b64      	subs	r4, r4, r5
 8007110:	10a4      	asrs	r4, r4, #2
 8007112:	2600      	movs	r6, #0
 8007114:	42a6      	cmp	r6, r4
 8007116:	d109      	bne.n	800712c <__libc_init_array+0x24>
 8007118:	4d0b      	ldr	r5, [pc, #44]	; (8007148 <__libc_init_array+0x40>)
 800711a:	4c0c      	ldr	r4, [pc, #48]	; (800714c <__libc_init_array+0x44>)
 800711c:	f000 fc8e 	bl	8007a3c <_init>
 8007120:	1b64      	subs	r4, r4, r5
 8007122:	10a4      	asrs	r4, r4, #2
 8007124:	2600      	movs	r6, #0
 8007126:	42a6      	cmp	r6, r4
 8007128:	d105      	bne.n	8007136 <__libc_init_array+0x2e>
 800712a:	bd70      	pop	{r4, r5, r6, pc}
 800712c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007130:	4798      	blx	r3
 8007132:	3601      	adds	r6, #1
 8007134:	e7ee      	b.n	8007114 <__libc_init_array+0xc>
 8007136:	f855 3b04 	ldr.w	r3, [r5], #4
 800713a:	4798      	blx	r3
 800713c:	3601      	adds	r6, #1
 800713e:	e7f2      	b.n	8007126 <__libc_init_array+0x1e>
 8007140:	08007bf4 	.word	0x08007bf4
 8007144:	08007bf4 	.word	0x08007bf4
 8007148:	08007bf4 	.word	0x08007bf4
 800714c:	08007bf8 	.word	0x08007bf8

08007150 <memcpy>:
 8007150:	440a      	add	r2, r1
 8007152:	4291      	cmp	r1, r2
 8007154:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007158:	d100      	bne.n	800715c <memcpy+0xc>
 800715a:	4770      	bx	lr
 800715c:	b510      	push	{r4, lr}
 800715e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007166:	4291      	cmp	r1, r2
 8007168:	d1f9      	bne.n	800715e <memcpy+0xe>
 800716a:	bd10      	pop	{r4, pc}

0800716c <memset>:
 800716c:	4402      	add	r2, r0
 800716e:	4603      	mov	r3, r0
 8007170:	4293      	cmp	r3, r2
 8007172:	d100      	bne.n	8007176 <memset+0xa>
 8007174:	4770      	bx	lr
 8007176:	f803 1b01 	strb.w	r1, [r3], #1
 800717a:	e7f9      	b.n	8007170 <memset+0x4>

0800717c <siprintf>:
 800717c:	b40e      	push	{r1, r2, r3}
 800717e:	b500      	push	{lr}
 8007180:	b09c      	sub	sp, #112	; 0x70
 8007182:	ab1d      	add	r3, sp, #116	; 0x74
 8007184:	9002      	str	r0, [sp, #8]
 8007186:	9006      	str	r0, [sp, #24]
 8007188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800718c:	4809      	ldr	r0, [pc, #36]	; (80071b4 <siprintf+0x38>)
 800718e:	9107      	str	r1, [sp, #28]
 8007190:	9104      	str	r1, [sp, #16]
 8007192:	4909      	ldr	r1, [pc, #36]	; (80071b8 <siprintf+0x3c>)
 8007194:	f853 2b04 	ldr.w	r2, [r3], #4
 8007198:	9105      	str	r1, [sp, #20]
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	a902      	add	r1, sp, #8
 80071a0:	f000 f868 	bl	8007274 <_svfiprintf_r>
 80071a4:	9b02      	ldr	r3, [sp, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	b01c      	add	sp, #112	; 0x70
 80071ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b0:	b003      	add	sp, #12
 80071b2:	4770      	bx	lr
 80071b4:	20000090 	.word	0x20000090
 80071b8:	ffff0208 	.word	0xffff0208

080071bc <__ssputs_r>:
 80071bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	688e      	ldr	r6, [r1, #8]
 80071c2:	429e      	cmp	r6, r3
 80071c4:	4682      	mov	sl, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	4690      	mov	r8, r2
 80071ca:	461f      	mov	r7, r3
 80071cc:	d838      	bhi.n	8007240 <__ssputs_r+0x84>
 80071ce:	898a      	ldrh	r2, [r1, #12]
 80071d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071d4:	d032      	beq.n	800723c <__ssputs_r+0x80>
 80071d6:	6825      	ldr	r5, [r4, #0]
 80071d8:	6909      	ldr	r1, [r1, #16]
 80071da:	eba5 0901 	sub.w	r9, r5, r1
 80071de:	6965      	ldr	r5, [r4, #20]
 80071e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071e8:	3301      	adds	r3, #1
 80071ea:	444b      	add	r3, r9
 80071ec:	106d      	asrs	r5, r5, #1
 80071ee:	429d      	cmp	r5, r3
 80071f0:	bf38      	it	cc
 80071f2:	461d      	movcc	r5, r3
 80071f4:	0553      	lsls	r3, r2, #21
 80071f6:	d531      	bpl.n	800725c <__ssputs_r+0xa0>
 80071f8:	4629      	mov	r1, r5
 80071fa:	f000 fb55 	bl	80078a8 <_malloc_r>
 80071fe:	4606      	mov	r6, r0
 8007200:	b950      	cbnz	r0, 8007218 <__ssputs_r+0x5c>
 8007202:	230c      	movs	r3, #12
 8007204:	f8ca 3000 	str.w	r3, [sl]
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007218:	6921      	ldr	r1, [r4, #16]
 800721a:	464a      	mov	r2, r9
 800721c:	f7ff ff98 	bl	8007150 <memcpy>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	6126      	str	r6, [r4, #16]
 800722e:	6165      	str	r5, [r4, #20]
 8007230:	444e      	add	r6, r9
 8007232:	eba5 0509 	sub.w	r5, r5, r9
 8007236:	6026      	str	r6, [r4, #0]
 8007238:	60a5      	str	r5, [r4, #8]
 800723a:	463e      	mov	r6, r7
 800723c:	42be      	cmp	r6, r7
 800723e:	d900      	bls.n	8007242 <__ssputs_r+0x86>
 8007240:	463e      	mov	r6, r7
 8007242:	6820      	ldr	r0, [r4, #0]
 8007244:	4632      	mov	r2, r6
 8007246:	4641      	mov	r1, r8
 8007248:	f000 faa8 	bl	800779c <memmove>
 800724c:	68a3      	ldr	r3, [r4, #8]
 800724e:	1b9b      	subs	r3, r3, r6
 8007250:	60a3      	str	r3, [r4, #8]
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	4433      	add	r3, r6
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	2000      	movs	r0, #0
 800725a:	e7db      	b.n	8007214 <__ssputs_r+0x58>
 800725c:	462a      	mov	r2, r5
 800725e:	f000 fb97 	bl	8007990 <_realloc_r>
 8007262:	4606      	mov	r6, r0
 8007264:	2800      	cmp	r0, #0
 8007266:	d1e1      	bne.n	800722c <__ssputs_r+0x70>
 8007268:	6921      	ldr	r1, [r4, #16]
 800726a:	4650      	mov	r0, sl
 800726c:	f000 fab0 	bl	80077d0 <_free_r>
 8007270:	e7c7      	b.n	8007202 <__ssputs_r+0x46>
	...

08007274 <_svfiprintf_r>:
 8007274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007278:	4698      	mov	r8, r3
 800727a:	898b      	ldrh	r3, [r1, #12]
 800727c:	061b      	lsls	r3, r3, #24
 800727e:	b09d      	sub	sp, #116	; 0x74
 8007280:	4607      	mov	r7, r0
 8007282:	460d      	mov	r5, r1
 8007284:	4614      	mov	r4, r2
 8007286:	d50e      	bpl.n	80072a6 <_svfiprintf_r+0x32>
 8007288:	690b      	ldr	r3, [r1, #16]
 800728a:	b963      	cbnz	r3, 80072a6 <_svfiprintf_r+0x32>
 800728c:	2140      	movs	r1, #64	; 0x40
 800728e:	f000 fb0b 	bl	80078a8 <_malloc_r>
 8007292:	6028      	str	r0, [r5, #0]
 8007294:	6128      	str	r0, [r5, #16]
 8007296:	b920      	cbnz	r0, 80072a2 <_svfiprintf_r+0x2e>
 8007298:	230c      	movs	r3, #12
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a0:	e0d1      	b.n	8007446 <_svfiprintf_r+0x1d2>
 80072a2:	2340      	movs	r3, #64	; 0x40
 80072a4:	616b      	str	r3, [r5, #20]
 80072a6:	2300      	movs	r3, #0
 80072a8:	9309      	str	r3, [sp, #36]	; 0x24
 80072aa:	2320      	movs	r3, #32
 80072ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80072b4:	2330      	movs	r3, #48	; 0x30
 80072b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007460 <_svfiprintf_r+0x1ec>
 80072ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072be:	f04f 0901 	mov.w	r9, #1
 80072c2:	4623      	mov	r3, r4
 80072c4:	469a      	mov	sl, r3
 80072c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ca:	b10a      	cbz	r2, 80072d0 <_svfiprintf_r+0x5c>
 80072cc:	2a25      	cmp	r2, #37	; 0x25
 80072ce:	d1f9      	bne.n	80072c4 <_svfiprintf_r+0x50>
 80072d0:	ebba 0b04 	subs.w	fp, sl, r4
 80072d4:	d00b      	beq.n	80072ee <_svfiprintf_r+0x7a>
 80072d6:	465b      	mov	r3, fp
 80072d8:	4622      	mov	r2, r4
 80072da:	4629      	mov	r1, r5
 80072dc:	4638      	mov	r0, r7
 80072de:	f7ff ff6d 	bl	80071bc <__ssputs_r>
 80072e2:	3001      	adds	r0, #1
 80072e4:	f000 80aa 	beq.w	800743c <_svfiprintf_r+0x1c8>
 80072e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ea:	445a      	add	r2, fp
 80072ec:	9209      	str	r2, [sp, #36]	; 0x24
 80072ee:	f89a 3000 	ldrb.w	r3, [sl]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80a2 	beq.w	800743c <_svfiprintf_r+0x1c8>
 80072f8:	2300      	movs	r3, #0
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007302:	f10a 0a01 	add.w	sl, sl, #1
 8007306:	9304      	str	r3, [sp, #16]
 8007308:	9307      	str	r3, [sp, #28]
 800730a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800730e:	931a      	str	r3, [sp, #104]	; 0x68
 8007310:	4654      	mov	r4, sl
 8007312:	2205      	movs	r2, #5
 8007314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007318:	4851      	ldr	r0, [pc, #324]	; (8007460 <_svfiprintf_r+0x1ec>)
 800731a:	f7f8 ff79 	bl	8000210 <memchr>
 800731e:	9a04      	ldr	r2, [sp, #16]
 8007320:	b9d8      	cbnz	r0, 800735a <_svfiprintf_r+0xe6>
 8007322:	06d0      	lsls	r0, r2, #27
 8007324:	bf44      	itt	mi
 8007326:	2320      	movmi	r3, #32
 8007328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800732c:	0711      	lsls	r1, r2, #28
 800732e:	bf44      	itt	mi
 8007330:	232b      	movmi	r3, #43	; 0x2b
 8007332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007336:	f89a 3000 	ldrb.w	r3, [sl]
 800733a:	2b2a      	cmp	r3, #42	; 0x2a
 800733c:	d015      	beq.n	800736a <_svfiprintf_r+0xf6>
 800733e:	9a07      	ldr	r2, [sp, #28]
 8007340:	4654      	mov	r4, sl
 8007342:	2000      	movs	r0, #0
 8007344:	f04f 0c0a 	mov.w	ip, #10
 8007348:	4621      	mov	r1, r4
 800734a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800734e:	3b30      	subs	r3, #48	; 0x30
 8007350:	2b09      	cmp	r3, #9
 8007352:	d94e      	bls.n	80073f2 <_svfiprintf_r+0x17e>
 8007354:	b1b0      	cbz	r0, 8007384 <_svfiprintf_r+0x110>
 8007356:	9207      	str	r2, [sp, #28]
 8007358:	e014      	b.n	8007384 <_svfiprintf_r+0x110>
 800735a:	eba0 0308 	sub.w	r3, r0, r8
 800735e:	fa09 f303 	lsl.w	r3, r9, r3
 8007362:	4313      	orrs	r3, r2
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	46a2      	mov	sl, r4
 8007368:	e7d2      	b.n	8007310 <_svfiprintf_r+0x9c>
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	1d19      	adds	r1, r3, #4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	9103      	str	r1, [sp, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	bfbb      	ittet	lt
 8007376:	425b      	neglt	r3, r3
 8007378:	f042 0202 	orrlt.w	r2, r2, #2
 800737c:	9307      	strge	r3, [sp, #28]
 800737e:	9307      	strlt	r3, [sp, #28]
 8007380:	bfb8      	it	lt
 8007382:	9204      	strlt	r2, [sp, #16]
 8007384:	7823      	ldrb	r3, [r4, #0]
 8007386:	2b2e      	cmp	r3, #46	; 0x2e
 8007388:	d10c      	bne.n	80073a4 <_svfiprintf_r+0x130>
 800738a:	7863      	ldrb	r3, [r4, #1]
 800738c:	2b2a      	cmp	r3, #42	; 0x2a
 800738e:	d135      	bne.n	80073fc <_svfiprintf_r+0x188>
 8007390:	9b03      	ldr	r3, [sp, #12]
 8007392:	1d1a      	adds	r2, r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	9203      	str	r2, [sp, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	bfb8      	it	lt
 800739c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073a0:	3402      	adds	r4, #2
 80073a2:	9305      	str	r3, [sp, #20]
 80073a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007470 <_svfiprintf_r+0x1fc>
 80073a8:	7821      	ldrb	r1, [r4, #0]
 80073aa:	2203      	movs	r2, #3
 80073ac:	4650      	mov	r0, sl
 80073ae:	f7f8 ff2f 	bl	8000210 <memchr>
 80073b2:	b140      	cbz	r0, 80073c6 <_svfiprintf_r+0x152>
 80073b4:	2340      	movs	r3, #64	; 0x40
 80073b6:	eba0 000a 	sub.w	r0, r0, sl
 80073ba:	fa03 f000 	lsl.w	r0, r3, r0
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	4303      	orrs	r3, r0
 80073c2:	3401      	adds	r4, #1
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ca:	4826      	ldr	r0, [pc, #152]	; (8007464 <_svfiprintf_r+0x1f0>)
 80073cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073d0:	2206      	movs	r2, #6
 80073d2:	f7f8 ff1d 	bl	8000210 <memchr>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d038      	beq.n	800744c <_svfiprintf_r+0x1d8>
 80073da:	4b23      	ldr	r3, [pc, #140]	; (8007468 <_svfiprintf_r+0x1f4>)
 80073dc:	bb1b      	cbnz	r3, 8007426 <_svfiprintf_r+0x1b2>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	3307      	adds	r3, #7
 80073e2:	f023 0307 	bic.w	r3, r3, #7
 80073e6:	3308      	adds	r3, #8
 80073e8:	9303      	str	r3, [sp, #12]
 80073ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ec:	4433      	add	r3, r6
 80073ee:	9309      	str	r3, [sp, #36]	; 0x24
 80073f0:	e767      	b.n	80072c2 <_svfiprintf_r+0x4e>
 80073f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073f6:	460c      	mov	r4, r1
 80073f8:	2001      	movs	r0, #1
 80073fa:	e7a5      	b.n	8007348 <_svfiprintf_r+0xd4>
 80073fc:	2300      	movs	r3, #0
 80073fe:	3401      	adds	r4, #1
 8007400:	9305      	str	r3, [sp, #20]
 8007402:	4619      	mov	r1, r3
 8007404:	f04f 0c0a 	mov.w	ip, #10
 8007408:	4620      	mov	r0, r4
 800740a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800740e:	3a30      	subs	r2, #48	; 0x30
 8007410:	2a09      	cmp	r2, #9
 8007412:	d903      	bls.n	800741c <_svfiprintf_r+0x1a8>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0c5      	beq.n	80073a4 <_svfiprintf_r+0x130>
 8007418:	9105      	str	r1, [sp, #20]
 800741a:	e7c3      	b.n	80073a4 <_svfiprintf_r+0x130>
 800741c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007420:	4604      	mov	r4, r0
 8007422:	2301      	movs	r3, #1
 8007424:	e7f0      	b.n	8007408 <_svfiprintf_r+0x194>
 8007426:	ab03      	add	r3, sp, #12
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	462a      	mov	r2, r5
 800742c:	4b0f      	ldr	r3, [pc, #60]	; (800746c <_svfiprintf_r+0x1f8>)
 800742e:	a904      	add	r1, sp, #16
 8007430:	4638      	mov	r0, r7
 8007432:	f3af 8000 	nop.w
 8007436:	1c42      	adds	r2, r0, #1
 8007438:	4606      	mov	r6, r0
 800743a:	d1d6      	bne.n	80073ea <_svfiprintf_r+0x176>
 800743c:	89ab      	ldrh	r3, [r5, #12]
 800743e:	065b      	lsls	r3, r3, #25
 8007440:	f53f af2c 	bmi.w	800729c <_svfiprintf_r+0x28>
 8007444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007446:	b01d      	add	sp, #116	; 0x74
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	ab03      	add	r3, sp, #12
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	462a      	mov	r2, r5
 8007452:	4b06      	ldr	r3, [pc, #24]	; (800746c <_svfiprintf_r+0x1f8>)
 8007454:	a904      	add	r1, sp, #16
 8007456:	4638      	mov	r0, r7
 8007458:	f000 f87a 	bl	8007550 <_printf_i>
 800745c:	e7eb      	b.n	8007436 <_svfiprintf_r+0x1c2>
 800745e:	bf00      	nop
 8007460:	08007bb8 	.word	0x08007bb8
 8007464:	08007bc2 	.word	0x08007bc2
 8007468:	00000000 	.word	0x00000000
 800746c:	080071bd 	.word	0x080071bd
 8007470:	08007bbe 	.word	0x08007bbe

08007474 <_printf_common>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	4616      	mov	r6, r2
 800747a:	4699      	mov	r9, r3
 800747c:	688a      	ldr	r2, [r1, #8]
 800747e:	690b      	ldr	r3, [r1, #16]
 8007480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007484:	4293      	cmp	r3, r2
 8007486:	bfb8      	it	lt
 8007488:	4613      	movlt	r3, r2
 800748a:	6033      	str	r3, [r6, #0]
 800748c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007490:	4607      	mov	r7, r0
 8007492:	460c      	mov	r4, r1
 8007494:	b10a      	cbz	r2, 800749a <_printf_common+0x26>
 8007496:	3301      	adds	r3, #1
 8007498:	6033      	str	r3, [r6, #0]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	0699      	lsls	r1, r3, #26
 800749e:	bf42      	ittt	mi
 80074a0:	6833      	ldrmi	r3, [r6, #0]
 80074a2:	3302      	addmi	r3, #2
 80074a4:	6033      	strmi	r3, [r6, #0]
 80074a6:	6825      	ldr	r5, [r4, #0]
 80074a8:	f015 0506 	ands.w	r5, r5, #6
 80074ac:	d106      	bne.n	80074bc <_printf_common+0x48>
 80074ae:	f104 0a19 	add.w	sl, r4, #25
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	6832      	ldr	r2, [r6, #0]
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	42ab      	cmp	r3, r5
 80074ba:	dc26      	bgt.n	800750a <_printf_common+0x96>
 80074bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074c0:	1e13      	subs	r3, r2, #0
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	bf18      	it	ne
 80074c6:	2301      	movne	r3, #1
 80074c8:	0692      	lsls	r2, r2, #26
 80074ca:	d42b      	bmi.n	8007524 <_printf_common+0xb0>
 80074cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d0:	4649      	mov	r1, r9
 80074d2:	4638      	mov	r0, r7
 80074d4:	47c0      	blx	r8
 80074d6:	3001      	adds	r0, #1
 80074d8:	d01e      	beq.n	8007518 <_printf_common+0xa4>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	68e5      	ldr	r5, [r4, #12]
 80074de:	6832      	ldr	r2, [r6, #0]
 80074e0:	f003 0306 	and.w	r3, r3, #6
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	bf08      	it	eq
 80074e8:	1aad      	subeq	r5, r5, r2
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	6922      	ldr	r2, [r4, #16]
 80074ee:	bf0c      	ite	eq
 80074f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f4:	2500      	movne	r5, #0
 80074f6:	4293      	cmp	r3, r2
 80074f8:	bfc4      	itt	gt
 80074fa:	1a9b      	subgt	r3, r3, r2
 80074fc:	18ed      	addgt	r5, r5, r3
 80074fe:	2600      	movs	r6, #0
 8007500:	341a      	adds	r4, #26
 8007502:	42b5      	cmp	r5, r6
 8007504:	d11a      	bne.n	800753c <_printf_common+0xc8>
 8007506:	2000      	movs	r0, #0
 8007508:	e008      	b.n	800751c <_printf_common+0xa8>
 800750a:	2301      	movs	r3, #1
 800750c:	4652      	mov	r2, sl
 800750e:	4649      	mov	r1, r9
 8007510:	4638      	mov	r0, r7
 8007512:	47c0      	blx	r8
 8007514:	3001      	adds	r0, #1
 8007516:	d103      	bne.n	8007520 <_printf_common+0xac>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	3501      	adds	r5, #1
 8007522:	e7c6      	b.n	80074b2 <_printf_common+0x3e>
 8007524:	18e1      	adds	r1, r4, r3
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	2030      	movs	r0, #48	; 0x30
 800752a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800752e:	4422      	add	r2, r4
 8007530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007538:	3302      	adds	r3, #2
 800753a:	e7c7      	b.n	80074cc <_printf_common+0x58>
 800753c:	2301      	movs	r3, #1
 800753e:	4622      	mov	r2, r4
 8007540:	4649      	mov	r1, r9
 8007542:	4638      	mov	r0, r7
 8007544:	47c0      	blx	r8
 8007546:	3001      	adds	r0, #1
 8007548:	d0e6      	beq.n	8007518 <_printf_common+0xa4>
 800754a:	3601      	adds	r6, #1
 800754c:	e7d9      	b.n	8007502 <_printf_common+0x8e>
	...

08007550 <_printf_i>:
 8007550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	7e0f      	ldrb	r7, [r1, #24]
 8007556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007558:	2f78      	cmp	r7, #120	; 0x78
 800755a:	4691      	mov	r9, r2
 800755c:	4680      	mov	r8, r0
 800755e:	460c      	mov	r4, r1
 8007560:	469a      	mov	sl, r3
 8007562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007566:	d807      	bhi.n	8007578 <_printf_i+0x28>
 8007568:	2f62      	cmp	r7, #98	; 0x62
 800756a:	d80a      	bhi.n	8007582 <_printf_i+0x32>
 800756c:	2f00      	cmp	r7, #0
 800756e:	f000 80d8 	beq.w	8007722 <_printf_i+0x1d2>
 8007572:	2f58      	cmp	r7, #88	; 0x58
 8007574:	f000 80a3 	beq.w	80076be <_printf_i+0x16e>
 8007578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800757c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007580:	e03a      	b.n	80075f8 <_printf_i+0xa8>
 8007582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007586:	2b15      	cmp	r3, #21
 8007588:	d8f6      	bhi.n	8007578 <_printf_i+0x28>
 800758a:	a101      	add	r1, pc, #4	; (adr r1, 8007590 <_printf_i+0x40>)
 800758c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007590:	080075e9 	.word	0x080075e9
 8007594:	080075fd 	.word	0x080075fd
 8007598:	08007579 	.word	0x08007579
 800759c:	08007579 	.word	0x08007579
 80075a0:	08007579 	.word	0x08007579
 80075a4:	08007579 	.word	0x08007579
 80075a8:	080075fd 	.word	0x080075fd
 80075ac:	08007579 	.word	0x08007579
 80075b0:	08007579 	.word	0x08007579
 80075b4:	08007579 	.word	0x08007579
 80075b8:	08007579 	.word	0x08007579
 80075bc:	08007709 	.word	0x08007709
 80075c0:	0800762d 	.word	0x0800762d
 80075c4:	080076eb 	.word	0x080076eb
 80075c8:	08007579 	.word	0x08007579
 80075cc:	08007579 	.word	0x08007579
 80075d0:	0800772b 	.word	0x0800772b
 80075d4:	08007579 	.word	0x08007579
 80075d8:	0800762d 	.word	0x0800762d
 80075dc:	08007579 	.word	0x08007579
 80075e0:	08007579 	.word	0x08007579
 80075e4:	080076f3 	.word	0x080076f3
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	602a      	str	r2, [r5, #0]
 80075f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f8:	2301      	movs	r3, #1
 80075fa:	e0a3      	b.n	8007744 <_printf_i+0x1f4>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	6829      	ldr	r1, [r5, #0]
 8007600:	0606      	lsls	r6, r0, #24
 8007602:	f101 0304 	add.w	r3, r1, #4
 8007606:	d50a      	bpl.n	800761e <_printf_i+0xce>
 8007608:	680e      	ldr	r6, [r1, #0]
 800760a:	602b      	str	r3, [r5, #0]
 800760c:	2e00      	cmp	r6, #0
 800760e:	da03      	bge.n	8007618 <_printf_i+0xc8>
 8007610:	232d      	movs	r3, #45	; 0x2d
 8007612:	4276      	negs	r6, r6
 8007614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007618:	485e      	ldr	r0, [pc, #376]	; (8007794 <_printf_i+0x244>)
 800761a:	230a      	movs	r3, #10
 800761c:	e019      	b.n	8007652 <_printf_i+0x102>
 800761e:	680e      	ldr	r6, [r1, #0]
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007626:	bf18      	it	ne
 8007628:	b236      	sxthne	r6, r6
 800762a:	e7ef      	b.n	800760c <_printf_i+0xbc>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	1d19      	adds	r1, r3, #4
 8007632:	6029      	str	r1, [r5, #0]
 8007634:	0601      	lsls	r1, r0, #24
 8007636:	d501      	bpl.n	800763c <_printf_i+0xec>
 8007638:	681e      	ldr	r6, [r3, #0]
 800763a:	e002      	b.n	8007642 <_printf_i+0xf2>
 800763c:	0646      	lsls	r6, r0, #25
 800763e:	d5fb      	bpl.n	8007638 <_printf_i+0xe8>
 8007640:	881e      	ldrh	r6, [r3, #0]
 8007642:	4854      	ldr	r0, [pc, #336]	; (8007794 <_printf_i+0x244>)
 8007644:	2f6f      	cmp	r7, #111	; 0x6f
 8007646:	bf0c      	ite	eq
 8007648:	2308      	moveq	r3, #8
 800764a:	230a      	movne	r3, #10
 800764c:	2100      	movs	r1, #0
 800764e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007652:	6865      	ldr	r5, [r4, #4]
 8007654:	60a5      	str	r5, [r4, #8]
 8007656:	2d00      	cmp	r5, #0
 8007658:	bfa2      	ittt	ge
 800765a:	6821      	ldrge	r1, [r4, #0]
 800765c:	f021 0104 	bicge.w	r1, r1, #4
 8007660:	6021      	strge	r1, [r4, #0]
 8007662:	b90e      	cbnz	r6, 8007668 <_printf_i+0x118>
 8007664:	2d00      	cmp	r5, #0
 8007666:	d04d      	beq.n	8007704 <_printf_i+0x1b4>
 8007668:	4615      	mov	r5, r2
 800766a:	fbb6 f1f3 	udiv	r1, r6, r3
 800766e:	fb03 6711 	mls	r7, r3, r1, r6
 8007672:	5dc7      	ldrb	r7, [r0, r7]
 8007674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007678:	4637      	mov	r7, r6
 800767a:	42bb      	cmp	r3, r7
 800767c:	460e      	mov	r6, r1
 800767e:	d9f4      	bls.n	800766a <_printf_i+0x11a>
 8007680:	2b08      	cmp	r3, #8
 8007682:	d10b      	bne.n	800769c <_printf_i+0x14c>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	07de      	lsls	r6, r3, #31
 8007688:	d508      	bpl.n	800769c <_printf_i+0x14c>
 800768a:	6923      	ldr	r3, [r4, #16]
 800768c:	6861      	ldr	r1, [r4, #4]
 800768e:	4299      	cmp	r1, r3
 8007690:	bfde      	ittt	le
 8007692:	2330      	movle	r3, #48	; 0x30
 8007694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007698:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800769c:	1b52      	subs	r2, r2, r5
 800769e:	6122      	str	r2, [r4, #16]
 80076a0:	f8cd a000 	str.w	sl, [sp]
 80076a4:	464b      	mov	r3, r9
 80076a6:	aa03      	add	r2, sp, #12
 80076a8:	4621      	mov	r1, r4
 80076aa:	4640      	mov	r0, r8
 80076ac:	f7ff fee2 	bl	8007474 <_printf_common>
 80076b0:	3001      	adds	r0, #1
 80076b2:	d14c      	bne.n	800774e <_printf_i+0x1fe>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b8:	b004      	add	sp, #16
 80076ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076be:	4835      	ldr	r0, [pc, #212]	; (8007794 <_printf_i+0x244>)
 80076c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076c4:	6829      	ldr	r1, [r5, #0]
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80076cc:	6029      	str	r1, [r5, #0]
 80076ce:	061d      	lsls	r5, r3, #24
 80076d0:	d514      	bpl.n	80076fc <_printf_i+0x1ac>
 80076d2:	07df      	lsls	r7, r3, #31
 80076d4:	bf44      	itt	mi
 80076d6:	f043 0320 	orrmi.w	r3, r3, #32
 80076da:	6023      	strmi	r3, [r4, #0]
 80076dc:	b91e      	cbnz	r6, 80076e6 <_printf_i+0x196>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f023 0320 	bic.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	2310      	movs	r3, #16
 80076e8:	e7b0      	b.n	800764c <_printf_i+0xfc>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	f043 0320 	orr.w	r3, r3, #32
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	2378      	movs	r3, #120	; 0x78
 80076f4:	4828      	ldr	r0, [pc, #160]	; (8007798 <_printf_i+0x248>)
 80076f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076fa:	e7e3      	b.n	80076c4 <_printf_i+0x174>
 80076fc:	0659      	lsls	r1, r3, #25
 80076fe:	bf48      	it	mi
 8007700:	b2b6      	uxthmi	r6, r6
 8007702:	e7e6      	b.n	80076d2 <_printf_i+0x182>
 8007704:	4615      	mov	r5, r2
 8007706:	e7bb      	b.n	8007680 <_printf_i+0x130>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	6826      	ldr	r6, [r4, #0]
 800770c:	6961      	ldr	r1, [r4, #20]
 800770e:	1d18      	adds	r0, r3, #4
 8007710:	6028      	str	r0, [r5, #0]
 8007712:	0635      	lsls	r5, r6, #24
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	d501      	bpl.n	800771c <_printf_i+0x1cc>
 8007718:	6019      	str	r1, [r3, #0]
 800771a:	e002      	b.n	8007722 <_printf_i+0x1d2>
 800771c:	0670      	lsls	r0, r6, #25
 800771e:	d5fb      	bpl.n	8007718 <_printf_i+0x1c8>
 8007720:	8019      	strh	r1, [r3, #0]
 8007722:	2300      	movs	r3, #0
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	4615      	mov	r5, r2
 8007728:	e7ba      	b.n	80076a0 <_printf_i+0x150>
 800772a:	682b      	ldr	r3, [r5, #0]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	602a      	str	r2, [r5, #0]
 8007730:	681d      	ldr	r5, [r3, #0]
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	2100      	movs	r1, #0
 8007736:	4628      	mov	r0, r5
 8007738:	f7f8 fd6a 	bl	8000210 <memchr>
 800773c:	b108      	cbz	r0, 8007742 <_printf_i+0x1f2>
 800773e:	1b40      	subs	r0, r0, r5
 8007740:	6060      	str	r0, [r4, #4]
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	2300      	movs	r3, #0
 8007748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800774c:	e7a8      	b.n	80076a0 <_printf_i+0x150>
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	462a      	mov	r2, r5
 8007752:	4649      	mov	r1, r9
 8007754:	4640      	mov	r0, r8
 8007756:	47d0      	blx	sl
 8007758:	3001      	adds	r0, #1
 800775a:	d0ab      	beq.n	80076b4 <_printf_i+0x164>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	079b      	lsls	r3, r3, #30
 8007760:	d413      	bmi.n	800778a <_printf_i+0x23a>
 8007762:	68e0      	ldr	r0, [r4, #12]
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	4298      	cmp	r0, r3
 8007768:	bfb8      	it	lt
 800776a:	4618      	movlt	r0, r3
 800776c:	e7a4      	b.n	80076b8 <_printf_i+0x168>
 800776e:	2301      	movs	r3, #1
 8007770:	4632      	mov	r2, r6
 8007772:	4649      	mov	r1, r9
 8007774:	4640      	mov	r0, r8
 8007776:	47d0      	blx	sl
 8007778:	3001      	adds	r0, #1
 800777a:	d09b      	beq.n	80076b4 <_printf_i+0x164>
 800777c:	3501      	adds	r5, #1
 800777e:	68e3      	ldr	r3, [r4, #12]
 8007780:	9903      	ldr	r1, [sp, #12]
 8007782:	1a5b      	subs	r3, r3, r1
 8007784:	42ab      	cmp	r3, r5
 8007786:	dcf2      	bgt.n	800776e <_printf_i+0x21e>
 8007788:	e7eb      	b.n	8007762 <_printf_i+0x212>
 800778a:	2500      	movs	r5, #0
 800778c:	f104 0619 	add.w	r6, r4, #25
 8007790:	e7f5      	b.n	800777e <_printf_i+0x22e>
 8007792:	bf00      	nop
 8007794:	08007bc9 	.word	0x08007bc9
 8007798:	08007bda 	.word	0x08007bda

0800779c <memmove>:
 800779c:	4288      	cmp	r0, r1
 800779e:	b510      	push	{r4, lr}
 80077a0:	eb01 0402 	add.w	r4, r1, r2
 80077a4:	d902      	bls.n	80077ac <memmove+0x10>
 80077a6:	4284      	cmp	r4, r0
 80077a8:	4623      	mov	r3, r4
 80077aa:	d807      	bhi.n	80077bc <memmove+0x20>
 80077ac:	1e43      	subs	r3, r0, #1
 80077ae:	42a1      	cmp	r1, r4
 80077b0:	d008      	beq.n	80077c4 <memmove+0x28>
 80077b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ba:	e7f8      	b.n	80077ae <memmove+0x12>
 80077bc:	4402      	add	r2, r0
 80077be:	4601      	mov	r1, r0
 80077c0:	428a      	cmp	r2, r1
 80077c2:	d100      	bne.n	80077c6 <memmove+0x2a>
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077ce:	e7f7      	b.n	80077c0 <memmove+0x24>

080077d0 <_free_r>:
 80077d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d2:	2900      	cmp	r1, #0
 80077d4:	d044      	beq.n	8007860 <_free_r+0x90>
 80077d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077da:	9001      	str	r0, [sp, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f1a1 0404 	sub.w	r4, r1, #4
 80077e2:	bfb8      	it	lt
 80077e4:	18e4      	addlt	r4, r4, r3
 80077e6:	f000 f913 	bl	8007a10 <__malloc_lock>
 80077ea:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <_free_r+0x94>)
 80077ec:	9801      	ldr	r0, [sp, #4]
 80077ee:	6813      	ldr	r3, [r2, #0]
 80077f0:	b933      	cbnz	r3, 8007800 <_free_r+0x30>
 80077f2:	6063      	str	r3, [r4, #4]
 80077f4:	6014      	str	r4, [r2, #0]
 80077f6:	b003      	add	sp, #12
 80077f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077fc:	f000 b90e 	b.w	8007a1c <__malloc_unlock>
 8007800:	42a3      	cmp	r3, r4
 8007802:	d908      	bls.n	8007816 <_free_r+0x46>
 8007804:	6825      	ldr	r5, [r4, #0]
 8007806:	1961      	adds	r1, r4, r5
 8007808:	428b      	cmp	r3, r1
 800780a:	bf01      	itttt	eq
 800780c:	6819      	ldreq	r1, [r3, #0]
 800780e:	685b      	ldreq	r3, [r3, #4]
 8007810:	1949      	addeq	r1, r1, r5
 8007812:	6021      	streq	r1, [r4, #0]
 8007814:	e7ed      	b.n	80077f2 <_free_r+0x22>
 8007816:	461a      	mov	r2, r3
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	b10b      	cbz	r3, 8007820 <_free_r+0x50>
 800781c:	42a3      	cmp	r3, r4
 800781e:	d9fa      	bls.n	8007816 <_free_r+0x46>
 8007820:	6811      	ldr	r1, [r2, #0]
 8007822:	1855      	adds	r5, r2, r1
 8007824:	42a5      	cmp	r5, r4
 8007826:	d10b      	bne.n	8007840 <_free_r+0x70>
 8007828:	6824      	ldr	r4, [r4, #0]
 800782a:	4421      	add	r1, r4
 800782c:	1854      	adds	r4, r2, r1
 800782e:	42a3      	cmp	r3, r4
 8007830:	6011      	str	r1, [r2, #0]
 8007832:	d1e0      	bne.n	80077f6 <_free_r+0x26>
 8007834:	681c      	ldr	r4, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	6053      	str	r3, [r2, #4]
 800783a:	4421      	add	r1, r4
 800783c:	6011      	str	r1, [r2, #0]
 800783e:	e7da      	b.n	80077f6 <_free_r+0x26>
 8007840:	d902      	bls.n	8007848 <_free_r+0x78>
 8007842:	230c      	movs	r3, #12
 8007844:	6003      	str	r3, [r0, #0]
 8007846:	e7d6      	b.n	80077f6 <_free_r+0x26>
 8007848:	6825      	ldr	r5, [r4, #0]
 800784a:	1961      	adds	r1, r4, r5
 800784c:	428b      	cmp	r3, r1
 800784e:	bf04      	itt	eq
 8007850:	6819      	ldreq	r1, [r3, #0]
 8007852:	685b      	ldreq	r3, [r3, #4]
 8007854:	6063      	str	r3, [r4, #4]
 8007856:	bf04      	itt	eq
 8007858:	1949      	addeq	r1, r1, r5
 800785a:	6021      	streq	r1, [r4, #0]
 800785c:	6054      	str	r4, [r2, #4]
 800785e:	e7ca      	b.n	80077f6 <_free_r+0x26>
 8007860:	b003      	add	sp, #12
 8007862:	bd30      	pop	{r4, r5, pc}
 8007864:	20001298 	.word	0x20001298

08007868 <sbrk_aligned>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4e0e      	ldr	r6, [pc, #56]	; (80078a4 <sbrk_aligned+0x3c>)
 800786c:	460c      	mov	r4, r1
 800786e:	6831      	ldr	r1, [r6, #0]
 8007870:	4605      	mov	r5, r0
 8007872:	b911      	cbnz	r1, 800787a <sbrk_aligned+0x12>
 8007874:	f000 f8bc 	bl	80079f0 <_sbrk_r>
 8007878:	6030      	str	r0, [r6, #0]
 800787a:	4621      	mov	r1, r4
 800787c:	4628      	mov	r0, r5
 800787e:	f000 f8b7 	bl	80079f0 <_sbrk_r>
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	d00a      	beq.n	800789c <sbrk_aligned+0x34>
 8007886:	1cc4      	adds	r4, r0, #3
 8007888:	f024 0403 	bic.w	r4, r4, #3
 800788c:	42a0      	cmp	r0, r4
 800788e:	d007      	beq.n	80078a0 <sbrk_aligned+0x38>
 8007890:	1a21      	subs	r1, r4, r0
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f8ac 	bl	80079f0 <_sbrk_r>
 8007898:	3001      	adds	r0, #1
 800789a:	d101      	bne.n	80078a0 <sbrk_aligned+0x38>
 800789c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80078a0:	4620      	mov	r0, r4
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	2000129c 	.word	0x2000129c

080078a8 <_malloc_r>:
 80078a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	1ccd      	adds	r5, r1, #3
 80078ae:	f025 0503 	bic.w	r5, r5, #3
 80078b2:	3508      	adds	r5, #8
 80078b4:	2d0c      	cmp	r5, #12
 80078b6:	bf38      	it	cc
 80078b8:	250c      	movcc	r5, #12
 80078ba:	2d00      	cmp	r5, #0
 80078bc:	4607      	mov	r7, r0
 80078be:	db01      	blt.n	80078c4 <_malloc_r+0x1c>
 80078c0:	42a9      	cmp	r1, r5
 80078c2:	d905      	bls.n	80078d0 <_malloc_r+0x28>
 80078c4:	230c      	movs	r3, #12
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	2600      	movs	r6, #0
 80078ca:	4630      	mov	r0, r6
 80078cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d0:	4e2e      	ldr	r6, [pc, #184]	; (800798c <_malloc_r+0xe4>)
 80078d2:	f000 f89d 	bl	8007a10 <__malloc_lock>
 80078d6:	6833      	ldr	r3, [r6, #0]
 80078d8:	461c      	mov	r4, r3
 80078da:	bb34      	cbnz	r4, 800792a <_malloc_r+0x82>
 80078dc:	4629      	mov	r1, r5
 80078de:	4638      	mov	r0, r7
 80078e0:	f7ff ffc2 	bl	8007868 <sbrk_aligned>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	4604      	mov	r4, r0
 80078e8:	d14d      	bne.n	8007986 <_malloc_r+0xde>
 80078ea:	6834      	ldr	r4, [r6, #0]
 80078ec:	4626      	mov	r6, r4
 80078ee:	2e00      	cmp	r6, #0
 80078f0:	d140      	bne.n	8007974 <_malloc_r+0xcc>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	4631      	mov	r1, r6
 80078f6:	4638      	mov	r0, r7
 80078f8:	eb04 0803 	add.w	r8, r4, r3
 80078fc:	f000 f878 	bl	80079f0 <_sbrk_r>
 8007900:	4580      	cmp	r8, r0
 8007902:	d13a      	bne.n	800797a <_malloc_r+0xd2>
 8007904:	6821      	ldr	r1, [r4, #0]
 8007906:	3503      	adds	r5, #3
 8007908:	1a6d      	subs	r5, r5, r1
 800790a:	f025 0503 	bic.w	r5, r5, #3
 800790e:	3508      	adds	r5, #8
 8007910:	2d0c      	cmp	r5, #12
 8007912:	bf38      	it	cc
 8007914:	250c      	movcc	r5, #12
 8007916:	4629      	mov	r1, r5
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ffa5 	bl	8007868 <sbrk_aligned>
 800791e:	3001      	adds	r0, #1
 8007920:	d02b      	beq.n	800797a <_malloc_r+0xd2>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	442b      	add	r3, r5
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	e00e      	b.n	8007948 <_malloc_r+0xa0>
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	1b52      	subs	r2, r2, r5
 800792e:	d41e      	bmi.n	800796e <_malloc_r+0xc6>
 8007930:	2a0b      	cmp	r2, #11
 8007932:	d916      	bls.n	8007962 <_malloc_r+0xba>
 8007934:	1961      	adds	r1, r4, r5
 8007936:	42a3      	cmp	r3, r4
 8007938:	6025      	str	r5, [r4, #0]
 800793a:	bf18      	it	ne
 800793c:	6059      	strne	r1, [r3, #4]
 800793e:	6863      	ldr	r3, [r4, #4]
 8007940:	bf08      	it	eq
 8007942:	6031      	streq	r1, [r6, #0]
 8007944:	5162      	str	r2, [r4, r5]
 8007946:	604b      	str	r3, [r1, #4]
 8007948:	4638      	mov	r0, r7
 800794a:	f104 060b 	add.w	r6, r4, #11
 800794e:	f000 f865 	bl	8007a1c <__malloc_unlock>
 8007952:	f026 0607 	bic.w	r6, r6, #7
 8007956:	1d23      	adds	r3, r4, #4
 8007958:	1af2      	subs	r2, r6, r3
 800795a:	d0b6      	beq.n	80078ca <_malloc_r+0x22>
 800795c:	1b9b      	subs	r3, r3, r6
 800795e:	50a3      	str	r3, [r4, r2]
 8007960:	e7b3      	b.n	80078ca <_malloc_r+0x22>
 8007962:	6862      	ldr	r2, [r4, #4]
 8007964:	42a3      	cmp	r3, r4
 8007966:	bf0c      	ite	eq
 8007968:	6032      	streq	r2, [r6, #0]
 800796a:	605a      	strne	r2, [r3, #4]
 800796c:	e7ec      	b.n	8007948 <_malloc_r+0xa0>
 800796e:	4623      	mov	r3, r4
 8007970:	6864      	ldr	r4, [r4, #4]
 8007972:	e7b2      	b.n	80078da <_malloc_r+0x32>
 8007974:	4634      	mov	r4, r6
 8007976:	6876      	ldr	r6, [r6, #4]
 8007978:	e7b9      	b.n	80078ee <_malloc_r+0x46>
 800797a:	230c      	movs	r3, #12
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	4638      	mov	r0, r7
 8007980:	f000 f84c 	bl	8007a1c <__malloc_unlock>
 8007984:	e7a1      	b.n	80078ca <_malloc_r+0x22>
 8007986:	6025      	str	r5, [r4, #0]
 8007988:	e7de      	b.n	8007948 <_malloc_r+0xa0>
 800798a:	bf00      	nop
 800798c:	20001298 	.word	0x20001298

08007990 <_realloc_r>:
 8007990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007994:	4680      	mov	r8, r0
 8007996:	4614      	mov	r4, r2
 8007998:	460e      	mov	r6, r1
 800799a:	b921      	cbnz	r1, 80079a6 <_realloc_r+0x16>
 800799c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	4611      	mov	r1, r2
 80079a2:	f7ff bf81 	b.w	80078a8 <_malloc_r>
 80079a6:	b92a      	cbnz	r2, 80079b4 <_realloc_r+0x24>
 80079a8:	f7ff ff12 	bl	80077d0 <_free_r>
 80079ac:	4625      	mov	r5, r4
 80079ae:	4628      	mov	r0, r5
 80079b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b4:	f000 f838 	bl	8007a28 <_malloc_usable_size_r>
 80079b8:	4284      	cmp	r4, r0
 80079ba:	4607      	mov	r7, r0
 80079bc:	d802      	bhi.n	80079c4 <_realloc_r+0x34>
 80079be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079c2:	d812      	bhi.n	80079ea <_realloc_r+0x5a>
 80079c4:	4621      	mov	r1, r4
 80079c6:	4640      	mov	r0, r8
 80079c8:	f7ff ff6e 	bl	80078a8 <_malloc_r>
 80079cc:	4605      	mov	r5, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d0ed      	beq.n	80079ae <_realloc_r+0x1e>
 80079d2:	42bc      	cmp	r4, r7
 80079d4:	4622      	mov	r2, r4
 80079d6:	4631      	mov	r1, r6
 80079d8:	bf28      	it	cs
 80079da:	463a      	movcs	r2, r7
 80079dc:	f7ff fbb8 	bl	8007150 <memcpy>
 80079e0:	4631      	mov	r1, r6
 80079e2:	4640      	mov	r0, r8
 80079e4:	f7ff fef4 	bl	80077d0 <_free_r>
 80079e8:	e7e1      	b.n	80079ae <_realloc_r+0x1e>
 80079ea:	4635      	mov	r5, r6
 80079ec:	e7df      	b.n	80079ae <_realloc_r+0x1e>
	...

080079f0 <_sbrk_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d06      	ldr	r5, [pc, #24]	; (8007a0c <_sbrk_r+0x1c>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	f7f9 fa4c 	bl	8000e98 <_sbrk>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_sbrk_r+0x1a>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_sbrk_r+0x1a>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	200012a0 	.word	0x200012a0

08007a10 <__malloc_lock>:
 8007a10:	4801      	ldr	r0, [pc, #4]	; (8007a18 <__malloc_lock+0x8>)
 8007a12:	f000 b811 	b.w	8007a38 <__retarget_lock_acquire_recursive>
 8007a16:	bf00      	nop
 8007a18:	200012a4 	.word	0x200012a4

08007a1c <__malloc_unlock>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	; (8007a24 <__malloc_unlock+0x8>)
 8007a1e:	f000 b80c 	b.w	8007a3a <__retarget_lock_release_recursive>
 8007a22:	bf00      	nop
 8007a24:	200012a4 	.word	0x200012a4

08007a28 <_malloc_usable_size_r>:
 8007a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2c:	1f18      	subs	r0, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bfbc      	itt	lt
 8007a32:	580b      	ldrlt	r3, [r1, r0]
 8007a34:	18c0      	addlt	r0, r0, r3
 8007a36:	4770      	bx	lr

08007a38 <__retarget_lock_acquire_recursive>:
 8007a38:	4770      	bx	lr

08007a3a <__retarget_lock_release_recursive>:
 8007a3a:	4770      	bx	lr

08007a3c <_init>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	bf00      	nop
 8007a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a42:	bc08      	pop	{r3}
 8007a44:	469e      	mov	lr, r3
 8007a46:	4770      	bx	lr

08007a48 <_fini>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr
